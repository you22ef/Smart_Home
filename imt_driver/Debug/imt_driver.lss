
imt_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00004014  000040a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  008001ca  008001ca  00004212  2**0
                  ALLOC
  3 .stab         000048f0  00000000  00000000  00004214  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b46  00000000  00000000  00008b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a64a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a78a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a8fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c543  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d42e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e1dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ed97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 1a 	call	0x351a	; 0x351a <main>
      8a:	0c 94 08 20 	jmp	0x4010	; 0x4010 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e3       	ldi	r26, 0x36	; 54
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 1d 	jmp	0x3ab0	; 0x3ab0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 1d 	jmp	0x3ab0	; 0x3ab0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e3       	ldi	r24, 0x36	; 54
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 58 1d 	jmp	0x3ab0	; 0x3ab0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 58 1d 	jmp	0x3ab0	; 0x3ab0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 58 1d 	jmp	0x3ab0	; 0x3ab0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <uart_init>:
#include "USART_Interface.h"
#include "USART_register.h"
#include <avr/io.h>
#include "../../LIB/STD_TYPES.h"
void uart_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UCSRB = (1 << UCSRB_TXEN) | (1 << UCSRB_RXEN);                  // Enable the transmitting and receiving pins
     b4e:	ea e2       	ldi	r30, 0x2A	; 42
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	80 83       	st	Z, r24
	UCSRC = (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0) | (1 << UCSRC_URSEL); // Set the data size and enable writing to UCSRC
     b56:	e0 e4       	ldi	r30, 0x40	; 64
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	86 e8       	ldi	r24, 0x86	; 134
     b5c:	80 83       	st	Z, r24
	UBRRL = 0x33;                                       // Define the baud rate
     b5e:	e9 e2       	ldi	r30, 0x29	; 41
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	83 e3       	ldi	r24, 0x33	; 51
     b64:	80 83       	st	Z, r24
}
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <uart_send>:

void uart_send(u8 ch)
{
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	0f 92       	push	r0
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	89 83       	std	Y+1, r24	; 0x01
	while(! (UCSRA & (1 << UCSRA_UDRE)));
     b78:	eb e2       	ldi	r30, 0x2B	; 43
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	80 72       	andi	r24, 0x20	; 32
     b84:	90 70       	andi	r25, 0x00	; 0
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	b9 f3       	breq	.-18     	; 0xb78 <uart_send+0xc>
	UDR = ch;
     b8a:	ec e2       	ldi	r30, 0x2C	; 44
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	80 83       	st	Z, r24
}
     b92:	0f 90       	pop	r0
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <uart_receive>:

u8 uart_receive(void) {
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
    while (!(UCSRA & (1 << UCSRA_RXC))); // Wait for data to be received
     ba2:	eb e2       	ldi	r30, 0x2B	; 43
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	88 23       	and	r24, r24
     baa:	dc f7       	brge	.-10     	; 0xba2 <uart_receive+0x8>
    return UDR;                    // Get and return received data from buffer
     bac:	ec e2       	ldi	r30, 0x2C	; 44
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
}
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <Timer0_voidInit>:
#include "Timer_private.h"

static void(*TIMER0_pvCallBackFunc)(void) = NULL;

void Timer0_voidInit(void)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
	/*Choose CTC mode*/
	CLR_BIT(TCCR0, TCCR0_WGM00);
     bc0:	a3 e5       	ldi	r26, 0x53	; 83
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e3 e5       	ldi	r30, 0x53	; 83
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 7b       	andi	r24, 0xBF	; 191
     bcc:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
     bce:	a3 e5       	ldi	r26, 0x53	; 83
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e3 e5       	ldi	r30, 0x53	; 83
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	88 60       	ori	r24, 0x08	; 8
     bda:	8c 93       	st	X, r24

	/*Output compare match interrupt enable*/
	SET_BIT(TIMSK, TIMSK_OCIE0);
     bdc:	a9 e5       	ldi	r26, 0x59	; 89
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e9 e5       	ldi	r30, 0x59	; 89
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	82 60       	ori	r24, 0x02	; 2
     be8:	8c 93       	st	X, r24

	/*Set compare match value to 250*/
	OCR0 = 250;
     bea:	ec e5       	ldi	r30, 0x5C	; 92
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	8a ef       	ldi	r24, 0xFA	; 250
     bf0:	80 83       	st	Z, r24

	/*Prescaler: Division by 8 (like enable timer)*/
	CLR_BIT(TCCR0, TCCR0_CS00);
     bf2:	a3 e5       	ldi	r26, 0x53	; 83
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e3 e5       	ldi	r30, 0x53	; 83
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	8e 7f       	andi	r24, 0xFE	; 254
     bfe:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
     c00:	a3 e5       	ldi	r26, 0x53	; 83
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e3 e5       	ldi	r30, 0x53	; 83
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	82 60       	ori	r24, 0x02	; 2
     c0c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
     c0e:	a3 e5       	ldi	r26, 0x53	; 83
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e3 e5       	ldi	r30, 0x53	; 83
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8b 7f       	andi	r24, 0xFB	; 251
     c1a:	8c 93       	st	X, r24
}
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <Timer0_u8SetCallBack>:


u8 Timer0_u8SetCallBack(void (*Copy_pvCallBackFunc) (void))
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <Timer0_u8SetCallBack+0x6>
     c28:	0f 92       	push	r0
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9b 83       	std	Y+3, r25	; 0x03
     c30:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvCallBackFunc != NULL)
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	9b 81       	ldd	r25, Y+3	; 0x03
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	39 f0       	breq	.+14     	; 0xc4c <Timer0_u8SetCallBack+0x2a>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	9b 81       	ldd	r25, Y+3	; 0x03
     c42:	90 93 cb 01 	sts	0x01CB, r25
     c46:	80 93 ca 01 	sts	0x01CA, r24
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <Timer0_u8SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
	if(*TIMER0_pvCallBackFunc != NULL)
     c88:	80 91 ca 01 	lds	r24, 0x01CA
     c8c:	90 91 cb 01 	lds	r25, 0x01CB
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	29 f0       	breq	.+10     	; 0xc9e <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
     c94:	e0 91 ca 01 	lds	r30, 0x01CA
     c98:	f0 91 cb 01 	lds	r31, 0x01CB
     c9c:	09 95       	icall
	}
}
     c9e:	cf 91       	pop	r28
     ca0:	df 91       	pop	r29
     ca2:	ff 91       	pop	r31
     ca4:	ef 91       	pop	r30
     ca6:	bf 91       	pop	r27
     ca8:	af 91       	pop	r26
     caa:	9f 91       	pop	r25
     cac:	8f 91       	pop	r24
     cae:	7f 91       	pop	r23
     cb0:	6f 91       	pop	r22
     cb2:	5f 91       	pop	r21
     cb4:	4f 91       	pop	r20
     cb6:	3f 91       	pop	r19
     cb8:	2f 91       	pop	r18
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <PWM_voidInit>:
#include "Timer_register.h"
#include "Timer_private.h"


void PWM_voidInit(void)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62

	/*Choose Fast PWM mode*/
	SET_BIT(TCCR0, TCCR0_WGM00);
     ccc:	a3 e5       	ldi	r26, 0x53	; 83
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e3 e5       	ldi	r30, 0x53	; 83
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	80 64       	ori	r24, 0x40	; 64
     cd8:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
     cda:	a3 e5       	ldi	r26, 0x53	; 83
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	88 60       	ori	r24, 0x08	; 8
     ce6:	8c 93       	st	X, r24

	/*Clear on compare match , set on top*/
	SET_BIT(TCCR0,5);
     ce8:	a3 e5       	ldi	r26, 0x53	; 83
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e3 e5       	ldi	r30, 0x53	; 83
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	80 62       	ori	r24, 0x20	; 32
     cf4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     cf6:	a3 e5       	ldi	r26, 0x53	; 83
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e3 e5       	ldi	r30, 0x53	; 83
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	8f 7e       	andi	r24, 0xEF	; 239
     d02:	8c 93       	st	X, r24

	/*Prescaler: Division by 64 (like enable timer)*/
	SET_BIT(TCCR0, TCCR0_CS00);
     d04:	a3 e5       	ldi	r26, 0x53	; 83
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e3 e5       	ldi	r30, 0x53	; 83
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	81 60       	ori	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
     d12:	a3 e5       	ldi	r26, 0x53	; 83
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e3 e5       	ldi	r30, 0x53	; 83
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	82 60       	ori	r24, 0x02	; 2
     d1e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
     d20:	a3 e5       	ldi	r26, 0x53	; 83
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e3 e5       	ldi	r30, 0x53	; 83
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8b 7f       	andi	r24, 0xFB	; 251
     d2c:	8c 93       	st	X, r24

}
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <PWM_voidSetCompMatchValue>:


void PWM_voidSetCompMatchValue(u8 Copy_u8Value)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	0f 92       	push	r0
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
     d40:	ec e5       	ldi	r30, 0x5C	; 92
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	80 83       	st	Z, r24
}
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <TWI_voidMasterInit>:
#include "TWI_private.h"
#include "TWI_interface.h"

/*pass 0 in the slaveaddress argument if master will not be addressed*/
void TWI_voidMasterInit(u8 Copy_u8S1aveAddress)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	89 83       	std	Y+1, r24	; 0x01
	/*Set Clock frequancy to 400kbps*/
	/*Set TWDR to 2*/
	TWDR = 2;
     d5c:	e3 e2       	ldi	r30, 0x23	; 35
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	80 83       	st	Z, r24


	/*Set Clock frequancy to 400kbps*/
	CLR_BIT(TWSR,TWSR_TWPS0);
     d64:	a1 e2       	ldi	r26, 0x21	; 33
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e1 e2       	ldi	r30, 0x21	; 33
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8e 7f       	andi	r24, 0xFE	; 254
     d70:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
     d72:	a1 e2       	ldi	r26, 0x21	; 33
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e1 e2       	ldi	r30, 0x21	; 33
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	8d 7f       	andi	r24, 0xFD	; 253
     d7e:	8c 93       	st	X, r24

	if(Copy_u8S1aveAddress !=0)
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	29 f0       	breq	.+10     	; 0xd90 <TWI_voidMasterInit+0x40>
	{
		TWAR = Copy_u8S1aveAddress<<1;
     d86:	e2 e2       	ldi	r30, 0x22	; 34
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	88 0f       	add	r24, r24
     d8e:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
     d90:	a6 e5       	ldi	r26, 0x56	; 86
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e6 e5       	ldi	r30, 0x56	; 86
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	84 60       	ori	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24

}
     d9e:	0f 90       	pop	r0
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 Copy_u8S1aveAddress)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	89 83       	std	Y+1, r24	; 0x01
	/*Initialize the node address*/
	TWAR = Copy_u8S1aveAddress<<1;
     db2:	e2 e2       	ldi	r30, 0x22	; 34
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	88 0f       	add	r24, r24
     dba:	80 83       	st	Z, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
     dbc:	a6 e5       	ldi	r26, 0x56	; 86
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e6 e5       	ldi	r30, 0x56	; 86
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	84 60       	ori	r24, 0x04	; 4
     dc8:	8c 93       	st	X, r24

}
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	0f 92       	push	r0
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_ErrStatus = NoError;
     ddc:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTA);
     dde:	a6 e5       	ldi	r26, 0x56	; 86
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e6 e5       	ldi	r30, 0x56	; 86
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	80 62       	ori	r24, 0x20	; 32
     dea:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     dec:	a6 e5       	ldi	r26, 0x56	; 86
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e6 e5       	ldi	r30, 0x56	; 86
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 68       	ori	r24, 0x80	; 128
     df8:	8c 93       	st	X, r24

	/*wait until the interrupt flag is raised again and the previous operation is complete*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
     dfa:	e6 e5       	ldi	r30, 0x56	; 86
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 23       	and	r24, r24
     e02:	dc f7       	brge	.-10     	; 0xdfa <TWI_SendStartCondition+0x28>

	/*Check the operation status in the status register */
	if((TWSR & 0xF8) != START_ACK)
     e04:	e1 e2       	ldi	r30, 0x21	; 33
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	88 7f       	andi	r24, 0xF8	; 248
     e10:	90 70       	andi	r25, 0x00	; 0
     e12:	88 30       	cpi	r24, 0x08	; 8
     e14:	91 05       	cpc	r25, r1
     e16:	11 f0       	breq	.+4      	; 0xe1c <TWI_SendStartCondition+0x4a>
	{
		Local_ErrStatus = StartConditionErr;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do Nothing*/
	}

	return Local_ErrStatus;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01


}
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	0f 92       	push	r0
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_ErrStatus = NoError;
     e30:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTA);
     e32:	a6 e5       	ldi	r26, 0x56	; 86
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e6 e5       	ldi	r30, 0x56	; 86
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 62       	ori	r24, 0x20	; 32
     e3e:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     e40:	a6 e5       	ldi	r26, 0x56	; 86
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e6 e5       	ldi	r30, 0x56	; 86
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 68       	ori	r24, 0x80	; 128
     e4c:	8c 93       	st	X, r24

	/*wait until the interrupt flag is raised again and the previous operation is complete*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
     e4e:	e6 e5       	ldi	r30, 0x56	; 86
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	88 23       	and	r24, r24
     e56:	dc f7       	brge	.-10     	; 0xe4e <TWI_SendRepeatedStart+0x28>

	/*Check the operation status in the status register */
	if((TWSR & 0xF8) != REP_START_ACK)
     e58:	e1 e2       	ldi	r30, 0x21	; 33
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	88 7f       	andi	r24, 0xF8	; 248
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	80 31       	cpi	r24, 0x10	; 16
     e68:	91 05       	cpc	r25, r1
     e6a:	11 f0       	breq	.+4      	; 0xe70 <TWI_SendRepeatedStart+0x4a>
	{
		Local_ErrStatus = RepatedStartErr;
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do Nothing*/
	}

	return Local_ErrStatus;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
}
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8S1aveAddress)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <TWI_SendSlaveAddressWithWrite+0x6>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrStatus = NoError;
     e86:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the start condition bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     e88:	a6 e5       	ldi	r26, 0x56	; 86
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e6 e5       	ldi	r30, 0x56	; 86
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 7d       	andi	r24, 0xDF	; 223
     e94:	8c 93       	st	X, r24

	/*Set the slave address in 7 MSB in the data register*/
	TWDR = Copy_u8S1aveAddress<<1;
     e96:	e3 e2       	ldi	r30, 0x23	; 35
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	88 0f       	add	r24, r24
     e9e:	80 83       	st	Z, r24

	CLR_BIT(TWDR,0); /*For write request*/
     ea0:	a3 e2       	ldi	r26, 0x23	; 35
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e3 e2       	ldi	r30, 0x23	; 35
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8e 7f       	andi	r24, 0xFE	; 254
     eac:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     eae:	a6 e5       	ldi	r26, 0x56	; 86
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e6 e5       	ldi	r30, 0x56	; 86
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 68       	ori	r24, 0x80	; 128
     eba:	8c 93       	st	X, r24

	/*wait until the interrupt flag is raised again and the previous operation is complete*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
     ebc:	e6 e5       	ldi	r30, 0x56	; 86
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	88 23       	and	r24, r24
     ec4:	dc f7       	brge	.-10     	; 0xebc <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check the operation status in the status register */
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK)
     ec6:	e1 e2       	ldi	r30, 0x21	; 33
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	88 7f       	andi	r24, 0xF8	; 248
     ed2:	90 70       	andi	r25, 0x00	; 0
     ed4:	88 31       	cpi	r24, 0x18	; 24
     ed6:	91 05       	cpc	r25, r1
     ed8:	11 f0       	breq	.+4      	; 0xede <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_ErrStatus = SlaveAddressWithWriteErr;
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do Nothing*/
	}

	return Local_ErrStatus;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8S1aveAddress)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <TWI_SendSlaveAddressWithRead+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrStatus = NoError;
     ef6:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the start condition bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     ef8:	a6 e5       	ldi	r26, 0x56	; 86
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e6 e5       	ldi	r30, 0x56	; 86
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8f 7d       	andi	r24, 0xDF	; 223
     f04:	8c 93       	st	X, r24

	/*Set the slave address in 7 MSB in the data register*/
	TWDR = Copy_u8S1aveAddress<<1;
     f06:	e3 e2       	ldi	r30, 0x23	; 35
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 0f       	add	r24, r24
     f0e:	80 83       	st	Z, r24

	SET_BIT(TWDR,0); /*For read request*/
     f10:	a3 e2       	ldi	r26, 0x23	; 35
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e3 e2       	ldi	r30, 0x23	; 35
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	81 60       	ori	r24, 0x01	; 1
     f1c:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     f1e:	a6 e5       	ldi	r26, 0x56	; 86
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e6 e5       	ldi	r30, 0x56	; 86
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 68       	ori	r24, 0x80	; 128
     f2a:	8c 93       	st	X, r24

	/*wait until the interrupt flag is raised again and the previous operation is complete*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
     f2c:	e6 e5       	ldi	r30, 0x56	; 86
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 23       	and	r24, r24
     f34:	dc f7       	brge	.-10     	; 0xf2c <TWI_SendSlaveAddressWithRead+0x42>

	/*Check the operation status in the status register */
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK)
     f36:	e1 e2       	ldi	r30, 0x21	; 33
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	88 7f       	andi	r24, 0xF8	; 248
     f42:	90 70       	andi	r25, 0x00	; 0
     f44:	80 34       	cpi	r24, 0x40	; 64
     f46:	91 05       	cpc	r25, r1
     f48:	11 f0       	breq	.+4      	; 0xf4e <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_ErrStatus = SlaveAddressWithReadErr;
     f4a:	84 e0       	ldi	r24, 0x04	; 4
     f4c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do Nothing*/
	}

	return Local_ErrStatus;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <TWI_MsterWriteDataByte>:

TWI_ErrStatus TWI_MsterWriteDataByte(u8 Copy_u8DataByte)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <TWI_MsterWriteDataByte+0x6>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrStatus = NoError;
     f66:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte*/
	TWDR = Copy_u8DataByte;
     f68:	e3 e2       	ldi	r30, 0x23	; 35
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     f70:	a6 e5       	ldi	r26, 0x56	; 86
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e6 e5       	ldi	r30, 0x56	; 86
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	80 68       	ori	r24, 0x80	; 128
     f7c:	8c 93       	st	X, r24

	/*wait until the interrupt flag is raised again and the previous operation is complete*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
     f7e:	e6 e5       	ldi	r30, 0x56	; 86
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	88 23       	and	r24, r24
     f86:	dc f7       	brge	.-10     	; 0xf7e <TWI_MsterWriteDataByte+0x24>

	/*Check the operation status in the status register */
	if((TWSR & 0xF8) != MSTR_WR_BYTE_ACK)
     f88:	e1 e2       	ldi	r30, 0x21	; 33
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	90 70       	andi	r25, 0x00	; 0
     f96:	88 32       	cpi	r24, 0x28	; 40
     f98:	91 05       	cpc	r25, r1
     f9a:	11 f0       	breq	.+4      	; 0xfa0 <TWI_MsterWriteDataByte+0x46>
	{
		Local_ErrStatus = MasterWriteByteErr;
     f9c:	85 e0       	ldi	r24, 0x05	; 5
     f9e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do Nothing*/
	}

	return Local_ErrStatus;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <TWI_MsterReadDataByte>:

TWI_ErrStatus TWI_MsterReadDataByte(u8 *Copy_u8DataByte)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <TWI_MsterReadDataByte+0x6>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	9b 83       	std	Y+3, r25	; 0x03
     fba:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrStatus Local_ErrStatus = NoError;
     fbc:	19 82       	std	Y+1, r1	; 0x01

	/*Enable master generating acknowledge bit after receiving the data*/
	SET_BIT(TWCR,TWCR_TWEA);
     fbe:	a6 e5       	ldi	r26, 0x56	; 86
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e6 e5       	ldi	r30, 0x56	; 86
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 64       	ori	r24, 0x40	; 64
     fca:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
     fcc:	a6 e5       	ldi	r26, 0x56	; 86
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e6 e5       	ldi	r30, 0x56	; 86
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 68       	ori	r24, 0x80	; 128
     fd8:	8c 93       	st	X, r24

	/*wait until the interrupt flag is raised again and the previous operation is complete*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0);
     fda:	e6 e5       	ldi	r30, 0x56	; 86
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	88 23       	and	r24, r24
     fe2:	dc f7       	brge	.-10     	; 0xfda <TWI_MsterReadDataByte+0x2e>

	/*Check the operation status in the status register */
	if((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK)
     fe4:	e1 e2       	ldi	r30, 0x21	; 33
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	88 7f       	andi	r24, 0xF8	; 248
     ff0:	90 70       	andi	r25, 0x00	; 0
     ff2:	80 35       	cpi	r24, 0x50	; 80
     ff4:	91 05       	cpc	r25, r1
     ff6:	19 f0       	breq	.+6      	; 0xffe <TWI_MsterReadDataByte+0x52>
	{
		Local_ErrStatus = MasterReadByteErr;
     ff8:	86 e0       	ldi	r24, 0x06	; 6
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	06 c0       	rjmp	.+12     	; 0x100a <TWI_MsterReadDataByte+0x5e>
	}
	else
	{
		/*Read the received data*/
		*Copy_u8DataByte = TWDR;
     ffe:	e3 e2       	ldi	r30, 0x23	; 35
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	ea 81       	ldd	r30, Y+2	; 0x02
    1006:	fb 81       	ldd	r31, Y+3	; 0x03
    1008:	80 83       	st	Z, r24
	}

	return Local_ErrStatus;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	/*Generate stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
    1020:	a6 e5       	ldi	r26, 0x56	; 86
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e6 e5       	ldi	r30, 0x56	; 86
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	80 61       	ori	r24, 0x10	; 16
    102c:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR, TWCR_TWINT);
    102e:	a6 e5       	ldi	r26, 0x56	; 86
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e6 e5       	ldi	r30, 0x56	; 86
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	8c 93       	st	X, r24

}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <SPI_voidInitMaster>:
#include "SPI_interface.h"
#include "SPI_register.h"
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"
void SPI_voidInitMaster(void)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
	/*Master initialization*/
	SET_BIT(SPCR,SPCR_MSTR);
    104a:	ad e2       	ldi	r26, 0x2D	; 45
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ed e2       	ldi	r30, 0x2D	; 45
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 61       	ori	r24, 0x10	; 16
    1056:	8c 93       	st	X, r24

	/*Clock prescaler : divid by 16*/
	SET_BIT(SPCR,SPCR_SPR0);
    1058:	ad e2       	ldi	r26, 0x2D	; 45
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ed e2       	ldi	r30, 0x2D	; 45
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    1066:	ad e2       	ldi	r26, 0x2D	; 45
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ed e2       	ldi	r30, 0x2D	; 45
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8d 7f       	andi	r24, 0xFD	; 253
    1072:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
    1074:	ae e2       	ldi	r26, 0x2E	; 46
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ee e2       	ldi	r30, 0x2E	; 46
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	8e 7f       	andi	r24, 0xFE	; 254
    1080:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    1082:	ad e2       	ldi	r26, 0x2D	; 45
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ed e2       	ldi	r30, 0x2D	; 45
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	8c 93       	st	X, r24
}
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <SPI_voidInitSlave>:

void SPI_voidInitSlave(void)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	/*Slave initialization*/
	CLR_BIT(SPCR,SPCR_MSTR);
    109e:	ad e2       	ldi	r26, 0x2D	; 45
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ed e2       	ldi	r30, 0x2D	; 45
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7e       	andi	r24, 0xEF	; 239
    10aa:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    10ac:	ad e2       	ldi	r26, 0x2D	; 45
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ed e2       	ldi	r30, 0x2D	; 45
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	80 64       	ori	r24, 0x40	; 64
    10b8:	8c 93       	st	X, r24

}
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <SPI_u8Transceive>:

u8 SPI_u8Transceive(u8 Copy_u8Data)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	89 83       	std	Y+1, r24	; 0x01
	/*Send the data*/
	SPDR = Copy_u8Data;
    10cc:	ef e2       	ldi	r30, 0x2F	; 47
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	80 83       	st	Z, r24

	/*Wait (busy waiting) until transfer complete*/
	while(GET_BIT(SPSR,SPSR_SPIF)==0);
    10d4:	ee e2       	ldi	r30, 0x2E	; 46
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	88 23       	and	r24, r24
    10dc:	dc f7       	brge	.-10     	; 0x10d4 <SPI_u8Transceive+0x14>

	/*Get the exchange data*/
	return SPDR;
    10de:	ef e2       	ldi	r30, 0x2F	; 47
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
}
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <DIO_set_port_dir>:

#include "DIO.h"
#include "DIO_Reg.h"
#include "../../LIB/BIT_MATH.h"

void DIO_set_port_dir(u8 Groupnumber, u8 value) {
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <DIO_set_port_dir+0x6>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <DIO_set_port_dir+0x8>
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	6a 83       	std	Y+2, r22	; 0x02
	switch (Groupnumber) {
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3c 83       	std	Y+4, r19	; 0x04
    1104:	2b 83       	std	Y+3, r18	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	91 05       	cpc	r25, r1
    110e:	d9 f0       	breq	.+54     	; 0x1146 <DIO_set_port_dir+0x5a>
    1110:	2b 81       	ldd	r18, Y+3	; 0x03
    1112:	3c 81       	ldd	r19, Y+4	; 0x04
    1114:	23 30       	cpi	r18, 0x03	; 3
    1116:	31 05       	cpc	r19, r1
    1118:	34 f4       	brge	.+12     	; 0x1126 <DIO_set_port_dir+0x3a>
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	61 f0       	breq	.+24     	; 0x113c <DIO_set_port_dir+0x50>
    1124:	1e c0       	rjmp	.+60     	; 0x1162 <DIO_set_port_dir+0x76>
    1126:	2b 81       	ldd	r18, Y+3	; 0x03
    1128:	3c 81       	ldd	r19, Y+4	; 0x04
    112a:	23 30       	cpi	r18, 0x03	; 3
    112c:	31 05       	cpc	r19, r1
    112e:	81 f0       	breq	.+32     	; 0x1150 <DIO_set_port_dir+0x64>
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	84 30       	cpi	r24, 0x04	; 4
    1136:	91 05       	cpc	r25, r1
    1138:	81 f0       	breq	.+32     	; 0x115a <DIO_set_port_dir+0x6e>
    113a:	13 c0       	rjmp	.+38     	; 0x1162 <DIO_set_port_dir+0x76>
	case GROUPA:
		DDRA_REG = value;
    113c:	ea e3       	ldi	r30, 0x3A	; 58
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	80 83       	st	Z, r24
    1144:	0e c0       	rjmp	.+28     	; 0x1162 <DIO_set_port_dir+0x76>
		break;
	case GROUPB:
		DDRB_REG = value;
    1146:	e7 e3       	ldi	r30, 0x37	; 55
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <DIO_set_port_dir+0x76>
		break;
	case GROUPC:
		DDRC_REG = value;
    1150:	e4 e3       	ldi	r30, 0x34	; 52
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	80 83       	st	Z, r24
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <DIO_set_port_dir+0x76>
		break;
	case GROUPD:
		DDRD_REG = value;
    115a:	e1 e3       	ldi	r30, 0x31	; 49
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	80 83       	st	Z, r24
		break;
	}
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <DIO_set_port>:

void DIO_set_port(u8 Groupnumber, u8 value) {
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <DIO_set_port+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DIO_set_port+0x8>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Groupnumber) {
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	3c 83       	std	Y+4, r19	; 0x04
    1188:	2b 83       	std	Y+3, r18	; 0x03
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	91 05       	cpc	r25, r1
    1192:	d9 f0       	breq	.+54     	; 0x11ca <DIO_set_port+0x5a>
    1194:	2b 81       	ldd	r18, Y+3	; 0x03
    1196:	3c 81       	ldd	r19, Y+4	; 0x04
    1198:	23 30       	cpi	r18, 0x03	; 3
    119a:	31 05       	cpc	r19, r1
    119c:	34 f4       	brge	.+12     	; 0x11aa <DIO_set_port+0x3a>
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 05       	cpc	r25, r1
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <DIO_set_port+0x50>
    11a8:	1e c0       	rjmp	.+60     	; 0x11e6 <DIO_set_port+0x76>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	23 30       	cpi	r18, 0x03	; 3
    11b0:	31 05       	cpc	r19, r1
    11b2:	81 f0       	breq	.+32     	; 0x11d4 <DIO_set_port+0x64>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	84 30       	cpi	r24, 0x04	; 4
    11ba:	91 05       	cpc	r25, r1
    11bc:	81 f0       	breq	.+32     	; 0x11de <DIO_set_port+0x6e>
    11be:	13 c0       	rjmp	.+38     	; 0x11e6 <DIO_set_port+0x76>
	case GROUPA:
		PORTA_REG = value;
    11c0:	eb e3       	ldi	r30, 0x3B	; 59
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	80 83       	st	Z, r24
    11c8:	0e c0       	rjmp	.+28     	; 0x11e6 <DIO_set_port+0x76>
		break;
	case GROUPB:
		PORTB_REG = value;
    11ca:	e8 e3       	ldi	r30, 0x38	; 56
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	80 83       	st	Z, r24
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <DIO_set_port+0x76>
		break;
	case GROUPC:
		PORTC_REG = value;
    11d4:	e5 e3       	ldi	r30, 0x35	; 53
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	80 83       	st	Z, r24
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <DIO_set_port+0x76>
		break;
	case GROUPD:
		PORTD_REG = value;
    11de:	e2 e3       	ldi	r30, 0x32	; 50
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
		break;
	}
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <DIO_get_port>:
u8 DIO_get_port(u8 Groupnumber) {
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <DIO_get_port+0x6>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <DIO_get_port+0x8>
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	8a 83       	std	Y+2, r24	; 0x02
	u8 status = 0;
    1202:	19 82       	std	Y+1, r1	; 0x01
	switch (Groupnumber) {
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3c 83       	std	Y+4, r19	; 0x04
    120c:	2b 83       	std	Y+3, r18	; 0x03
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	91 05       	cpc	r25, r1
    1216:	d9 f0       	breq	.+54     	; 0x124e <DIO_get_port+0x5a>
    1218:	2b 81       	ldd	r18, Y+3	; 0x03
    121a:	3c 81       	ldd	r19, Y+4	; 0x04
    121c:	23 30       	cpi	r18, 0x03	; 3
    121e:	31 05       	cpc	r19, r1
    1220:	34 f4       	brge	.+12     	; 0x122e <DIO_get_port+0x3a>
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	61 f0       	breq	.+24     	; 0x1244 <DIO_get_port+0x50>
    122c:	1e c0       	rjmp	.+60     	; 0x126a <DIO_get_port+0x76>
    122e:	2b 81       	ldd	r18, Y+3	; 0x03
    1230:	3c 81       	ldd	r19, Y+4	; 0x04
    1232:	23 30       	cpi	r18, 0x03	; 3
    1234:	31 05       	cpc	r19, r1
    1236:	81 f0       	breq	.+32     	; 0x1258 <DIO_get_port+0x64>
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	91 05       	cpc	r25, r1
    1240:	81 f0       	breq	.+32     	; 0x1262 <DIO_get_port+0x6e>
    1242:	13 c0       	rjmp	.+38     	; 0x126a <DIO_get_port+0x76>
	case GROUPA:
		status = PINA_REG;
    1244:	e9 e3       	ldi	r30, 0x39	; 57
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	0e c0       	rjmp	.+28     	; 0x126a <DIO_get_port+0x76>
		break;
	case GROUPB:
		status = PINB_REG;
    124e:	e6 e3       	ldi	r30, 0x36	; 54
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	09 c0       	rjmp	.+18     	; 0x126a <DIO_get_port+0x76>
		break;
	case GROUPC:
		status = PINC_REG;
    1258:	e3 e3       	ldi	r30, 0x33	; 51
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	04 c0       	rjmp	.+8      	; 0x126a <DIO_get_port+0x76>
		break;
	case GROUPD:
		status = PIND_REG;
    1262:	e0 e3       	ldi	r30, 0x30	; 48
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return status;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <DIO_set_pin_dir>:

void DIO_set_pin_dir(u8 Groupnumber, u8 pinNumber, u8 status) {
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	27 97       	sbiw	r28, 0x07	; 7
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	6a 83       	std	Y+2, r22	; 0x02
    1292:	4b 83       	std	Y+3, r20	; 0x03
	if (status == OUTPUT) {
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	09 f0       	breq	.+2      	; 0x129c <DIO_set_pin_dir+0x22>
    129a:	70 c0       	rjmp	.+224    	; 0x137c <DIO_set_pin_dir+0x102>
		switch (Groupnumber) {
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3f 83       	std	Y+7, r19	; 0x07
    12a4:	2e 83       	std	Y+6, r18	; 0x06
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	9f 81       	ldd	r25, Y+7	; 0x07
    12aa:	82 30       	cpi	r24, 0x02	; 2
    12ac:	91 05       	cpc	r25, r1
    12ae:	51 f1       	breq	.+84     	; 0x1304 <DIO_set_pin_dir+0x8a>
    12b0:	2e 81       	ldd	r18, Y+6	; 0x06
    12b2:	3f 81       	ldd	r19, Y+7	; 0x07
    12b4:	23 30       	cpi	r18, 0x03	; 3
    12b6:	31 05       	cpc	r19, r1
    12b8:	34 f4       	brge	.+12     	; 0x12c6 <DIO_set_pin_dir+0x4c>
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	9f 81       	ldd	r25, Y+7	; 0x07
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	91 05       	cpc	r25, r1
    12c2:	61 f0       	breq	.+24     	; 0x12dc <DIO_set_pin_dir+0x62>
    12c4:	d3 c0       	rjmp	.+422    	; 0x146c <DIO_set_pin_dir+0x1f2>
    12c6:	2e 81       	ldd	r18, Y+6	; 0x06
    12c8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ca:	23 30       	cpi	r18, 0x03	; 3
    12cc:	31 05       	cpc	r19, r1
    12ce:	71 f1       	breq	.+92     	; 0x132c <DIO_set_pin_dir+0xb2>
    12d0:	8e 81       	ldd	r24, Y+6	; 0x06
    12d2:	9f 81       	ldd	r25, Y+7	; 0x07
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	91 05       	cpc	r25, r1
    12d8:	e9 f1       	breq	.+122    	; 0x1354 <DIO_set_pin_dir+0xda>
    12da:	c8 c0       	rjmp	.+400    	; 0x146c <DIO_set_pin_dir+0x1f2>
		case GROUPA:
			SET_BIT(DDRA_REG, pinNumber);
    12dc:	aa e3       	ldi	r26, 0x3A	; 58
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ea e3       	ldi	r30, 0x3A	; 58
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_set_pin_dir+0x80>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_set_pin_dir+0x7c>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	b4 c0       	rjmp	.+360    	; 0x146c <DIO_set_pin_dir+0x1f2>
			break;
		case GROUPB:
			SET_BIT(DDRB_REG, pinNumber);
    1304:	a7 e3       	ldi	r26, 0x37	; 55
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e7 e3       	ldi	r30, 0x37	; 55
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_set_pin_dir+0xa8>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_set_pin_dir+0xa4>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	a0 c0       	rjmp	.+320    	; 0x146c <DIO_set_pin_dir+0x1f2>
			break;
		case GROUPC:
			SET_BIT(DDRC_REG, pinNumber);
    132c:	a4 e3       	ldi	r26, 0x34	; 52
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e4 e3       	ldi	r30, 0x34	; 52
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_set_pin_dir+0xd0>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_set_pin_dir+0xcc>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	8c c0       	rjmp	.+280    	; 0x146c <DIO_set_pin_dir+0x1f2>
			break;
		case GROUPD:
			SET_BIT(DDRD_REG, pinNumber);
    1354:	a1 e3       	ldi	r26, 0x31	; 49
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e1 e3       	ldi	r30, 0x31	; 49
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_set_pin_dir+0xf8>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_set_pin_dir+0xf4>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	78 c0       	rjmp	.+240    	; 0x146c <DIO_set_pin_dir+0x1f2>
			break;
		}
	} else if (status == INPUT) {
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 23       	and	r24, r24
    1380:	09 f0       	breq	.+2      	; 0x1384 <DIO_set_pin_dir+0x10a>
    1382:	74 c0       	rjmp	.+232    	; 0x146c <DIO_set_pin_dir+0x1f2>
		switch (Groupnumber) {
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	3d 83       	std	Y+5, r19	; 0x05
    138c:	2c 83       	std	Y+4, r18	; 0x04
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	91 05       	cpc	r25, r1
    1396:	61 f1       	breq	.+88     	; 0x13f0 <DIO_set_pin_dir+0x176>
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	23 30       	cpi	r18, 0x03	; 3
    139e:	31 05       	cpc	r19, r1
    13a0:	34 f4       	brge	.+12     	; 0x13ae <DIO_set_pin_dir+0x134>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	69 f0       	breq	.+26     	; 0x13c6 <DIO_set_pin_dir+0x14c>
    13ac:	5f c0       	rjmp	.+190    	; 0x146c <DIO_set_pin_dir+0x1f2>
    13ae:	2c 81       	ldd	r18, Y+4	; 0x04
    13b0:	3d 81       	ldd	r19, Y+5	; 0x05
    13b2:	23 30       	cpi	r18, 0x03	; 3
    13b4:	31 05       	cpc	r19, r1
    13b6:	89 f1       	breq	.+98     	; 0x141a <DIO_set_pin_dir+0x1a0>
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <DIO_set_pin_dir+0x14a>
    13c2:	40 c0       	rjmp	.+128    	; 0x1444 <DIO_set_pin_dir+0x1ca>
    13c4:	53 c0       	rjmp	.+166    	; 0x146c <DIO_set_pin_dir+0x1f2>
		case GROUPA:
			CLR_BIT(DDRA_REG, pinNumber);
    13c6:	aa e3       	ldi	r26, 0x3A	; 58
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ea e3       	ldi	r30, 0x3A	; 58
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_set_pin_dir+0x16a>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_set_pin_dir+0x166>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	3e c0       	rjmp	.+124    	; 0x146c <DIO_set_pin_dir+0x1f2>
			break;
		case GROUPB:
			CLR_BIT(DDRB_REG, pinNumber);
    13f0:	a7 e3       	ldi	r26, 0x37	; 55
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e7 e3       	ldi	r30, 0x37	; 55
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_set_pin_dir+0x194>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_set_pin_dir+0x190>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	29 c0       	rjmp	.+82     	; 0x146c <DIO_set_pin_dir+0x1f2>
			break;
		case GROUPC:
			CLR_BIT(DDRC_REG, pinNumber);
    141a:	a4 e3       	ldi	r26, 0x34	; 52
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e4 e3       	ldi	r30, 0x34	; 52
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_set_pin_dir+0x1be>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_set_pin_dir+0x1ba>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	14 c0       	rjmp	.+40     	; 0x146c <DIO_set_pin_dir+0x1f2>
			break;
		case GROUPD:
			CLR_BIT(DDRD_REG, pinNumber);
    1444:	a1 e3       	ldi	r26, 0x31	; 49
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e1 e3       	ldi	r30, 0x31	; 49
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_set_pin_dir+0x1e8>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_set_pin_dir+0x1e4>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
			break;
		}
	}
}
    146c:	27 96       	adiw	r28, 0x07	; 7
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <DIO_set_pin>:
void DIO_set_pin(u8 Groupnumber, u8 pinNumber, u8 Out_status) {
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	27 97       	sbiw	r28, 0x07	; 7
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	6a 83       	std	Y+2, r22	; 0x02
    1496:	4b 83       	std	Y+3, r20	; 0x03
	if (Out_status == HIGH) {
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	09 f0       	breq	.+2      	; 0x14a0 <DIO_set_pin+0x22>
    149e:	70 c0       	rjmp	.+224    	; 0x1580 <DIO_set_pin+0x102>
		switch (Groupnumber) {
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	3f 83       	std	Y+7, r19	; 0x07
    14a8:	2e 83       	std	Y+6, r18	; 0x06
    14aa:	8e 81       	ldd	r24, Y+6	; 0x06
    14ac:	9f 81       	ldd	r25, Y+7	; 0x07
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	91 05       	cpc	r25, r1
    14b2:	51 f1       	breq	.+84     	; 0x1508 <DIO_set_pin+0x8a>
    14b4:	2e 81       	ldd	r18, Y+6	; 0x06
    14b6:	3f 81       	ldd	r19, Y+7	; 0x07
    14b8:	23 30       	cpi	r18, 0x03	; 3
    14ba:	31 05       	cpc	r19, r1
    14bc:	34 f4       	brge	.+12     	; 0x14ca <DIO_set_pin+0x4c>
    14be:	8e 81       	ldd	r24, Y+6	; 0x06
    14c0:	9f 81       	ldd	r25, Y+7	; 0x07
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <DIO_set_pin+0x62>
    14c8:	d3 c0       	rjmp	.+422    	; 0x1670 <DIO_set_pin+0x1f2>
    14ca:	2e 81       	ldd	r18, Y+6	; 0x06
    14cc:	3f 81       	ldd	r19, Y+7	; 0x07
    14ce:	23 30       	cpi	r18, 0x03	; 3
    14d0:	31 05       	cpc	r19, r1
    14d2:	71 f1       	breq	.+92     	; 0x1530 <DIO_set_pin+0xb2>
    14d4:	8e 81       	ldd	r24, Y+6	; 0x06
    14d6:	9f 81       	ldd	r25, Y+7	; 0x07
    14d8:	84 30       	cpi	r24, 0x04	; 4
    14da:	91 05       	cpc	r25, r1
    14dc:	e9 f1       	breq	.+122    	; 0x1558 <DIO_set_pin+0xda>
    14de:	c8 c0       	rjmp	.+400    	; 0x1670 <DIO_set_pin+0x1f2>
		case GROUPA:
			SET_BIT(PORTA_REG, pinNumber);
    14e0:	ab e3       	ldi	r26, 0x3B	; 59
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	eb e3       	ldi	r30, 0x3B	; 59
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_set_pin+0x80>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_set_pin+0x7c>
    1502:	84 2b       	or	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	b4 c0       	rjmp	.+360    	; 0x1670 <DIO_set_pin+0x1f2>
			break;
		case GROUPB:
			SET_BIT(PORTB_REG, pinNumber);
    1508:	a8 e3       	ldi	r26, 0x38	; 56
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e8 e3       	ldi	r30, 0x38	; 56
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_set_pin+0xa8>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_set_pin+0xa4>
    152a:	84 2b       	or	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	a0 c0       	rjmp	.+320    	; 0x1670 <DIO_set_pin+0x1f2>
			break;
		case GROUPC:
			SET_BIT(PORTC_REG, pinNumber);
    1530:	a5 e3       	ldi	r26, 0x35	; 53
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e3       	ldi	r30, 0x35	; 53
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_set_pin+0xd0>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_set_pin+0xcc>
    1552:	84 2b       	or	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	8c c0       	rjmp	.+280    	; 0x1670 <DIO_set_pin+0x1f2>
			break;
		case GROUPD:
			SET_BIT(PORTD_REG, pinNumber);
    1558:	a2 e3       	ldi	r26, 0x32	; 50
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e2 e3       	ldi	r30, 0x32	; 50
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_set_pin+0xf8>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_set_pin+0xf4>
    157a:	84 2b       	or	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	78 c0       	rjmp	.+240    	; 0x1670 <DIO_set_pin+0x1f2>
			break;
		}
	} else if (Out_status == LOW) {
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	88 23       	and	r24, r24
    1584:	09 f0       	breq	.+2      	; 0x1588 <DIO_set_pin+0x10a>
    1586:	74 c0       	rjmp	.+232    	; 0x1670 <DIO_set_pin+0x1f2>
		switch (Groupnumber) {
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	3d 83       	std	Y+5, r19	; 0x05
    1590:	2c 83       	std	Y+4, r18	; 0x04
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	9d 81       	ldd	r25, Y+5	; 0x05
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	91 05       	cpc	r25, r1
    159a:	61 f1       	breq	.+88     	; 0x15f4 <DIO_set_pin+0x176>
    159c:	2c 81       	ldd	r18, Y+4	; 0x04
    159e:	3d 81       	ldd	r19, Y+5	; 0x05
    15a0:	23 30       	cpi	r18, 0x03	; 3
    15a2:	31 05       	cpc	r19, r1
    15a4:	34 f4       	brge	.+12     	; 0x15b2 <DIO_set_pin+0x134>
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
    15a8:	9d 81       	ldd	r25, Y+5	; 0x05
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	91 05       	cpc	r25, r1
    15ae:	69 f0       	breq	.+26     	; 0x15ca <DIO_set_pin+0x14c>
    15b0:	5f c0       	rjmp	.+190    	; 0x1670 <DIO_set_pin+0x1f2>
    15b2:	2c 81       	ldd	r18, Y+4	; 0x04
    15b4:	3d 81       	ldd	r19, Y+5	; 0x05
    15b6:	23 30       	cpi	r18, 0x03	; 3
    15b8:	31 05       	cpc	r19, r1
    15ba:	89 f1       	breq	.+98     	; 0x161e <DIO_set_pin+0x1a0>
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	91 05       	cpc	r25, r1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <DIO_set_pin+0x14a>
    15c6:	40 c0       	rjmp	.+128    	; 0x1648 <DIO_set_pin+0x1ca>
    15c8:	53 c0       	rjmp	.+166    	; 0x1670 <DIO_set_pin+0x1f2>
		case GROUPA:
			CLR_BIT(PORTA_REG, pinNumber);
    15ca:	ab e3       	ldi	r26, 0x3B	; 59
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb e3       	ldi	r30, 0x3B	; 59
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_set_pin+0x16a>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_set_pin+0x166>
    15ec:	80 95       	com	r24
    15ee:	84 23       	and	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	3e c0       	rjmp	.+124    	; 0x1670 <DIO_set_pin+0x1f2>
			break;
		case GROUPB:
			CLR_BIT(PORTB_REG, pinNumber);
    15f4:	a8 e3       	ldi	r26, 0x38	; 56
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e8 e3       	ldi	r30, 0x38	; 56
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_set_pin+0x194>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_set_pin+0x190>
    1616:	80 95       	com	r24
    1618:	84 23       	and	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	29 c0       	rjmp	.+82     	; 0x1670 <DIO_set_pin+0x1f2>
			break;
		case GROUPC:
			CLR_BIT(PORTC_REG, pinNumber);
    161e:	a5 e3       	ldi	r26, 0x35	; 53
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e3       	ldi	r30, 0x35	; 53
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_set_pin+0x1be>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_set_pin+0x1ba>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <DIO_set_pin+0x1f2>
			break;
		case GROUPD:
			CLR_BIT(PORTD_REG, pinNumber);
    1648:	a2 e3       	ldi	r26, 0x32	; 50
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e2 e3       	ldi	r30, 0x32	; 50
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_set_pin+0x1e8>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_set_pin+0x1e4>
    166a:	80 95       	com	r24
    166c:	84 23       	and	r24, r20
    166e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1670:	27 96       	adiw	r28, 0x07	; 7
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <DIO_get_pin>:
u8 DIO_get_pin(u8 Groupnumber, u8 pinNumber) {
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	00 d0       	rcall	.+0      	; 0x1688 <DIO_get_pin+0x6>
    1688:	00 d0       	rcall	.+0      	; 0x168a <DIO_get_pin+0x8>
    168a:	0f 92       	push	r0
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	8a 83       	std	Y+2, r24	; 0x02
    1692:	6b 83       	std	Y+3, r22	; 0x03
	u8 status = 0;
    1694:	19 82       	std	Y+1, r1	; 0x01
	switch (Groupnumber) {
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	3d 83       	std	Y+5, r19	; 0x05
    169e:	2c 83       	std	Y+4, r18	; 0x04
    16a0:	4c 81       	ldd	r20, Y+4	; 0x04
    16a2:	5d 81       	ldd	r21, Y+5	; 0x05
    16a4:	42 30       	cpi	r20, 0x02	; 2
    16a6:	51 05       	cpc	r21, r1
    16a8:	41 f1       	breq	.+80     	; 0x16fa <DIO_get_pin+0x78>
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	34 f4       	brge	.+12     	; 0x16c0 <DIO_get_pin+0x3e>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	21 30       	cpi	r18, 0x01	; 1
    16ba:	31 05       	cpc	r19, r1
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <DIO_get_pin+0x54>
    16be:	52 c0       	rjmp	.+164    	; 0x1764 <DIO_get_pin+0xe2>
    16c0:	4c 81       	ldd	r20, Y+4	; 0x04
    16c2:	5d 81       	ldd	r21, Y+5	; 0x05
    16c4:	43 30       	cpi	r20, 0x03	; 3
    16c6:	51 05       	cpc	r21, r1
    16c8:	51 f1       	breq	.+84     	; 0x171e <DIO_get_pin+0x9c>
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	9d 81       	ldd	r25, Y+5	; 0x05
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	91 05       	cpc	r25, r1
    16d2:	b9 f1       	breq	.+110    	; 0x1742 <DIO_get_pin+0xc0>
    16d4:	47 c0       	rjmp	.+142    	; 0x1764 <DIO_get_pin+0xe2>
	case GROUPA:
		status = GET_BIT(PINA_REG, pinNumber);
    16d6:	e9 e3       	ldi	r30, 0x39	; 57
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a9 01       	movw	r20, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <DIO_get_pin+0x6c>
    16ea:	55 95       	asr	r21
    16ec:	47 95       	ror	r20
    16ee:	8a 95       	dec	r24
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <DIO_get_pin+0x68>
    16f2:	ca 01       	movw	r24, r20
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	35 c0       	rjmp	.+106    	; 0x1764 <DIO_get_pin+0xe2>
		break;
	case GROUPB:
		status = GET_BIT(PINB_REG, pinNumber);
    16fa:	e6 e3       	ldi	r30, 0x36	; 54
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a9 01       	movw	r20, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_get_pin+0x90>
    170e:	55 95       	asr	r21
    1710:	47 95       	ror	r20
    1712:	8a 95       	dec	r24
    1714:	e2 f7       	brpl	.-8      	; 0x170e <DIO_get_pin+0x8c>
    1716:	ca 01       	movw	r24, r20
    1718:	81 70       	andi	r24, 0x01	; 1
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	23 c0       	rjmp	.+70     	; 0x1764 <DIO_get_pin+0xe2>
		break;
	case GROUPC:
		status = GET_BIT(PINC_REG, pinNumber);
    171e:	e3 e3       	ldi	r30, 0x33	; 51
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a9 01       	movw	r20, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_get_pin+0xb4>
    1732:	55 95       	asr	r21
    1734:	47 95       	ror	r20
    1736:	8a 95       	dec	r24
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_get_pin+0xb0>
    173a:	ca 01       	movw	r24, r20
    173c:	81 70       	andi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	11 c0       	rjmp	.+34     	; 0x1764 <DIO_get_pin+0xe2>
		break;
	case GROUPD:
		status = GET_BIT(PIND_REG, pinNumber);
    1742:	e0 e3       	ldi	r30, 0x30	; 48
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a9 01       	movw	r20, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_get_pin+0xd8>
    1756:	55 95       	asr	r21
    1758:	47 95       	ror	r20
    175a:	8a 95       	dec	r24
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_get_pin+0xd4>
    175e:	ca 01       	movw	r24, r20
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return status;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <ADC_init>:
 */

#include "ADC.h"
#include "ADC_REG.h"
#include "../../LIB/BIT_MATH.h"
void ADC_init() {
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	//set external reference
	SET_BIT(ADMUX_REG, ADMUX_REFS0);
    177e:	a7 e2       	ldi	r26, 0x27	; 39
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e7 e2       	ldi	r30, 0x27	; 39
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 64       	ori	r24, 0x40	; 64
    178a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG, ADMUX_REFS1);
    178c:	a7 e2       	ldi	r26, 0x27	; 39
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e7 e2       	ldi	r30, 0x27	; 39
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8f 77       	andi	r24, 0x7F	; 127
    1798:	8c 93       	st	X, r24

	//Activate left adjust result
	SET_BIT(ADCSRA_REG, ADMUX_ADLAR);
    179a:	a6 e2       	ldi	r26, 0x26	; 38
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e6 e2       	ldi	r30, 0x26	; 38
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	80 62       	ori	r24, 0x20	; 32
    17a6:	8c 93       	st	X, r24


	//Set prescaler to divide by 128
	SET_BIT(ADCSRA_REG, ADCSRA_ADPS2);
    17a8:	a6 e2       	ldi	r26, 0x26	; 38
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e6 e2       	ldi	r30, 0x26	; 38
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	84 60       	ori	r24, 0x04	; 4
    17b4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADCSRA_ADPS1);
    17b6:	a6 e2       	ldi	r26, 0x26	; 38
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e6 e2       	ldi	r30, 0x26	; 38
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	82 60       	ori	r24, 0x02	; 2
    17c2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADCSRA_ADPS0);
    17c4:	a6 e2       	ldi	r26, 0x26	; 38
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e6 e2       	ldi	r30, 0x26	; 38
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	81 60       	ori	r24, 0x01	; 1
    17d0:	8c 93       	st	X, r24

	//ENABLE preipheral
	SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    17d2:	a6 e2       	ldi	r26, 0x26	; 38
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e6 e2       	ldi	r30, 0x26	; 38
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	80 68       	ori	r24, 0x80	; 128
    17de:	8c 93       	st	X, r24

}
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <ADC_Read_channal>:

u16 ADC_Read_channal(u8 channel) {
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	0f 92       	push	r0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	89 83       	std	Y+1, r24	; 0x01

	//Clear first 5 bits in ADMUX_REG
	ADMUX_REG &= 0xE0;
    17f2:	a7 e2       	ldi	r26, 0x27	; 39
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e7 e2       	ldi	r30, 0x27	; 39
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	80 7e       	andi	r24, 0xE0	; 224
    17fe:	8c 93       	st	X, r24

	//Set the desired channel
	ADMUX_REG |= channel;
    1800:	a7 e2       	ldi	r26, 0x27	; 39
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e7 e2       	ldi	r30, 0x27	; 39
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	90 81       	ld	r25, Z
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	89 2b       	or	r24, r25
    180e:	8c 93       	st	X, r24

	//Start conversion
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    1810:	a6 e2       	ldi	r26, 0x26	; 38
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e6 e2       	ldi	r30, 0x26	; 38
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 64       	ori	r24, 0x40	; 64
    181c:	8c 93       	st	X, r24

	//Polling to the interrupt flag;
	while(GET_BIT(ADCSRA_REG,ADCSRA_ADIF) == 0);
    181e:	e6 e2       	ldi	r30, 0x26	; 38
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	82 95       	swap	r24
    1826:	8f 70       	andi	r24, 0x0F	; 15
    1828:	88 2f       	mov	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	81 70       	andi	r24, 0x01	; 1
    182e:	90 70       	andi	r25, 0x00	; 0
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	a9 f3       	breq	.-22     	; 0x181e <ADC_Read_channal+0x38>

	//Clear flag (set to 1)
	SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    1834:	a6 e2       	ldi	r26, 0x26	; 38
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e6 e2       	ldi	r30, 0x26	; 38
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 61       	ori	r24, 0x10	; 16
    1840:	8c 93       	st	X, r24

	return ADC_REG;
    1842:	e4 e2       	ldi	r30, 0x24	; 36
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
}
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <LCD_init>:
int seen[8]={0,0x15,0x15,0x1f,0,0,0,0};
int faa[8]={0x04,0x0e,0x0a,0x0f,0x12,0x1e,0,0};
int plane[8]={0x10,0x18,0x1c,0x1f,0x1c,0x18,0x10,0};
int heart[8]={0,0x1b,0x1f,0x1f,0x0e,0x04,0,0};

void LCD_init() {
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	c4 55       	subi	r28, 0x54	; 84
    1860:	d0 40       	sbci	r29, 0x00	; 0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
	DIO_set_port_dir(LCD_GROUP_DATA,0xff);
    186c:	84 e0       	ldi	r24, 0x04	; 4
    186e:	6f ef       	ldi	r22, 0xFF	; 255
    1870:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_set_port_dir>
	DIO_set_pin_dir(LCD_GROUP_CONTROL, RS_PIN, OUTPUT);
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	67 e0       	ldi	r22, 0x07	; 7
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
	DIO_set_pin_dir(LCD_GROUP_CONTROL, E_PIN, OUTPUT);
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	66 e0       	ldi	r22, 0x06	; 6
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
    1888:	fe 01       	movw	r30, r28
    188a:	ef 5a       	subi	r30, 0xAF	; 175
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 ef       	ldi	r26, 0xF0	; 240
    1894:	b1 e4       	ldi	r27, 0x41	; 65
    1896:	80 83       	st	Z, r24
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	a2 83       	std	Z+2, r26	; 0x02
    189c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	8e 01       	movw	r16, r28
    18a0:	03 5b       	subi	r16, 0xB3	; 179
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	fe 01       	movw	r30, r28
    18a6:	ef 5a       	subi	r30, 0xAF	; 175
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a ef       	ldi	r20, 0xFA	; 250
    18b8:	54 e4       	ldi	r21, 0x44	; 68
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	f8 01       	movw	r30, r16
    18c4:	80 83       	st	Z, r24
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	a2 83       	std	Z+2, r26	; 0x02
    18ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18cc:	fe 01       	movw	r30, r28
    18ce:	e3 5b       	subi	r30, 0xB3	; 179
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	44 f4       	brge	.+16     	; 0x18fa <LCD_init+0xa8>
		__ticks = 1;
    18ea:	fe 01       	movw	r30, r28
    18ec:	e5 5b       	subi	r30, 0xB5	; 181
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	64 c0       	rjmp	.+200    	; 0x19c2 <LCD_init+0x170>
	else if (__tmp > 65535)
    18fa:	fe 01       	movw	r30, r28
    18fc:	e3 5b       	subi	r30, 0xB3	; 179
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	0c f0       	brlt	.+2      	; 0x191a <LCD_init+0xc8>
    1918:	43 c0       	rjmp	.+134    	; 0x19a0 <LCD_init+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191a:	fe 01       	movw	r30, r28
    191c:	ef 5a       	subi	r30, 0xAF	; 175
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	8e 01       	movw	r16, r28
    193a:	05 5b       	subi	r16, 0xB5	; 181
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	f8 01       	movw	r30, r16
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
    1950:	1f c0       	rjmp	.+62     	; 0x1990 <LCD_init+0x13e>
    1952:	fe 01       	movw	r30, r28
    1954:	e7 5b       	subi	r30, 0xB7	; 183
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	88 ec       	ldi	r24, 0xC8	; 200
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1960:	fe 01       	movw	r30, r28
    1962:	e7 5b       	subi	r30, 0xB7	; 183
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_init+0x118>
    196e:	fe 01       	movw	r30, r28
    1970:	e7 5b       	subi	r30, 0xB7	; 183
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	de 01       	movw	r26, r28
    197a:	a5 5b       	subi	r26, 0xB5	; 181
    197c:	bf 4f       	sbci	r27, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e5 5b       	subi	r30, 0xB5	; 181
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	11 96       	adiw	r26, 0x01	; 1
    198c:	9c 93       	st	X, r25
    198e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	fe 01       	movw	r30, r28
    1992:	e5 5b       	subi	r30, 0xB5	; 181
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	d1 f6       	brne	.-76     	; 0x1952 <LCD_init+0x100>
    199e:	27 c0       	rjmp	.+78     	; 0x19ee <LCD_init+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a0:	8e 01       	movw	r16, r28
    19a2:	05 5b       	subi	r16, 0xB5	; 181
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	fe 01       	movw	r30, r28
    19a8:	e3 5b       	subi	r30, 0xB3	; 179
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	f8 01       	movw	r30, r16
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	de 01       	movw	r26, r28
    19c4:	a9 5b       	subi	r26, 0xB9	; 185
    19c6:	bf 4f       	sbci	r27, 0xFF	; 255
    19c8:	fe 01       	movw	r30, r28
    19ca:	e5 5b       	subi	r30, 0xB5	; 181
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	8d 93       	st	X+, r24
    19d4:	9c 93       	st	X, r25
    19d6:	fe 01       	movw	r30, r28
    19d8:	e9 5b       	subi	r30, 0xB9	; 185
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_init+0x18e>
    19e4:	fe 01       	movw	r30, r28
    19e6:	e9 5b       	subi	r30, 0xB9	; 185
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	91 83       	std	Z+1, r25	; 0x01
    19ec:	80 83       	st	Z, r24
	_delay_ms(30);
	LCD_send_command(LCD_HOME);
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
    19f4:	fe 01       	movw	r30, r28
    19f6:	ed 5b       	subi	r30, 0xBD	; 189
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e7       	ldi	r26, 0x70	; 112
    1a00:	b1 e4       	ldi	r27, 0x41	; 65
    1a02:	80 83       	st	Z, r24
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	a2 83       	std	Z+2, r26	; 0x02
    1a08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	8e 01       	movw	r16, r28
    1a0c:	01 5c       	subi	r16, 0xC1	; 193
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	fe 01       	movw	r30, r28
    1a12:	ed 5b       	subi	r30, 0xBD	; 189
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	4a ef       	ldi	r20, 0xFA	; 250
    1a24:	54 e4       	ldi	r21, 0x44	; 68
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	f8 01       	movw	r30, r16
    1a30:	80 83       	st	Z, r24
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	a2 83       	std	Z+2, r26	; 0x02
    1a36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a38:	fe 01       	movw	r30, r28
    1a3a:	ff 96       	adiw	r30, 0x3f	; 63
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <LCD_init+0x20c>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9e af       	std	Y+62, r25	; 0x3e
    1a5a:	8d af       	std	Y+61, r24	; 0x3d
    1a5c:	46 c0       	rjmp	.+140    	; 0x1aea <LCD_init+0x298>
	else if (__tmp > 65535)
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ff 96       	adiw	r30, 0x3f	; 63
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	64 f5       	brge	.+88     	; 0x1ad2 <LCD_init+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	ed 5b       	subi	r30, 0xBD	; 189
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e af       	std	Y+62, r25	; 0x3e
    1aa6:	8d af       	std	Y+61, r24	; 0x3d
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <LCD_init+0x276>
    1aaa:	88 ec       	ldi	r24, 0xC8	; 200
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9c af       	std	Y+60, r25	; 0x3c
    1ab0:	8b af       	std	Y+59, r24	; 0x3b
    1ab2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ab4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_init+0x264>
    1aba:	9c af       	std	Y+60, r25	; 0x3c
    1abc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ac0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	9e af       	std	Y+62, r25	; 0x3e
    1ac6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <LCD_init+0x258>
    1ad0:	16 c0       	rjmp	.+44     	; 0x1afe <LCD_init+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	ff 96       	adiw	r30, 0x3f	; 63
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9e af       	std	Y+62, r25	; 0x3e
    1ae8:	8d af       	std	Y+61, r24	; 0x3d
    1aea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aee:	9a af       	std	Y+58, r25	; 0x3a
    1af0:	89 af       	std	Y+57, r24	; 0x39
    1af2:	89 ad       	ldd	r24, Y+57	; 0x39
    1af4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_init+0x2a4>
    1afa:	9a af       	std	Y+58, r25	; 0x3a
    1afc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);
	LCD_send_command(LCD_SET8BITFUNCTION);
    1afe:	88 e3       	ldi	r24, 0x38	; 56
    1b00:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a0 e8       	ldi	r26, 0x80	; 128
    1b0a:	bf e3       	ldi	r27, 0x3F	; 63
    1b0c:	8d ab       	std	Y+53, r24	; 0x35
    1b0e:	9e ab       	std	Y+54, r25	; 0x36
    1b10:	af ab       	std	Y+55, r26	; 0x37
    1b12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b14:	6d a9       	ldd	r22, Y+53	; 0x35
    1b16:	7e a9       	ldd	r23, Y+54	; 0x36
    1b18:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a ef       	ldi	r20, 0xFA	; 250
    1b22:	54 e4       	ldi	r21, 0x44	; 68
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	89 ab       	std	Y+49, r24	; 0x31
    1b2e:	9a ab       	std	Y+50, r25	; 0x32
    1b30:	ab ab       	std	Y+51, r26	; 0x33
    1b32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b34:	69 a9       	ldd	r22, Y+49	; 0x31
    1b36:	7a a9       	ldd	r23, Y+50	; 0x32
    1b38:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <LCD_init+0x304>
		__ticks = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	98 ab       	std	Y+48, r25	; 0x30
    1b52:	8f a7       	std	Y+47, r24	; 0x2f
    1b54:	3f c0       	rjmp	.+126    	; 0x1bd4 <LCD_init+0x382>
	else if (__tmp > 65535)
    1b56:	69 a9       	ldd	r22, Y+49	; 0x31
    1b58:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	3f ef       	ldi	r19, 0xFF	; 255
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	57 e4       	ldi	r21, 0x47	; 71
    1b66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6a:	18 16       	cp	r1, r24
    1b6c:	4c f5       	brge	.+82     	; 0x1bc0 <LCD_init+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b70:	7e a9       	ldd	r23, Y+54	; 0x36
    1b72:	8f a9       	ldd	r24, Y+55	; 0x37
    1b74:	98 ad       	ldd	r25, Y+56	; 0x38
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e2       	ldi	r20, 0x20	; 32
    1b7c:	51 e4       	ldi	r21, 0x41	; 65
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	98 ab       	std	Y+48, r25	; 0x30
    1b94:	8f a7       	std	Y+47, r24	; 0x2f
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <LCD_init+0x364>
    1b98:	88 ec       	ldi	r24, 0xC8	; 200
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9e a7       	std	Y+46, r25	; 0x2e
    1b9e:	8d a7       	std	Y+45, r24	; 0x2d
    1ba0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_init+0x352>
    1ba8:	9e a7       	std	Y+46, r25	; 0x2e
    1baa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bae:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	98 ab       	std	Y+48, r25	; 0x30
    1bb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <LCD_init+0x346>
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <LCD_init+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	98 ab       	std	Y+48, r25	; 0x30
    1bd2:	8f a7       	std	Y+47, r24	; 0x2f
    1bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd8:	9c a7       	std	Y+44, r25	; 0x2c
    1bda:	8b a7       	std	Y+43, r24	; 0x2b
    1bdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bde:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_init+0x38e>
    1be4:	9c a7       	std	Y+44, r25	; 0x2c
    1be6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_send_command(DISPLAYON);
    1be8:	8c e0       	ldi	r24, 0x0C	; 12
    1bea:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e8       	ldi	r26, 0x80	; 128
    1bf4:	bf e3       	ldi	r27, 0x3F	; 63
    1bf6:	8f a3       	std	Y+39, r24	; 0x27
    1bf8:	98 a7       	std	Y+40, r25	; 0x28
    1bfa:	a9 a7       	std	Y+41, r26	; 0x29
    1bfc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    1c00:	78 a5       	ldd	r23, Y+40	; 0x28
    1c02:	89 a5       	ldd	r24, Y+41	; 0x29
    1c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a ef       	ldi	r20, 0xFA	; 250
    1c0c:	54 e4       	ldi	r21, 0x44	; 68
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8b a3       	std	Y+35, r24	; 0x23
    1c18:	9c a3       	std	Y+36, r25	; 0x24
    1c1a:	ad a3       	std	Y+37, r26	; 0x25
    1c1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c20:	7c a1       	ldd	r23, Y+36	; 0x24
    1c22:	8d a1       	ldd	r24, Y+37	; 0x25
    1c24:	9e a1       	ldd	r25, Y+38	; 0x26
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <LCD_init+0x3ee>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9a a3       	std	Y+34, r25	; 0x22
    1c3c:	89 a3       	std	Y+33, r24	; 0x21
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <LCD_init+0x46c>
	else if (__tmp > 65535)
    1c40:	6b a1       	ldd	r22, Y+35	; 0x23
    1c42:	7c a1       	ldd	r23, Y+36	; 0x24
    1c44:	8d a1       	ldd	r24, Y+37	; 0x25
    1c46:	9e a1       	ldd	r25, Y+38	; 0x26
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <LCD_init+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9a a3       	std	Y+34, r25	; 0x22
    1c7e:	89 a3       	std	Y+33, r24	; 0x21
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <LCD_init+0x44e>
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	98 a3       	std	Y+32, r25	; 0x20
    1c88:	8f 8f       	std	Y+31, r24	; 0x1f
    1c8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c8c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_init+0x43c>
    1c92:	98 a3       	std	Y+32, r25	; 0x20
    1c94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	89 a1       	ldd	r24, Y+33	; 0x21
    1c98:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9a a3       	std	Y+34, r25	; 0x22
    1c9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <LCD_init+0x430>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <LCD_init+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6b a1       	ldd	r22, Y+35	; 0x23
    1cac:	7c a1       	ldd	r23, Y+36	; 0x24
    1cae:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9a a3       	std	Y+34, r25	; 0x22
    1cbc:	89 a3       	std	Y+33, r24	; 0x21
    1cbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc4:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_init+0x478>
    1cce:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_send_command(LCD_CLEAR);
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e7       	ldi	r26, 0x70	; 112
    1cde:	b1 e4       	ldi	r27, 0x41	; 65
    1ce0:	89 8f       	std	Y+25, r24	; 0x19
    1ce2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8d 8b       	std	Y+21, r24	; 0x15
    1d02:	9e 8b       	std	Y+22, r25	; 0x16
    1d04:	af 8b       	std	Y+23, r26	; 0x17
    1d06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d08:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <LCD_init+0x4d8>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 8b       	std	Y+20, r25	; 0x14
    1d26:	8b 8b       	std	Y+19, r24	; 0x13
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <LCD_init+0x556>
	else if (__tmp > 65535)
    1d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	98 8d       	ldd	r25, Y+24	; 0x18
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <LCD_init+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	69 8d       	ldd	r22, Y+25	; 0x19
    1d44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9c 8b       	std	Y+20, r25	; 0x14
    1d68:	8b 8b       	std	Y+19, r24	; 0x13
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <LCD_init+0x538>
    1d6c:	88 ec       	ldi	r24, 0xC8	; 200
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9a 8b       	std	Y+18, r25	; 0x12
    1d72:	89 8b       	std	Y+17, r24	; 0x11
    1d74:	89 89       	ldd	r24, Y+17	; 0x11
    1d76:	9a 89       	ldd	r25, Y+18	; 0x12
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_init+0x526>
    1d7c:	9a 8b       	std	Y+18, r25	; 0x12
    1d7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8b 89       	ldd	r24, Y+19	; 0x13
    1d82:	9c 89       	ldd	r25, Y+20	; 0x14
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <LCD_init+0x51a>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <LCD_init+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9c 8b       	std	Y+20, r25	; 0x14
    1da6:	8b 8b       	std	Y+19, r24	; 0x13
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	98 8b       	std	Y+16, r25	; 0x10
    1dae:	8f 87       	std	Y+15, r24	; 0x0f
    1db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db2:	98 89       	ldd	r25, Y+16	; 0x10
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_init+0x562>
    1db8:	98 8b       	std	Y+16, r25	; 0x10
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);
	LCD_send_command(ENTER_MODE);
    1dbc:	86 e0       	ldi	r24, 0x06	; 6
    1dbe:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e0       	ldi	r26, 0x00	; 0
    1dc8:	b0 e4       	ldi	r27, 0x40	; 64
    1dca:	8b 87       	std	Y+11, r24	; 0x0b
    1dcc:	9c 87       	std	Y+12, r25	; 0x0c
    1dce:	ad 87       	std	Y+13, r26	; 0x0d
    1dd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a ef       	ldi	r20, 0xFA	; 250
    1de0:	54 e4       	ldi	r21, 0x44	; 68
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8f 83       	std	Y+7, r24	; 0x07
    1dec:	98 87       	std	Y+8, r25	; 0x08
    1dee:	a9 87       	std	Y+9, r26	; 0x09
    1df0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <LCD_init+0x5c2>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	8d 83       	std	Y+5, r24	; 0x05
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <LCD_init+0x640>
	else if (__tmp > 65535)
    1e14:	6f 81       	ldd	r22, Y+7	; 0x07
    1e16:	78 85       	ldd	r23, Y+8	; 0x08
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e28:	18 16       	cp	r1, r24
    1e2a:	4c f5       	brge	.+82     	; 0x1e7e <LCD_init+0x62c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e2       	ldi	r20, 0x20	; 32
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <LCD_init+0x622>
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9c 83       	std	Y+4, r25	; 0x04
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_init+0x610>
    1e66:	9c 83       	std	Y+4, r25	; 0x04
    1e68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <LCD_init+0x604>
    1e7c:	14 c0       	rjmp	.+40     	; 0x1ea6 <LCD_init+0x654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e80:	78 85       	ldd	r23, Y+8	; 0x08
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <LCD_init+0x64c>
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ea6:	cc 5a       	subi	r28, 0xAC	; 172
    1ea8:	df 4f       	sbci	r29, 0xFF	; 255
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	08 95       	ret

00001ebe <LCD_send_data>:
void LCD_send_data(u8 data) {
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	e9 97       	sbiw	r28, 0x39	; 57
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	89 af       	std	Y+57, r24	; 0x39
	DIO_set_pin(LCD_GROUP_CONTROL, RS_PIN, HIGH);
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	67 e0       	ldi	r22, 0x07	; 7
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 e8       	ldi	r26, 0x80	; 128
    1ee4:	bf e3       	ldi	r27, 0x3F	; 63
    1ee6:	8d ab       	std	Y+53, r24	; 0x35
    1ee8:	9e ab       	std	Y+54, r25	; 0x36
    1eea:	af ab       	std	Y+55, r26	; 0x37
    1eec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eee:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4a ef       	ldi	r20, 0xFA	; 250
    1efc:	54 e4       	ldi	r21, 0x44	; 68
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	89 ab       	std	Y+49, r24	; 0x31
    1f08:	9a ab       	std	Y+50, r25	; 0x32
    1f0a:	ab ab       	std	Y+51, r26	; 0x33
    1f0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f10:	7a a9       	ldd	r23, Y+50	; 0x32
    1f12:	8b a9       	ldd	r24, Y+51	; 0x33
    1f14:	9c a9       	ldd	r25, Y+52	; 0x34
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e8       	ldi	r20, 0x80	; 128
    1f1c:	5f e3       	ldi	r21, 0x3F	; 63
    1f1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f22:	88 23       	and	r24, r24
    1f24:	2c f4       	brge	.+10     	; 0x1f30 <LCD_send_data+0x72>
		__ticks = 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	98 ab       	std	Y+48, r25	; 0x30
    1f2c:	8f a7       	std	Y+47, r24	; 0x2f
    1f2e:	3f c0       	rjmp	.+126    	; 0x1fae <LCD_send_data+0xf0>
	else if (__tmp > 65535)
    1f30:	69 a9       	ldd	r22, Y+49	; 0x31
    1f32:	7a a9       	ldd	r23, Y+50	; 0x32
    1f34:	8b a9       	ldd	r24, Y+51	; 0x33
    1f36:	9c a9       	ldd	r25, Y+52	; 0x34
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	4c f5       	brge	.+82     	; 0x1f9a <LCD_send_data+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f48:	6d a9       	ldd	r22, Y+53	; 0x35
    1f4a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e2       	ldi	r20, 0x20	; 32
    1f56:	51 e4       	ldi	r21, 0x41	; 65
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	98 ab       	std	Y+48, r25	; 0x30
    1f6e:	8f a7       	std	Y+47, r24	; 0x2f
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <LCD_send_data+0xd2>
    1f72:	88 ec       	ldi	r24, 0xC8	; 200
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9e a7       	std	Y+46, r25	; 0x2e
    1f78:	8d a7       	std	Y+45, r24	; 0x2d
    1f7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_send_data+0xc0>
    1f82:	9e a7       	std	Y+46, r25	; 0x2e
    1f84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f88:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	98 ab       	std	Y+48, r25	; 0x30
    1f8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f92:	98 a9       	ldd	r25, Y+48	; 0x30
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	69 f7       	brne	.-38     	; 0x1f72 <LCD_send_data+0xb4>
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <LCD_send_data+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	98 ab       	std	Y+48, r25	; 0x30
    1fac:	8f a7       	std	Y+47, r24	; 0x2f
    1fae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb2:	9c a7       	std	Y+44, r25	; 0x2c
    1fb4:	8b a7       	std	Y+43, r24	; 0x2b
    1fb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_send_data+0xfc>
    1fbe:	9c a7       	std	Y+44, r25	; 0x2c
    1fc0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_set_pin(LCD_GROUP_CONTROL, E_PIN, HIGH);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	66 e0       	ldi	r22, 0x06	; 6
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e8       	ldi	r26, 0x80	; 128
    1fd2:	bf e3       	ldi	r27, 0x3F	; 63
    1fd4:	8f a3       	std	Y+39, r24	; 0x27
    1fd6:	98 a7       	std	Y+40, r25	; 0x28
    1fd8:	a9 a7       	std	Y+41, r26	; 0x29
    1fda:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6f a1       	ldd	r22, Y+39	; 0x27
    1fde:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8b a3       	std	Y+35, r24	; 0x23
    1ff6:	9c a3       	std	Y+36, r25	; 0x24
    1ff8:	ad a3       	std	Y+37, r26	; 0x25
    1ffa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ffc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    2000:	8d a1       	ldd	r24, Y+37	; 0x25
    2002:	9e a1       	ldd	r25, Y+38	; 0x26
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <LCD_send_data+0x160>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9a a3       	std	Y+34, r25	; 0x22
    201a:	89 a3       	std	Y+33, r24	; 0x21
    201c:	3f c0       	rjmp	.+126    	; 0x209c <LCD_send_data+0x1de>
	else if (__tmp > 65535)
    201e:	6b a1       	ldd	r22, Y+35	; 0x23
    2020:	7c a1       	ldd	r23, Y+36	; 0x24
    2022:	8d a1       	ldd	r24, Y+37	; 0x25
    2024:	9e a1       	ldd	r25, Y+38	; 0x26
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <LCD_send_data+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6f a1       	ldd	r22, Y+39	; 0x27
    2038:	78 a5       	ldd	r23, Y+40	; 0x28
    203a:	89 a5       	ldd	r24, Y+41	; 0x29
    203c:	9a a5       	ldd	r25, Y+42	; 0x2a
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9a a3       	std	Y+34, r25	; 0x22
    205c:	89 a3       	std	Y+33, r24	; 0x21
    205e:	0f c0       	rjmp	.+30     	; 0x207e <LCD_send_data+0x1c0>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	98 a3       	std	Y+32, r25	; 0x20
    2066:	8f 8f       	std	Y+31, r24	; 0x1f
    2068:	8f 8d       	ldd	r24, Y+31	; 0x1f
    206a:	98 a1       	ldd	r25, Y+32	; 0x20
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_send_data+0x1ae>
    2070:	98 a3       	std	Y+32, r25	; 0x20
    2072:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	89 a1       	ldd	r24, Y+33	; 0x21
    2076:	9a a1       	ldd	r25, Y+34	; 0x22
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9a a3       	std	Y+34, r25	; 0x22
    207c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	89 a1       	ldd	r24, Y+33	; 0x21
    2080:	9a a1       	ldd	r25, Y+34	; 0x22
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <LCD_send_data+0x1a2>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <LCD_send_data+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6b a1       	ldd	r22, Y+35	; 0x23
    208a:	7c a1       	ldd	r23, Y+36	; 0x24
    208c:	8d a1       	ldd	r24, Y+37	; 0x25
    208e:	9e a1       	ldd	r25, Y+38	; 0x26
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9a a3       	std	Y+34, r25	; 0x22
    209a:	89 a3       	std	Y+33, r24	; 0x21
    209c:	89 a1       	ldd	r24, Y+33	; 0x21
    209e:	9a a1       	ldd	r25, Y+34	; 0x22
    20a0:	9e 8f       	std	Y+30, r25	; 0x1e
    20a2:	8d 8f       	std	Y+29, r24	; 0x1d
    20a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_send_data+0x1ea>
    20ac:	9e 8f       	std	Y+30, r25	; 0x1e
    20ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_set_port(LCD_GROUP_DATA, data);
    20b0:	84 e0       	ldi	r24, 0x04	; 4
    20b2:	69 ad       	ldd	r22, Y+57	; 0x39
    20b4:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_set_port>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e8       	ldi	r26, 0x80	; 128
    20be:	bf e3       	ldi	r27, 0x3F	; 63
    20c0:	89 8f       	std	Y+25, r24	; 0x19
    20c2:	9a 8f       	std	Y+26, r25	; 0x1a
    20c4:	ab 8f       	std	Y+27, r26	; 0x1b
    20c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	4a ef       	ldi	r20, 0xFA	; 250
    20d6:	54 e4       	ldi	r21, 0x44	; 68
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8d 8b       	std	Y+21, r24	; 0x15
    20e2:	9e 8b       	std	Y+22, r25	; 0x16
    20e4:	af 8b       	std	Y+23, r26	; 0x17
    20e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20e8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ea:	7e 89       	ldd	r23, Y+22	; 0x16
    20ec:	8f 89       	ldd	r24, Y+23	; 0x17
    20ee:	98 8d       	ldd	r25, Y+24	; 0x18
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	5f e3       	ldi	r21, 0x3F	; 63
    20f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	2c f4       	brge	.+10     	; 0x210a <LCD_send_data+0x24c>
		__ticks = 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9c 8b       	std	Y+20, r25	; 0x14
    2106:	8b 8b       	std	Y+19, r24	; 0x13
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <LCD_send_data+0x2ca>
	else if (__tmp > 65535)
    210a:	6d 89       	ldd	r22, Y+21	; 0x15
    210c:	7e 89       	ldd	r23, Y+22	; 0x16
    210e:	8f 89       	ldd	r24, Y+23	; 0x17
    2110:	98 8d       	ldd	r25, Y+24	; 0x18
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211e:	18 16       	cp	r1, r24
    2120:	4c f5       	brge	.+82     	; 0x2174 <LCD_send_data+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	69 8d       	ldd	r22, Y+25	; 0x19
    2124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9c 8b       	std	Y+20, r25	; 0x14
    2148:	8b 8b       	std	Y+19, r24	; 0x13
    214a:	0f c0       	rjmp	.+30     	; 0x216a <LCD_send_data+0x2ac>
    214c:	88 ec       	ldi	r24, 0xC8	; 200
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	9a 8b       	std	Y+18, r25	; 0x12
    2152:	89 8b       	std	Y+17, r24	; 0x11
    2154:	89 89       	ldd	r24, Y+17	; 0x11
    2156:	9a 89       	ldd	r25, Y+18	; 0x12
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_send_data+0x29a>
    215c:	9a 8b       	std	Y+18, r25	; 0x12
    215e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	9c 8b       	std	Y+20, r25	; 0x14
    2168:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	8b 89       	ldd	r24, Y+19	; 0x13
    216c:	9c 89       	ldd	r25, Y+20	; 0x14
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	69 f7       	brne	.-38     	; 0x214c <LCD_send_data+0x28e>
    2172:	14 c0       	rjmp	.+40     	; 0x219c <LCD_send_data+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	6d 89       	ldd	r22, Y+21	; 0x15
    2176:	7e 89       	ldd	r23, Y+22	; 0x16
    2178:	8f 89       	ldd	r24, Y+23	; 0x17
    217a:	98 8d       	ldd	r25, Y+24	; 0x18
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9c 8b       	std	Y+20, r25	; 0x14
    2186:	8b 8b       	std	Y+19, r24	; 0x13
    2188:	8b 89       	ldd	r24, Y+19	; 0x13
    218a:	9c 89       	ldd	r25, Y+20	; 0x14
    218c:	98 8b       	std	Y+16, r25	; 0x10
    218e:	8f 87       	std	Y+15, r24	; 0x0f
    2190:	8f 85       	ldd	r24, Y+15	; 0x0f
    2192:	98 89       	ldd	r25, Y+16	; 0x10
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_send_data+0x2d6>
    2198:	98 8b       	std	Y+16, r25	; 0x10
    219a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_set_pin(LCD_GROUP_CONTROL, E_PIN, LOW);
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	66 e0       	ldi	r22, 0x06	; 6
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e2       	ldi	r26, 0x20	; 32
    21ac:	b1 e4       	ldi	r27, 0x41	; 65
    21ae:	8b 87       	std	Y+11, r24	; 0x0b
    21b0:	9c 87       	std	Y+12, r25	; 0x0c
    21b2:	ad 87       	std	Y+13, r26	; 0x0d
    21b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    21bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	4a ef       	ldi	r20, 0xFA	; 250
    21c4:	54 e4       	ldi	r21, 0x44	; 68
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8f 83       	std	Y+7, r24	; 0x07
    21d0:	98 87       	std	Y+8, r25	; 0x08
    21d2:	a9 87       	std	Y+9, r26	; 0x09
    21d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	2c f4       	brge	.+10     	; 0x21f8 <LCD_send_data+0x33a>
		__ticks = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	3f c0       	rjmp	.+126    	; 0x2276 <LCD_send_data+0x3b8>
	else if (__tmp > 65535)
    21f8:	6f 81       	ldd	r22, Y+7	; 0x07
    21fa:	78 85       	ldd	r23, Y+8	; 0x08
    21fc:	89 85       	ldd	r24, Y+9	; 0x09
    21fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	3f ef       	ldi	r19, 0xFF	; 255
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	57 e4       	ldi	r21, 0x47	; 71
    2208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220c:	18 16       	cp	r1, r24
    220e:	4c f5       	brge	.+82     	; 0x2262 <LCD_send_data+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2210:	6b 85       	ldd	r22, Y+11	; 0x0b
    2212:	7c 85       	ldd	r23, Y+12	; 0x0c
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	9e 85       	ldd	r25, Y+14	; 0x0e
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e2       	ldi	r20, 0x20	; 32
    221e:	51 e4       	ldi	r21, 0x41	; 65
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	0f c0       	rjmp	.+30     	; 0x2258 <LCD_send_data+0x39a>
    223a:	88 ec       	ldi	r24, 0xC8	; 200
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	9c 83       	std	Y+4, r25	; 0x04
    2240:	8b 83       	std	Y+3, r24	; 0x03
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <LCD_send_data+0x388>
    224a:	9c 83       	std	Y+4, r25	; 0x04
    224c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224e:	8d 81       	ldd	r24, Y+5	; 0x05
    2250:	9e 81       	ldd	r25, Y+6	; 0x06
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	9e 83       	std	Y+6, r25	; 0x06
    2256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	69 f7       	brne	.-38     	; 0x223a <LCD_send_data+0x37c>
    2260:	14 c0       	rjmp	.+40     	; 0x228a <LCD_send_data+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2262:	6f 81       	ldd	r22, Y+7	; 0x07
    2264:	78 85       	ldd	r23, Y+8	; 0x08
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_send_data+0x3c4>
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    228a:	e9 96       	adiw	r28, 0x39	; 57
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <LCD_send_command>:
void LCD_send_command(u8 command) {
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	e9 97       	sbiw	r28, 0x39	; 57
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	89 af       	std	Y+57, r24	; 0x39
	DIO_set_pin(LCD_GROUP_CONTROL, RS_PIN, LOW);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	67 e0       	ldi	r22, 0x07	; 7
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a0 e8       	ldi	r26, 0x80	; 128
    22c2:	bf e3       	ldi	r27, 0x3F	; 63
    22c4:	8d ab       	std	Y+53, r24	; 0x35
    22c6:	9e ab       	std	Y+54, r25	; 0x36
    22c8:	af ab       	std	Y+55, r26	; 0x37
    22ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	6d a9       	ldd	r22, Y+53	; 0x35
    22ce:	7e a9       	ldd	r23, Y+54	; 0x36
    22d0:	8f a9       	ldd	r24, Y+55	; 0x37
    22d2:	98 ad       	ldd	r25, Y+56	; 0x38
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a ef       	ldi	r20, 0xFA	; 250
    22da:	54 e4       	ldi	r21, 0x44	; 68
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	89 ab       	std	Y+49, r24	; 0x31
    22e6:	9a ab       	std	Y+50, r25	; 0x32
    22e8:	ab ab       	std	Y+51, r26	; 0x33
    22ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22ec:	69 a9       	ldd	r22, Y+49	; 0x31
    22ee:	7a a9       	ldd	r23, Y+50	; 0x32
    22f0:	8b a9       	ldd	r24, Y+51	; 0x33
    22f2:	9c a9       	ldd	r25, Y+52	; 0x34
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCD_send_command+0x72>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	98 ab       	std	Y+48, r25	; 0x30
    230a:	8f a7       	std	Y+47, r24	; 0x2f
    230c:	3f c0       	rjmp	.+126    	; 0x238c <LCD_send_command+0xf0>
	else if (__tmp > 65535)
    230e:	69 a9       	ldd	r22, Y+49	; 0x31
    2310:	7a a9       	ldd	r23, Y+50	; 0x32
    2312:	8b a9       	ldd	r24, Y+51	; 0x33
    2314:	9c a9       	ldd	r25, Y+52	; 0x34
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <LCD_send_command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	6d a9       	ldd	r22, Y+53	; 0x35
    2328:	7e a9       	ldd	r23, Y+54	; 0x36
    232a:	8f a9       	ldd	r24, Y+55	; 0x37
    232c:	98 ad       	ldd	r25, Y+56	; 0x38
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	98 ab       	std	Y+48, r25	; 0x30
    234c:	8f a7       	std	Y+47, r24	; 0x2f
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCD_send_command+0xd2>
    2350:	88 ec       	ldi	r24, 0xC8	; 200
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9e a7       	std	Y+46, r25	; 0x2e
    2356:	8d a7       	std	Y+45, r24	; 0x2d
    2358:	8d a5       	ldd	r24, Y+45	; 0x2d
    235a:	9e a5       	ldd	r25, Y+46	; 0x2e
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_send_command+0xc0>
    2360:	9e a7       	std	Y+46, r25	; 0x2e
    2362:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	8f a5       	ldd	r24, Y+47	; 0x2f
    2366:	98 a9       	ldd	r25, Y+48	; 0x30
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	98 ab       	std	Y+48, r25	; 0x30
    236c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2370:	98 a9       	ldd	r25, Y+48	; 0x30
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <LCD_send_command+0xb4>
    2376:	14 c0       	rjmp	.+40     	; 0x23a0 <LCD_send_command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	69 a9       	ldd	r22, Y+49	; 0x31
    237a:	7a a9       	ldd	r23, Y+50	; 0x32
    237c:	8b a9       	ldd	r24, Y+51	; 0x33
    237e:	9c a9       	ldd	r25, Y+52	; 0x34
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	98 ab       	std	Y+48, r25	; 0x30
    238a:	8f a7       	std	Y+47, r24	; 0x2f
    238c:	8f a5       	ldd	r24, Y+47	; 0x2f
    238e:	98 a9       	ldd	r25, Y+48	; 0x30
    2390:	9c a7       	std	Y+44, r25	; 0x2c
    2392:	8b a7       	std	Y+43, r24	; 0x2b
    2394:	8b a5       	ldd	r24, Y+43	; 0x2b
    2396:	9c a5       	ldd	r25, Y+44	; 0x2c
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_send_command+0xfc>
    239c:	9c a7       	std	Y+44, r25	; 0x2c
    239e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_set_pin(LCD_GROUP_CONTROL, E_PIN, HIGH);
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	66 e0       	ldi	r22, 0x06	; 6
    23a4:	41 e0       	ldi	r20, 0x01	; 1
    23a6:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a0 e8       	ldi	r26, 0x80	; 128
    23b0:	bf e3       	ldi	r27, 0x3F	; 63
    23b2:	8f a3       	std	Y+39, r24	; 0x27
    23b4:	98 a7       	std	Y+40, r25	; 0x28
    23b6:	a9 a7       	std	Y+41, r26	; 0x29
    23b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	6f a1       	ldd	r22, Y+39	; 0x27
    23bc:	78 a5       	ldd	r23, Y+40	; 0x28
    23be:	89 a5       	ldd	r24, Y+41	; 0x29
    23c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a ef       	ldi	r20, 0xFA	; 250
    23c8:	54 e4       	ldi	r21, 0x44	; 68
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8b a3       	std	Y+35, r24	; 0x23
    23d4:	9c a3       	std	Y+36, r25	; 0x24
    23d6:	ad a3       	std	Y+37, r26	; 0x25
    23d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23da:	6b a1       	ldd	r22, Y+35	; 0x23
    23dc:	7c a1       	ldd	r23, Y+36	; 0x24
    23de:	8d a1       	ldd	r24, Y+37	; 0x25
    23e0:	9e a1       	ldd	r25, Y+38	; 0x26
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e8       	ldi	r20, 0x80	; 128
    23e8:	5f e3       	ldi	r21, 0x3F	; 63
    23ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ee:	88 23       	and	r24, r24
    23f0:	2c f4       	brge	.+10     	; 0x23fc <LCD_send_command+0x160>
		__ticks = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9a a3       	std	Y+34, r25	; 0x22
    23f8:	89 a3       	std	Y+33, r24	; 0x21
    23fa:	3f c0       	rjmp	.+126    	; 0x247a <LCD_send_command+0x1de>
	else if (__tmp > 65535)
    23fc:	6b a1       	ldd	r22, Y+35	; 0x23
    23fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2400:	8d a1       	ldd	r24, Y+37	; 0x25
    2402:	9e a1       	ldd	r25, Y+38	; 0x26
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	4c f5       	brge	.+82     	; 0x2466 <LCD_send_command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2414:	6f a1       	ldd	r22, Y+39	; 0x27
    2416:	78 a5       	ldd	r23, Y+40	; 0x28
    2418:	89 a5       	ldd	r24, Y+41	; 0x29
    241a:	9a a5       	ldd	r25, Y+42	; 0x2a
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	51 e4       	ldi	r21, 0x41	; 65
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9a a3       	std	Y+34, r25	; 0x22
    243a:	89 a3       	std	Y+33, r24	; 0x21
    243c:	0f c0       	rjmp	.+30     	; 0x245c <LCD_send_command+0x1c0>
    243e:	88 ec       	ldi	r24, 0xC8	; 200
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	98 a3       	std	Y+32, r25	; 0x20
    2444:	8f 8f       	std	Y+31, r24	; 0x1f
    2446:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2448:	98 a1       	ldd	r25, Y+32	; 0x20
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <LCD_send_command+0x1ae>
    244e:	98 a3       	std	Y+32, r25	; 0x20
    2450:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	89 a1       	ldd	r24, Y+33	; 0x21
    2454:	9a a1       	ldd	r25, Y+34	; 0x22
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9a a3       	std	Y+34, r25	; 0x22
    245a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	89 a1       	ldd	r24, Y+33	; 0x21
    245e:	9a a1       	ldd	r25, Y+34	; 0x22
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	69 f7       	brne	.-38     	; 0x243e <LCD_send_command+0x1a2>
    2464:	14 c0       	rjmp	.+40     	; 0x248e <LCD_send_command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	6b a1       	ldd	r22, Y+35	; 0x23
    2468:	7c a1       	ldd	r23, Y+36	; 0x24
    246a:	8d a1       	ldd	r24, Y+37	; 0x25
    246c:	9e a1       	ldd	r25, Y+38	; 0x26
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9a a3       	std	Y+34, r25	; 0x22
    2478:	89 a3       	std	Y+33, r24	; 0x21
    247a:	89 a1       	ldd	r24, Y+33	; 0x21
    247c:	9a a1       	ldd	r25, Y+34	; 0x22
    247e:	9e 8f       	std	Y+30, r25	; 0x1e
    2480:	8d 8f       	std	Y+29, r24	; 0x1d
    2482:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2484:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_send_command+0x1ea>
    248a:	9e 8f       	std	Y+30, r25	; 0x1e
    248c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_set_port(LCD_GROUP_DATA, command);
    248e:	84 e0       	ldi	r24, 0x04	; 4
    2490:	69 ad       	ldd	r22, Y+57	; 0x39
    2492:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_set_port>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	bf e3       	ldi	r27, 0x3F	; 63
    249e:	89 8f       	std	Y+25, r24	; 0x19
    24a0:	9a 8f       	std	Y+26, r25	; 0x1a
    24a2:	ab 8f       	std	Y+27, r26	; 0x1b
    24a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	69 8d       	ldd	r22, Y+25	; 0x19
    24a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a ef       	ldi	r20, 0xFA	; 250
    24b4:	54 e4       	ldi	r21, 0x44	; 68
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8d 8b       	std	Y+21, r24	; 0x15
    24c0:	9e 8b       	std	Y+22, r25	; 0x16
    24c2:	af 8b       	std	Y+23, r26	; 0x17
    24c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c6:	6d 89       	ldd	r22, Y+21	; 0x15
    24c8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ca:	8f 89       	ldd	r24, Y+23	; 0x17
    24cc:	98 8d       	ldd	r25, Y+24	; 0x18
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <LCD_send_command+0x24c>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9c 8b       	std	Y+20, r25	; 0x14
    24e4:	8b 8b       	std	Y+19, r24	; 0x13
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <LCD_send_command+0x2ca>
	else if (__tmp > 65535)
    24e8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ea:	7e 89       	ldd	r23, Y+22	; 0x16
    24ec:	8f 89       	ldd	r24, Y+23	; 0x17
    24ee:	98 8d       	ldd	r25, Y+24	; 0x18
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <LCD_send_command+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	69 8d       	ldd	r22, Y+25	; 0x19
    2502:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9c 8b       	std	Y+20, r25	; 0x14
    2526:	8b 8b       	std	Y+19, r24	; 0x13
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <LCD_send_command+0x2ac>
    252a:	88 ec       	ldi	r24, 0xC8	; 200
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	9a 8b       	std	Y+18, r25	; 0x12
    2530:	89 8b       	std	Y+17, r24	; 0x11
    2532:	89 89       	ldd	r24, Y+17	; 0x11
    2534:	9a 89       	ldd	r25, Y+18	; 0x12
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <LCD_send_command+0x29a>
    253a:	9a 8b       	std	Y+18, r25	; 0x12
    253c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	8b 89       	ldd	r24, Y+19	; 0x13
    2540:	9c 89       	ldd	r25, Y+20	; 0x14
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	9c 89       	ldd	r25, Y+20	; 0x14
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <LCD_send_command+0x28e>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <LCD_send_command+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6d 89       	ldd	r22, Y+21	; 0x15
    2554:	7e 89       	ldd	r23, Y+22	; 0x16
    2556:	8f 89       	ldd	r24, Y+23	; 0x17
    2558:	98 8d       	ldd	r25, Y+24	; 0x18
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9c 8b       	std	Y+20, r25	; 0x14
    2564:	8b 8b       	std	Y+19, r24	; 0x13
    2566:	8b 89       	ldd	r24, Y+19	; 0x13
    2568:	9c 89       	ldd	r25, Y+20	; 0x14
    256a:	98 8b       	std	Y+16, r25	; 0x10
    256c:	8f 87       	std	Y+15, r24	; 0x0f
    256e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2570:	98 89       	ldd	r25, Y+16	; 0x10
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_send_command+0x2d6>
    2576:	98 8b       	std	Y+16, r25	; 0x10
    2578:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_set_pin(LCD_GROUP_CONTROL, E_PIN, LOW);
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	66 e0       	ldi	r22, 0x06	; 6
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 e2       	ldi	r26, 0x20	; 32
    258a:	b1 e4       	ldi	r27, 0x41	; 65
    258c:	8b 87       	std	Y+11, r24	; 0x0b
    258e:	9c 87       	std	Y+12, r25	; 0x0c
    2590:	ad 87       	std	Y+13, r26	; 0x0d
    2592:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	6b 85       	ldd	r22, Y+11	; 0x0b
    2596:	7c 85       	ldd	r23, Y+12	; 0x0c
    2598:	8d 85       	ldd	r24, Y+13	; 0x0d
    259a:	9e 85       	ldd	r25, Y+14	; 0x0e
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a ef       	ldi	r20, 0xFA	; 250
    25a2:	54 e4       	ldi	r21, 0x44	; 68
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	8f 83       	std	Y+7, r24	; 0x07
    25ae:	98 87       	std	Y+8, r25	; 0x08
    25b0:	a9 87       	std	Y+9, r26	; 0x09
    25b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b4:	6f 81       	ldd	r22, Y+7	; 0x07
    25b6:	78 85       	ldd	r23, Y+8	; 0x08
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <LCD_send_command+0x33a>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <LCD_send_command+0x3b8>
	else if (__tmp > 65535)
    25d6:	6f 81       	ldd	r22, Y+7	; 0x07
    25d8:	78 85       	ldd	r23, Y+8	; 0x08
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <LCD_send_command+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9e 83       	std	Y+6, r25	; 0x06
    2614:	8d 83       	std	Y+5, r24	; 0x05
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_send_command+0x39a>
    2618:	88 ec       	ldi	r24, 0xC8	; 200
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_send_command+0x388>
    2628:	9c 83       	std	Y+4, r25	; 0x04
    262a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <LCD_send_command+0x37c>
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <LCD_send_command+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	78 85       	ldd	r23, Y+8	; 0x08
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_send_command+0x3c4>
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    2668:	e9 96       	adiw	r28, 0x39	; 57
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <LCD_goto_col_row>:
void LCD_goto_col_row(u8 col, u8 row) {
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <LCD_goto_col_row+0x6>
    2680:	00 d0       	rcall	.+0      	; 0x2682 <LCD_goto_col_row+0x8>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	3c 83       	std	Y+4, r19	; 0x04
    2692:	2b 83       	std	Y+3, r18	; 0x03
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	31 f0       	breq	.+12     	; 0x26a8 <LCD_goto_col_row+0x2e>
    269c:	2b 81       	ldd	r18, Y+3	; 0x03
    269e:	3c 81       	ldd	r19, Y+4	; 0x04
    26a0:	21 30       	cpi	r18, 0x01	; 1
    26a2:	31 05       	cpc	r19, r1
    26a4:	31 f0       	breq	.+12     	; 0x26b2 <LCD_goto_col_row+0x38>
    26a6:	0a c0       	rjmp	.+20     	; 0x26bc <LCD_goto_col_row+0x42>
	case 0:
		LCD_send_command(0x80 | col);
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	80 68       	ori	r24, 0x80	; 128
    26ac:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
    26b0:	05 c0       	rjmp	.+10     	; 0x26bc <LCD_goto_col_row+0x42>
		break;
	case 1:
		LCD_send_command(0x80 | col + 0x40);
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	80 5c       	subi	r24, 0xC0	; 192
    26b6:	80 68       	ori	r24, 0x80	; 128
    26b8:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
		break;

	}
}
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <LCD_send_string>:
void LCD_send_string(u8 ptr[])
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <LCD_send_string+0x6>
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	9b 83       	std	Y+3, r25	; 0x03
    26d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    26da:	19 82       	std	Y+1, r1	; 0x01
    26dc:	0e c0       	rjmp	.+28     	; 0x26fa <LCD_send_string+0x30>
	while(ptr[i] != '\0')
	{
		LCD_send_data(ptr[i]);
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	9b 81       	ldd	r25, Y+3	; 0x03
    26e8:	fc 01       	movw	r30, r24
    26ea:	e2 0f       	add	r30, r18
    26ec:	f3 1f       	adc	r31, r19
    26ee:	80 81       	ld	r24, Z
    26f0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
		i++;
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	8f 5f       	subi	r24, 0xFF	; 255
    26f8:	89 83       	std	Y+1, r24	; 0x01
	}
}
void LCD_send_string(u8 ptr[])
{
	u8 i = 0;
	while(ptr[i] != '\0')
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	9b 81       	ldd	r25, Y+3	; 0x03
    2704:	fc 01       	movw	r30, r24
    2706:	e2 0f       	add	r30, r18
    2708:	f3 1f       	adc	r31, r19
    270a:	80 81       	ld	r24, Z
    270c:	88 23       	and	r24, r24
    270e:	39 f7       	brne	.-50     	; 0x26de <LCD_send_string+0x14>
	{
		LCD_send_data(ptr[i]);
		i++;
	}
}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <LCD_character>:
void LCD_character(u8 chr,u8 coulmn,u8 row)
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	63 97       	sbiw	r28, 0x13	; 19
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	8f 87       	std	Y+15, r24	; 0x0f
    2732:	68 8b       	std	Y+16, r22	; 0x10
    2734:	49 8b       	std	Y+17, r20	; 0x11
	//LCD_send_command(64);// Address where customized character is to be stored
	int char_loc = 0;
    2736:	1e 86       	std	Y+14, r1	; 0x0e
    2738:	1d 86       	std	Y+13, r1	; 0x0d
	switch (chr)
    273a:	8f 85       	ldd	r24, Y+15	; 0x0f
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	3b 8b       	std	Y+19, r19	; 0x13
    2742:	2a 8b       	std	Y+18, r18	; 0x12
    2744:	8a 89       	ldd	r24, Y+18	; 0x12
    2746:	9b 89       	ldd	r25, Y+19	; 0x13
    2748:	80 37       	cpi	r24, 0x70	; 112
    274a:	91 05       	cpc	r25, r1
    274c:	09 f4       	brne	.+2      	; 0x2750 <LCD_character+0x34>
    274e:	c1 c0       	rjmp	.+386    	; 0x28d2 <LCD_character+0x1b6>
    2750:	2a 89       	ldd	r18, Y+18	; 0x12
    2752:	3b 89       	ldd	r19, Y+19	; 0x13
    2754:	21 37       	cpi	r18, 0x71	; 113
    2756:	31 05       	cpc	r19, r1
    2758:	6c f4       	brge	.+26     	; 0x2774 <LCD_character+0x58>
    275a:	8a 89       	ldd	r24, Y+18	; 0x12
    275c:	9b 89       	ldd	r25, Y+19	; 0x13
    275e:	86 36       	cpi	r24, 0x66	; 102
    2760:	91 05       	cpc	r25, r1
    2762:	09 f4       	brne	.+2      	; 0x2766 <LCD_character+0x4a>
    2764:	76 c0       	rjmp	.+236    	; 0x2852 <LCD_character+0x136>
    2766:	2a 89       	ldd	r18, Y+18	; 0x12
    2768:	3b 89       	ldd	r19, Y+19	; 0x13
    276a:	28 36       	cpi	r18, 0x68	; 104
    276c:	31 05       	cpc	r19, r1
    276e:	09 f4       	brne	.+2      	; 0x2772 <LCD_character+0x56>
    2770:	90 c0       	rjmp	.+288    	; 0x2892 <LCD_character+0x176>
    2772:	ce c0       	rjmp	.+412    	; 0x2910 <LCD_character+0x1f4>
    2774:	8a 89       	ldd	r24, Y+18	; 0x12
    2776:	9b 89       	ldd	r25, Y+19	; 0x13
    2778:	87 37       	cpi	r24, 0x77	; 119
    277a:	91 05       	cpc	r25, r1
    277c:	51 f1       	breq	.+84     	; 0x27d2 <LCD_character+0xb6>
    277e:	2a 89       	ldd	r18, Y+18	; 0x12
    2780:	3b 89       	ldd	r19, Y+19	; 0x13
    2782:	29 37       	cpi	r18, 0x79	; 121
    2784:	31 05       	cpc	r19, r1
    2786:	39 f0       	breq	.+14     	; 0x2796 <LCD_character+0x7a>
    2788:	8a 89       	ldd	r24, Y+18	; 0x12
    278a:	9b 89       	ldd	r25, Y+19	; 0x13
    278c:	83 37       	cpi	r24, 0x73	; 115
    278e:	91 05       	cpc	r25, r1
    2790:	09 f4       	brne	.+2      	; 0x2794 <LCD_character+0x78>
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <LCD_character+0xf6>
    2794:	bd c0       	rjmp	.+378    	; 0x2910 <LCD_character+0x1f4>
	{
		case 'y':
			LCD_send_command(64);
    2796:	80 e4       	ldi	r24, 0x40	; 64
    2798:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    279c:	1c 86       	std	Y+12, r1	; 0x0c
    279e:	1b 86       	std	Y+11, r1	; 0x0b
    27a0:	10 c0       	rjmp	.+32     	; 0x27c2 <LCD_character+0xa6>
			{
				LCD_send_data(yaa[i]);
    27a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    27a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	fc 01       	movw	r30, r24
    27ac:	e2 5b       	subi	r30, 0xB2	; 178
    27ae:	fe 4f       	sbci	r31, 0xFE	; 254
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
	int char_loc = 0;
	switch (chr)
	{
		case 'y':
			LCD_send_command(64);
			for(int i = 0;i<8;i++)
    27b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    27bc:	01 96       	adiw	r24, 0x01	; 1
    27be:	9c 87       	std	Y+12, r25	; 0x0c
    27c0:	8b 87       	std	Y+11, r24	; 0x0b
    27c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    27c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    27c6:	88 30       	cpi	r24, 0x08	; 8
    27c8:	91 05       	cpc	r25, r1
    27ca:	5c f3       	brlt	.-42     	; 0x27a2 <LCD_character+0x86>
			{
				LCD_send_data(yaa[i]);
			}
			char_loc = 0;
    27cc:	1e 86       	std	Y+14, r1	; 0x0e
    27ce:	1d 86       	std	Y+13, r1	; 0x0d
    27d0:	9f c0       	rjmp	.+318    	; 0x2910 <LCD_character+0x1f4>
			break;
		case 'w':
			LCD_send_command(72);
    27d2:	88 e4       	ldi	r24, 0x48	; 72
    27d4:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    27d8:	1a 86       	std	Y+10, r1	; 0x0a
    27da:	19 86       	std	Y+9, r1	; 0x09
    27dc:	10 c0       	rjmp	.+32     	; 0x27fe <LCD_character+0xe2>
			{
				LCD_send_data(waw[i]);
    27de:	89 85       	ldd	r24, Y+9	; 0x09
    27e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	fc 01       	movw	r30, r24
    27e8:	e2 5a       	subi	r30, 0xA2	; 162
    27ea:	fe 4f       	sbci	r31, 0xFE	; 254
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
			}
			char_loc = 0;
			break;
		case 'w':
			LCD_send_command(72);
			for(int i = 0;i<8;i++)
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	01 96       	adiw	r24, 0x01	; 1
    27fa:	9a 87       	std	Y+10, r25	; 0x0a
    27fc:	89 87       	std	Y+9, r24	; 0x09
    27fe:	89 85       	ldd	r24, Y+9	; 0x09
    2800:	9a 85       	ldd	r25, Y+10	; 0x0a
    2802:	88 30       	cpi	r24, 0x08	; 8
    2804:	91 05       	cpc	r25, r1
    2806:	5c f3       	brlt	.-42     	; 0x27de <LCD_character+0xc2>
			{
				LCD_send_data(waw[i]);
			}
			char_loc = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9e 87       	std	Y+14, r25	; 0x0e
    280e:	8d 87       	std	Y+13, r24	; 0x0d
    2810:	7f c0       	rjmp	.+254    	; 0x2910 <LCD_character+0x1f4>
			break;
		case 's':
			LCD_send_command(80);
    2812:	80 e5       	ldi	r24, 0x50	; 80
    2814:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    2818:	18 86       	std	Y+8, r1	; 0x08
    281a:	1f 82       	std	Y+7, r1	; 0x07
    281c:	10 c0       	rjmp	.+32     	; 0x283e <LCD_character+0x122>
			{
				LCD_send_data(seen[i]);
    281e:	8f 81       	ldd	r24, Y+7	; 0x07
    2820:	98 85       	ldd	r25, Y+8	; 0x08
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	fc 01       	movw	r30, r24
    2828:	e2 59       	subi	r30, 0x92	; 146
    282a:	fe 4f       	sbci	r31, 0xFE	; 254
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
			}
			char_loc = 1;
			break;
		case 's':
			LCD_send_command(80);
			for(int i = 0;i<8;i++)
    2834:	8f 81       	ldd	r24, Y+7	; 0x07
    2836:	98 85       	ldd	r25, Y+8	; 0x08
    2838:	01 96       	adiw	r24, 0x01	; 1
    283a:	98 87       	std	Y+8, r25	; 0x08
    283c:	8f 83       	std	Y+7, r24	; 0x07
    283e:	8f 81       	ldd	r24, Y+7	; 0x07
    2840:	98 85       	ldd	r25, Y+8	; 0x08
    2842:	88 30       	cpi	r24, 0x08	; 8
    2844:	91 05       	cpc	r25, r1
    2846:	5c f3       	brlt	.-42     	; 0x281e <LCD_character+0x102>
			{
				LCD_send_data(seen[i]);
			}
			char_loc = 2;
    2848:	82 e0       	ldi	r24, 0x02	; 2
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9e 87       	std	Y+14, r25	; 0x0e
    284e:	8d 87       	std	Y+13, r24	; 0x0d
    2850:	5f c0       	rjmp	.+190    	; 0x2910 <LCD_character+0x1f4>
			break;
		case 'f':
			LCD_send_command(88);
    2852:	88 e5       	ldi	r24, 0x58	; 88
    2854:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    2858:	1e 82       	std	Y+6, r1	; 0x06
    285a:	1d 82       	std	Y+5, r1	; 0x05
    285c:	10 c0       	rjmp	.+32     	; 0x287e <LCD_character+0x162>
			{
				LCD_send_data(faa[i]);
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	fc 01       	movw	r30, r24
    2868:	e2 58       	subi	r30, 0x82	; 130
    286a:	fe 4f       	sbci	r31, 0xFE	; 254
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
			}
			char_loc = 2;
			break;
		case 'f':
			LCD_send_command(88);
			for(int i = 0;i<8;i++)
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	9e 83       	std	Y+6, r25	; 0x06
    287c:	8d 83       	std	Y+5, r24	; 0x05
    287e:	8d 81       	ldd	r24, Y+5	; 0x05
    2880:	9e 81       	ldd	r25, Y+6	; 0x06
    2882:	88 30       	cpi	r24, 0x08	; 8
    2884:	91 05       	cpc	r25, r1
    2886:	5c f3       	brlt	.-42     	; 0x285e <LCD_character+0x142>
			{
				LCD_send_data(faa[i]);
			}
			char_loc = 3;
    2888:	83 e0       	ldi	r24, 0x03	; 3
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	9e 87       	std	Y+14, r25	; 0x0e
    288e:	8d 87       	std	Y+13, r24	; 0x0d
    2890:	3f c0       	rjmp	.+126    	; 0x2910 <LCD_character+0x1f4>
			break;
		case 'h':
			LCD_send_command(96);
    2892:	80 e6       	ldi	r24, 0x60	; 96
    2894:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    2898:	1c 82       	std	Y+4, r1	; 0x04
    289a:	1b 82       	std	Y+3, r1	; 0x03
    289c:	10 c0       	rjmp	.+32     	; 0x28be <LCD_character+0x1a2>
			{
				LCD_send_data(heart[i]);
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	9c 81       	ldd	r25, Y+4	; 0x04
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	fc 01       	movw	r30, r24
    28a8:	e2 56       	subi	r30, 0x62	; 98
    28aa:	fe 4f       	sbci	r31, 0xFE	; 254
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
			}
			char_loc = 3;
			break;
		case 'h':
			LCD_send_command(96);
			for(int i = 0;i<8;i++)
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	9c 81       	ldd	r25, Y+4	; 0x04
    28b8:	01 96       	adiw	r24, 0x01	; 1
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	88 30       	cpi	r24, 0x08	; 8
    28c4:	91 05       	cpc	r25, r1
    28c6:	5c f3       	brlt	.-42     	; 0x289e <LCD_character+0x182>
			{
				LCD_send_data(heart[i]);
			}
			char_loc = 4;
    28c8:	84 e0       	ldi	r24, 0x04	; 4
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9e 87       	std	Y+14, r25	; 0x0e
    28ce:	8d 87       	std	Y+13, r24	; 0x0d
    28d0:	1f c0       	rjmp	.+62     	; 0x2910 <LCD_character+0x1f4>
			break;
		case 'p':
			LCD_send_command(104);
    28d2:	88 e6       	ldi	r24, 0x68	; 104
    28d4:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    28d8:	1a 82       	std	Y+2, r1	; 0x02
    28da:	19 82       	std	Y+1, r1	; 0x01
    28dc:	10 c0       	rjmp	.+32     	; 0x28fe <LCD_character+0x1e2>
			{
				LCD_send_data(plane[i]);
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	fc 01       	movw	r30, r24
    28e8:	e2 57       	subi	r30, 0x72	; 114
    28ea:	fe 4f       	sbci	r31, 0xFE	; 254
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
			}
			char_loc = 4;
			break;
		case 'p':
			LCD_send_command(104);
			for(int i = 0;i<8;i++)
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	01 96       	adiw	r24, 0x01	; 1
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	88 30       	cpi	r24, 0x08	; 8
    2904:	91 05       	cpc	r25, r1
    2906:	5c f3       	brlt	.-42     	; 0x28de <LCD_character+0x1c2>
			{
				LCD_send_data(plane[i]);
			}
			char_loc = 5;
    2908:	85 e0       	ldi	r24, 0x05	; 5
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	9e 87       	std	Y+14, r25	; 0x0e
    290e:	8d 87       	std	Y+13, r24	; 0x0d
			break;
	}
	LCD_goto_col_row(coulmn,row);
    2910:	88 89       	ldd	r24, Y+16	; 0x10
    2912:	69 89       	ldd	r22, Y+17	; 0x11
    2914:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
	LCD_send_data(char_loc);
    2918:	8d 85       	ldd	r24, Y+13	; 0x0d
    291a:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
	//LCD_goto_col_row(0,0);  // Location of LCD where the character is to be displayed
	//LCD_send_data(0);  // Displaying the character created at address 0x64
}
    291e:	63 96       	adiw	r28, 0x13	; 19
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <reset_LCD_character>:
void reset_LCD_character(u8 chr)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	61 97       	sbiw	r28, 0x11	; 17
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	8f 87       	std	Y+15, r24	; 0x0f
	switch (chr)
    2946:	8f 85       	ldd	r24, Y+15	; 0x0f
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	39 8b       	std	Y+17, r19	; 0x11
    294e:	28 8b       	std	Y+16, r18	; 0x10
    2950:	88 89       	ldd	r24, Y+16	; 0x10
    2952:	99 89       	ldd	r25, Y+17	; 0x11
    2954:	80 37       	cpi	r24, 0x70	; 112
    2956:	91 05       	cpc	r25, r1
    2958:	09 f4       	brne	.+2      	; 0x295c <reset_LCD_character+0x2c>
    295a:	8c c0       	rjmp	.+280    	; 0x2a74 <reset_LCD_character+0x144>
    295c:	28 89       	ldd	r18, Y+16	; 0x10
    295e:	39 89       	ldd	r19, Y+17	; 0x11
    2960:	21 37       	cpi	r18, 0x71	; 113
    2962:	31 05       	cpc	r19, r1
    2964:	9c f4       	brge	.+38     	; 0x298c <reset_LCD_character+0x5c>
    2966:	88 89       	ldd	r24, Y+16	; 0x10
    2968:	99 89       	ldd	r25, Y+17	; 0x11
    296a:	86 36       	cpi	r24, 0x66	; 102
    296c:	91 05       	cpc	r25, r1
    296e:	09 f4       	brne	.+2      	; 0x2972 <reset_LCD_character+0x42>
    2970:	59 c0       	rjmp	.+178    	; 0x2a24 <reset_LCD_character+0xf4>
    2972:	28 89       	ldd	r18, Y+16	; 0x10
    2974:	39 89       	ldd	r19, Y+17	; 0x11
    2976:	28 36       	cpi	r18, 0x68	; 104
    2978:	31 05       	cpc	r19, r1
    297a:	09 f4       	brne	.+2      	; 0x297e <reset_LCD_character+0x4e>
    297c:	67 c0       	rjmp	.+206    	; 0x2a4c <reset_LCD_character+0x11c>
    297e:	88 89       	ldd	r24, Y+16	; 0x10
    2980:	99 89       	ldd	r25, Y+17	; 0x11
    2982:	84 36       	cpi	r24, 0x64	; 100
    2984:	91 05       	cpc	r25, r1
    2986:	09 f4       	brne	.+2      	; 0x298a <reset_LCD_character+0x5a>
    2988:	89 c0       	rjmp	.+274    	; 0x2a9c <reset_LCD_character+0x16c>
    298a:	9b c0       	rjmp	.+310    	; 0x2ac2 <reset_LCD_character+0x192>
    298c:	28 89       	ldd	r18, Y+16	; 0x10
    298e:	39 89       	ldd	r19, Y+17	; 0x11
    2990:	27 37       	cpi	r18, 0x77	; 119
    2992:	31 05       	cpc	r19, r1
    2994:	f9 f0       	breq	.+62     	; 0x29d4 <reset_LCD_character+0xa4>
    2996:	88 89       	ldd	r24, Y+16	; 0x10
    2998:	99 89       	ldd	r25, Y+17	; 0x11
    299a:	89 37       	cpi	r24, 0x79	; 121
    299c:	91 05       	cpc	r25, r1
    299e:	31 f0       	breq	.+12     	; 0x29ac <reset_LCD_character+0x7c>
    29a0:	28 89       	ldd	r18, Y+16	; 0x10
    29a2:	39 89       	ldd	r19, Y+17	; 0x11
    29a4:	23 37       	cpi	r18, 0x73	; 115
    29a6:	31 05       	cpc	r19, r1
    29a8:	49 f1       	breq	.+82     	; 0x29fc <reset_LCD_character+0xcc>
    29aa:	8b c0       	rjmp	.+278    	; 0x2ac2 <reset_LCD_character+0x192>
	{

		case 'y':
			LCD_send_command(64);
    29ac:	80 e4       	ldi	r24, 0x40	; 64
    29ae:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    29b2:	1e 86       	std	Y+14, r1	; 0x0e
    29b4:	1d 86       	std	Y+13, r1	; 0x0d
    29b6:	08 c0       	rjmp	.+16     	; 0x29c8 <reset_LCD_character+0x98>
			{
				LCD_send_data(0);
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
	switch (chr)
	{

		case 'y':
			LCD_send_command(64);
			for(int i = 0;i<8;i++)
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	9e 87       	std	Y+14, r25	; 0x0e
    29c6:	8d 87       	std	Y+13, r24	; 0x0d
    29c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    29cc:	88 30       	cpi	r24, 0x08	; 8
    29ce:	91 05       	cpc	r25, r1
    29d0:	9c f3       	brlt	.-26     	; 0x29b8 <reset_LCD_character+0x88>
    29d2:	77 c0       	rjmp	.+238    	; 0x2ac2 <reset_LCD_character+0x192>
			{
				LCD_send_data(0);
			}
			break;
		case 'w':
			LCD_send_command(72);
    29d4:	88 e4       	ldi	r24, 0x48	; 72
    29d6:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    29da:	1c 86       	std	Y+12, r1	; 0x0c
    29dc:	1b 86       	std	Y+11, r1	; 0x0b
    29de:	08 c0       	rjmp	.+16     	; 0x29f0 <reset_LCD_character+0xc0>
			{
				LCD_send_data(0);
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
				LCD_send_data(0);
			}
			break;
		case 'w':
			LCD_send_command(72);
			for(int i = 0;i<8;i++)
    29e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    29e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	9c 87       	std	Y+12, r25	; 0x0c
    29ee:	8b 87       	std	Y+11, r24	; 0x0b
    29f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    29f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    29f4:	88 30       	cpi	r24, 0x08	; 8
    29f6:	91 05       	cpc	r25, r1
    29f8:	9c f3       	brlt	.-26     	; 0x29e0 <reset_LCD_character+0xb0>
    29fa:	63 c0       	rjmp	.+198    	; 0x2ac2 <reset_LCD_character+0x192>
			{
				LCD_send_data(0);
			}
			break;
		case 's':
			LCD_send_command(80);
    29fc:	80 e5       	ldi	r24, 0x50	; 80
    29fe:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    2a02:	1a 86       	std	Y+10, r1	; 0x0a
    2a04:	19 86       	std	Y+9, r1	; 0x09
    2a06:	08 c0       	rjmp	.+16     	; 0x2a18 <reset_LCD_character+0xe8>
			{
				LCD_send_data(0);
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
				LCD_send_data(0);
			}
			break;
		case 's':
			LCD_send_command(80);
			for(int i = 0;i<8;i++)
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	01 96       	adiw	r24, 0x01	; 1
    2a14:	9a 87       	std	Y+10, r25	; 0x0a
    2a16:	89 87       	std	Y+9, r24	; 0x09
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	88 30       	cpi	r24, 0x08	; 8
    2a1e:	91 05       	cpc	r25, r1
    2a20:	9c f3       	brlt	.-26     	; 0x2a08 <reset_LCD_character+0xd8>
    2a22:	4f c0       	rjmp	.+158    	; 0x2ac2 <reset_LCD_character+0x192>
			{
				LCD_send_data(0);
			}
			break;
		case 'f':
			LCD_send_command(88);
    2a24:	88 e5       	ldi	r24, 0x58	; 88
    2a26:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    2a2a:	18 86       	std	Y+8, r1	; 0x08
    2a2c:	1f 82       	std	Y+7, r1	; 0x07
    2a2e:	08 c0       	rjmp	.+16     	; 0x2a40 <reset_LCD_character+0x110>
			{
				LCD_send_data(0);
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
				LCD_send_data(0);
			}
			break;
		case 'f':
			LCD_send_command(88);
			for(int i = 0;i<8;i++)
    2a36:	8f 81       	ldd	r24, Y+7	; 0x07
    2a38:	98 85       	ldd	r25, Y+8	; 0x08
    2a3a:	01 96       	adiw	r24, 0x01	; 1
    2a3c:	98 87       	std	Y+8, r25	; 0x08
    2a3e:	8f 83       	std	Y+7, r24	; 0x07
    2a40:	8f 81       	ldd	r24, Y+7	; 0x07
    2a42:	98 85       	ldd	r25, Y+8	; 0x08
    2a44:	88 30       	cpi	r24, 0x08	; 8
    2a46:	91 05       	cpc	r25, r1
    2a48:	9c f3       	brlt	.-26     	; 0x2a30 <reset_LCD_character+0x100>
    2a4a:	3b c0       	rjmp	.+118    	; 0x2ac2 <reset_LCD_character+0x192>
			{
				LCD_send_data(0);
			}
			break;
		case 'h':
			LCD_send_command(96);
    2a4c:	80 e6       	ldi	r24, 0x60	; 96
    2a4e:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    2a52:	1e 82       	std	Y+6, r1	; 0x06
    2a54:	1d 82       	std	Y+5, r1	; 0x05
    2a56:	08 c0       	rjmp	.+16     	; 0x2a68 <reset_LCD_character+0x138>
			{
				LCD_send_data(0);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
				LCD_send_data(0);
			}
			break;
		case 'h':
			LCD_send_command(96);
			for(int i = 0;i<8;i++)
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	9e 81       	ldd	r25, Y+6	; 0x06
    2a62:	01 96       	adiw	r24, 0x01	; 1
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6c:	88 30       	cpi	r24, 0x08	; 8
    2a6e:	91 05       	cpc	r25, r1
    2a70:	9c f3       	brlt	.-26     	; 0x2a58 <reset_LCD_character+0x128>
    2a72:	27 c0       	rjmp	.+78     	; 0x2ac2 <reset_LCD_character+0x192>
			{
				LCD_send_data(0);
			}
			break;
		case 'p':
			LCD_send_command(104);
    2a74:	88 e6       	ldi	r24, 0x68	; 104
    2a76:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    2a7a:	1c 82       	std	Y+4, r1	; 0x04
    2a7c:	1b 82       	std	Y+3, r1	; 0x03
    2a7e:	08 c0       	rjmp	.+16     	; 0x2a90 <reset_LCD_character+0x160>
			{
				LCD_send_data(0);
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
				LCD_send_data(0);
			}
			break;
		case 'p':
			LCD_send_command(104);
			for(int i = 0;i<8;i++)
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8a:	01 96       	adiw	r24, 0x01	; 1
    2a8c:	9c 83       	std	Y+4, r25	; 0x04
    2a8e:	8b 83       	std	Y+3, r24	; 0x03
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	9c 81       	ldd	r25, Y+4	; 0x04
    2a94:	88 30       	cpi	r24, 0x08	; 8
    2a96:	91 05       	cpc	r25, r1
    2a98:	9c f3       	brlt	.-26     	; 0x2a80 <reset_LCD_character+0x150>
    2a9a:	13 c0       	rjmp	.+38     	; 0x2ac2 <reset_LCD_character+0x192>
			{
				LCD_send_data(0);
			}
			break;
		case 'd':
			LCD_send_command(120);
    2a9c:	88 e7       	ldi	r24, 0x78	; 120
    2a9e:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
			for(int i = 0;i<8;i++)
    2aa2:	1a 82       	std	Y+2, r1	; 0x02
    2aa4:	19 82       	std	Y+1, r1	; 0x01
    2aa6:	08 c0       	rjmp	.+16     	; 0x2ab8 <reset_LCD_character+0x188>
			{
				LCD_send_data(0);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
				LCD_send_data(0);
			}
			break;
		case 'd':
			LCD_send_command(120);
			for(int i = 0;i<8;i++)
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab2:	01 96       	adiw	r24, 0x01	; 1
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	88 30       	cpi	r24, 0x08	; 8
    2abe:	91 05       	cpc	r25, r1
    2ac0:	9c f3       	brlt	.-26     	; 0x2aa8 <reset_LCD_character+0x178>
			{
				LCD_send_data(0);
			}
			break;
	}
}
    2ac2:	61 96       	adiw	r28, 0x11	; 17
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	08 95       	ret

00002ad4 <reset_LCD_position>:
void reset_LCD_position(u8 coulmn,u8 row)
{
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	00 d0       	rcall	.+0      	; 0x2ada <reset_LCD_position+0x6>
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <reset_LCD_position+0x8>
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	8b 83       	std	Y+3, r24	; 0x03
    2ae2:	6c 83       	std	Y+4, r22	; 0x04
	LCD_send_command(112);
    2ae4:	80 e7       	ldi	r24, 0x70	; 112
    2ae6:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
	for(int i = 0;i<8;i++)
    2aea:	1a 82       	std	Y+2, r1	; 0x02
    2aec:	19 82       	std	Y+1, r1	; 0x01
    2aee:	08 c0       	rjmp	.+16     	; 0x2b00 <reset_LCD_position+0x2c>
	{
		LCD_send_data(0);
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
	}
}
void reset_LCD_position(u8 coulmn,u8 row)
{
	LCD_send_command(112);
	for(int i = 0;i<8;i++)
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	9a 83       	std	Y+2, r25	; 0x02
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	9a 81       	ldd	r25, Y+2	; 0x02
    2b04:	88 30       	cpi	r24, 0x08	; 8
    2b06:	91 05       	cpc	r25, r1
    2b08:	9c f3       	brlt	.-26     	; 0x2af0 <reset_LCD_position+0x1c>
	{
		LCD_send_data(0);
	}
	LCD_goto_col_row(coulmn,row);
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	6c 81       	ldd	r22, Y+4	; 0x04
    2b0e:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
	LCD_send_data(6);
    2b12:	86 e0       	ldi	r24, 0x06	; 6
    2b14:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
}
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <fill_LCD_position>:
void fill_LCD_position(u8 coulmn,u8 row)
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <fill_LCD_position+0x6>
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <fill_LCD_position+0x8>
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	6c 83       	std	Y+4, r22	; 0x04
	LCD_send_command(120);
    2b36:	88 e7       	ldi	r24, 0x78	; 120
    2b38:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
	for(int i = 0;i<8;i++)
    2b3c:	1a 82       	std	Y+2, r1	; 0x02
    2b3e:	19 82       	std	Y+1, r1	; 0x01
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <fill_LCD_position+0x2c>
	{
		LCD_send_data(0x1f);
    2b42:	8f e1       	ldi	r24, 0x1F	; 31
    2b44:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
	LCD_send_data(6);
}
void fill_LCD_position(u8 coulmn,u8 row)
{
	LCD_send_command(120);
	for(int i = 0;i<8;i++)
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4c:	01 96       	adiw	r24, 0x01	; 1
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	9a 81       	ldd	r25, Y+2	; 0x02
    2b56:	88 30       	cpi	r24, 0x08	; 8
    2b58:	91 05       	cpc	r25, r1
    2b5a:	9c f3       	brlt	.-26     	; 0x2b42 <fill_LCD_position+0x1c>
	{
		LCD_send_data(0x1f);
	}
	LCD_goto_col_row(coulmn,row);
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	6c 81       	ldd	r22, Y+4	; 0x04
    2b60:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
	LCD_send_data(7);
    2b64:	87 e0       	ldi	r24, 0x07	; 7
    2b66:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
}
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <LCD_Clear>:
void LCD_Clear() {
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
	LCD_send_command(LCD_CLEAR);
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	0e 94 4e 11 	call	0x229c	; 0x229c <LCD_send_command>
}
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <keyPad_init>:
		{'4','5','6','B'},
		{'7','8','9','C'},
		{'*','0','#','d'}
};
void keyPad_init()
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62

	DIO_set_port_dir(KEYPAD_GROUP,0x0f);
    2b94:	83 e0       	ldi	r24, 0x03	; 3
    2b96:	6f e0       	ldi	r22, 0x0F	; 15
    2b98:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_set_port_dir>
	// 4 pins input
	DIO_set_port(KEYPAD_GROUP,0xff);
    2b9c:	83 e0       	ldi	r24, 0x03	; 3
    2b9e:	6f ef       	ldi	r22, 0xFF	; 255
    2ba0:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_set_port>

}
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <KeyPad_get_pressed_key>:
u8 KeyPad_get_pressed_key()
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	62 97       	sbiw	r28, 0x12	; 18
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
u8 cols_num = 0;
    2bbe:	19 8a       	std	Y+17, r1	; 0x11
u8 Rows_num = 0;
    2bc0:	18 8a       	std	Y+16, r1	; 0x10
u8 retNum = 0xff;
    2bc2:	8f ef       	ldi	r24, 0xFF	; 255
    2bc4:	8f 87       	std	Y+15, r24	; 0x0f

for (cols_num = 0; cols_num < 4 ; cols_num++)
    2bc6:	19 8a       	std	Y+17, r1	; 0x11
    2bc8:	b9 c0       	rjmp	.+370    	; 0x2d3c <KeyPad_get_pressed_key+0x192>
{
	DIO_set_port(KEYPAD_GROUP,~(0b00000001 <<cols_num));
    2bca:	89 89       	ldd	r24, Y+17	; 0x11
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <KeyPad_get_pressed_key+0x30>
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	2a 95       	dec	r18
    2bdc:	e2 f7       	brpl	.-8      	; 0x2bd6 <KeyPad_get_pressed_key+0x2c>
    2bde:	98 2f       	mov	r25, r24
    2be0:	90 95       	com	r25
    2be2:	83 e0       	ldi	r24, 0x03	; 3
    2be4:	69 2f       	mov	r22, r25
    2be6:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_set_port>
	for(Rows_num = 4 ; Rows_num < 8 ; Rows_num++ )
    2bea:	84 e0       	ldi	r24, 0x04	; 4
    2bec:	88 8b       	std	Y+16, r24	; 0x10
    2bee:	9f c0       	rjmp	.+318    	; 0x2d2e <KeyPad_get_pressed_key+0x184>
	{
		if(DIO_get_pin(KEYPAD_GROUP,Rows_num) == 0)
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	68 89       	ldd	r22, Y+16	; 0x10
    2bf4:	0e 94 41 0b 	call	0x1682	; 0x1682 <DIO_get_pin>
    2bf8:	88 23       	and	r24, r24
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <KeyPad_get_pressed_key+0x54>
    2bfc:	95 c0       	rjmp	.+298    	; 0x2d28 <KeyPad_get_pressed_key+0x17e>
		{
			retNum = keypad_arr[Rows_num-4][cols_num];
    2bfe:	88 89       	ldd	r24, Y+16	; 0x10
    2c00:	88 2f       	mov	r24, r24
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	ac 01       	movw	r20, r24
    2c06:	44 50       	subi	r20, 0x04	; 4
    2c08:	50 40       	sbci	r21, 0x00	; 0
    2c0a:	89 89       	ldd	r24, Y+17	; 0x11
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	ca 01       	movw	r24, r20
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	82 0f       	add	r24, r18
    2c1c:	93 1f       	adc	r25, r19
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e0 55       	subi	r30, 0x50	; 80
    2c22:	fe 4f       	sbci	r31, 0xFE	; 254
    2c24:	80 81       	ld	r24, Z
    2c26:	8f 87       	std	Y+15, r24	; 0x0f
			while(DIO_get_pin(KEYPAD_GROUP,Rows_num) == 0);
    2c28:	83 e0       	ldi	r24, 0x03	; 3
    2c2a:	68 89       	ldd	r22, Y+16	; 0x10
    2c2c:	0e 94 41 0b 	call	0x1682	; 0x1682 <DIO_get_pin>
    2c30:	88 23       	and	r24, r24
    2c32:	d1 f3       	breq	.-12     	; 0x2c28 <KeyPad_get_pressed_key+0x7e>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	a0 e2       	ldi	r26, 0x20	; 32
    2c3a:	b1 e4       	ldi	r27, 0x41	; 65
    2c3c:	8b 87       	std	Y+11, r24	; 0x0b
    2c3e:	9c 87       	std	Y+12, r25	; 0x0c
    2c40:	ad 87       	std	Y+13, r26	; 0x0d
    2c42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a ef       	ldi	r20, 0xFA	; 250
    2c52:	54 e4       	ldi	r21, 0x44	; 68
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8f 83       	std	Y+7, r24	; 0x07
    2c5e:	98 87       	std	Y+8, r25	; 0x08
    2c60:	a9 87       	std	Y+9, r26	; 0x09
    2c62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c64:	6f 81       	ldd	r22, Y+7	; 0x07
    2c66:	78 85       	ldd	r23, Y+8	; 0x08
    2c68:	89 85       	ldd	r24, Y+9	; 0x09
    2c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e8       	ldi	r20, 0x80	; 128
    2c72:	5f e3       	ldi	r21, 0x3F	; 63
    2c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c78:	88 23       	and	r24, r24
    2c7a:	2c f4       	brge	.+10     	; 0x2c86 <KeyPad_get_pressed_key+0xdc>
		__ticks = 1;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	3f c0       	rjmp	.+126    	; 0x2d04 <KeyPad_get_pressed_key+0x15a>
	else if (__tmp > 65535)
    2c86:	6f 81       	ldd	r22, Y+7	; 0x07
    2c88:	78 85       	ldd	r23, Y+8	; 0x08
    2c8a:	89 85       	ldd	r24, Y+9	; 0x09
    2c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	4f e7       	ldi	r20, 0x7F	; 127
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c9a:	18 16       	cp	r1, r24
    2c9c:	4c f5       	brge	.+82     	; 0x2cf0 <KeyPad_get_pressed_key+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	51 e4       	ldi	r21, 0x41	; 65
    2cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <KeyPad_get_pressed_key+0x13c>
    2cc8:	88 ec       	ldi	r24, 0xC8	; 200
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <KeyPad_get_pressed_key+0x12a>
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	69 f7       	brne	.-38     	; 0x2cc8 <KeyPad_get_pressed_key+0x11e>
    2cee:	14 c0       	rjmp	.+40     	; 0x2d18 <KeyPad_get_pressed_key+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	8d 81       	ldd	r24, Y+5	; 0x05
    2d06:	9e 81       	ldd	r25, Y+6	; 0x06
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <KeyPad_get_pressed_key+0x166>
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			DIO_set_pin(KEYPAD_GROUP,cols_num,HIGH);
    2d18:	83 e0       	ldi	r24, 0x03	; 3
    2d1a:	69 89       	ldd	r22, Y+17	; 0x11
    2d1c:	41 e0       	ldi	r20, 0x01	; 1
    2d1e:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
			return retNum;
    2d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d24:	8a 8b       	std	Y+18, r24	; 0x12
    2d26:	10 c0       	rjmp	.+32     	; 0x2d48 <KeyPad_get_pressed_key+0x19e>
u8 retNum = 0xff;

for (cols_num = 0; cols_num < 4 ; cols_num++)
{
	DIO_set_port(KEYPAD_GROUP,~(0b00000001 <<cols_num));
	for(Rows_num = 4 ; Rows_num < 8 ; Rows_num++ )
    2d28:	88 89       	ldd	r24, Y+16	; 0x10
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	88 8b       	std	Y+16, r24	; 0x10
    2d2e:	88 89       	ldd	r24, Y+16	; 0x10
    2d30:	88 30       	cpi	r24, 0x08	; 8
    2d32:	08 f4       	brcc	.+2      	; 0x2d36 <KeyPad_get_pressed_key+0x18c>
    2d34:	5d cf       	rjmp	.-326    	; 0x2bf0 <KeyPad_get_pressed_key+0x46>
{
u8 cols_num = 0;
u8 Rows_num = 0;
u8 retNum = 0xff;

for (cols_num = 0; cols_num < 4 ; cols_num++)
    2d36:	89 89       	ldd	r24, Y+17	; 0x11
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
    2d3a:	89 8b       	std	Y+17, r24	; 0x11
    2d3c:	89 89       	ldd	r24, Y+17	; 0x11
    2d3e:	84 30       	cpi	r24, 0x04	; 4
    2d40:	08 f4       	brcc	.+2      	; 0x2d44 <KeyPad_get_pressed_key+0x19a>
    2d42:	43 cf       	rjmp	.-378    	; 0x2bca <KeyPad_get_pressed_key+0x20>
			return retNum;

		}
	}
}
return retNum;
    2d44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d46:	8a 8b       	std	Y+18, r24	; 0x12
    2d48:	8a 89       	ldd	r24, Y+18	; 0x12

}
    2d4a:	62 96       	adiw	r28, 0x12	; 18
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <KeyPad_Set_Username>:

u8 KeyPad_Set_Username(u8 key)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	62 97       	sbiw	r28, 0x12	; 18
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	8b 87       	std	Y+11, r24	; 0x0b
	static u8 count = 0;
	u8 UserName[] = "123AB";
    2d72:	ce 01       	movw	r24, r28
    2d74:	05 96       	adiw	r24, 0x05	; 5
    2d76:	9f 87       	std	Y+15, r25	; 0x0f
    2d78:	8e 87       	std	Y+14, r24	; 0x0e
    2d7a:	ec e8       	ldi	r30, 0x8C	; 140
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	f9 8b       	std	Y+17, r31	; 0x11
    2d80:	e8 8b       	std	Y+16, r30	; 0x10
    2d82:	f6 e0       	ldi	r31, 0x06	; 6
    2d84:	fa 8b       	std	Y+18, r31	; 0x12
    2d86:	e8 89       	ldd	r30, Y+16	; 0x10
    2d88:	f9 89       	ldd	r31, Y+17	; 0x11
    2d8a:	00 80       	ld	r0, Z
    2d8c:	88 89       	ldd	r24, Y+16	; 0x10
    2d8e:	99 89       	ldd	r25, Y+17	; 0x11
    2d90:	01 96       	adiw	r24, 0x01	; 1
    2d92:	99 8b       	std	Y+17, r25	; 0x11
    2d94:	88 8b       	std	Y+16, r24	; 0x10
    2d96:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d98:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d9a:	00 82       	st	Z, r0
    2d9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	9f 87       	std	Y+15, r25	; 0x0f
    2da4:	8e 87       	std	Y+14, r24	; 0x0e
    2da6:	9a 89       	ldd	r25, Y+18	; 0x12
    2da8:	91 50       	subi	r25, 0x01	; 1
    2daa:	9a 8b       	std	Y+18, r25	; 0x12
    2dac:	ea 89       	ldd	r30, Y+18	; 0x12
    2dae:	ee 23       	and	r30, r30
    2db0:	51 f7       	brne	.-44     	; 0x2d86 <KeyPad_Set_Username+0x2a>

	if(key != 0xff)
    2db2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2db4:	8f 3f       	cpi	r24, 0xFF	; 255
    2db6:	09 f4       	brne	.+2      	; 0x2dba <KeyPad_Set_Username+0x5e>
    2db8:	26 c1       	rjmp	.+588    	; 0x3006 <KeyPad_Set_Username+0x2aa>
	{
		if(key == 'd')
    2dba:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dbc:	84 36       	cpi	r24, 0x64	; 100
    2dbe:	09 f0       	breq	.+2      	; 0x2dc2 <KeyPad_Set_Username+0x66>
    2dc0:	3f c0       	rjmp	.+126    	; 0x2e40 <KeyPad_Set_Username+0xe4>
		{
			InputUserName[keybad_col-10] = '\0';
    2dc2:	80 91 ae 01 	lds	r24, 0x01AE
    2dc6:	90 91 af 01 	lds	r25, 0x01AF
    2dca:	0a 97       	sbiw	r24, 0x0a	; 10
    2dcc:	fc 01       	movw	r30, r24
    2dce:	eb 52       	subi	r30, 0x2B	; 43
    2dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd2:	10 82       	st	Z, r1

			if(keybad_col>=10)
    2dd4:	80 91 ae 01 	lds	r24, 0x01AE
    2dd8:	90 91 af 01 	lds	r25, 0x01AF
    2ddc:	8a 30       	cpi	r24, 0x0A	; 10
    2dde:	91 05       	cpc	r25, r1
    2de0:	64 f1       	brlt	.+88     	; 0x2e3a <KeyPad_Set_Username+0xde>
			{
				reset_LCD_position(keybad_col,keybad_row);
    2de2:	80 91 ae 01 	lds	r24, 0x01AE
    2de6:	90 91 af 01 	lds	r25, 0x01AF
    2dea:	28 2f       	mov	r18, r24
    2dec:	80 91 cc 01 	lds	r24, 0x01CC
    2df0:	90 91 cd 01 	lds	r25, 0x01CD
    2df4:	98 2f       	mov	r25, r24
    2df6:	82 2f       	mov	r24, r18
    2df8:	69 2f       	mov	r22, r25
    2dfa:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <reset_LCD_position>
				LCD_goto_col_row(keybad_col,keybad_row);
    2dfe:	80 91 ae 01 	lds	r24, 0x01AE
    2e02:	90 91 af 01 	lds	r25, 0x01AF
    2e06:	28 2f       	mov	r18, r24
    2e08:	80 91 cc 01 	lds	r24, 0x01CC
    2e0c:	90 91 cd 01 	lds	r25, 0x01CD
    2e10:	98 2f       	mov	r25, r24
    2e12:	82 2f       	mov	r24, r18
    2e14:	69 2f       	mov	r22, r25
    2e16:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
				if(keybad_col>10)
    2e1a:	80 91 ae 01 	lds	r24, 0x01AE
    2e1e:	90 91 af 01 	lds	r25, 0x01AF
    2e22:	8b 30       	cpi	r24, 0x0B	; 11
    2e24:	91 05       	cpc	r25, r1
    2e26:	4c f0       	brlt	.+18     	; 0x2e3a <KeyPad_Set_Username+0xde>
				{
					keybad_col--;
    2e28:	80 91 ae 01 	lds	r24, 0x01AE
    2e2c:	90 91 af 01 	lds	r25, 0x01AF
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	90 93 af 01 	sts	0x01AF, r25
    2e36:	80 93 ae 01 	sts	0x01AE, r24
				}

			}
			return 2;
    2e3a:	f2 e0       	ldi	r31, 0x02	; 2
    2e3c:	fc 87       	std	Y+12, r31	; 0x0c
    2e3e:	e4 c0       	rjmp	.+456    	; 0x3008 <KeyPad_Set_Username+0x2ac>
		}
		else if(key == 'C')
    2e40:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e42:	83 34       	cpi	r24, 0x43	; 67
    2e44:	09 f0       	breq	.+2      	; 0x2e48 <KeyPad_Set_Username+0xec>
    2e46:	b1 c0       	rjmp	.+354    	; 0x2faa <KeyPad_Set_Username+0x24e>
		{
			u8 bool = 0;
    2e48:	1c 82       	std	Y+4, r1	; 0x04
			for(int i = 0;i<5;i++)
    2e4a:	1b 82       	std	Y+3, r1	; 0x03
    2e4c:	1a 82       	std	Y+2, r1	; 0x02
    2e4e:	97 c0       	rjmp	.+302    	; 0x2f7e <KeyPad_Set_Username+0x222>
			{
				if(UserName[i] != InputUserName[i])
    2e50:	2a 81       	ldd	r18, Y+2	; 0x02
    2e52:	3b 81       	ldd	r19, Y+3	; 0x03
    2e54:	ce 01       	movw	r24, r28
    2e56:	05 96       	adiw	r24, 0x05	; 5
    2e58:	fc 01       	movw	r30, r24
    2e5a:	e2 0f       	add	r30, r18
    2e5c:	f3 1f       	adc	r31, r19
    2e5e:	20 81       	ld	r18, Z
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	9b 81       	ldd	r25, Y+3	; 0x03
    2e64:	fc 01       	movw	r30, r24
    2e66:	eb 52       	subi	r30, 0x2B	; 43
    2e68:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6a:	80 81       	ld	r24, Z
    2e6c:	28 17       	cp	r18, r24
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <KeyPad_Set_Username+0x116>
    2e70:	81 c0       	rjmp	.+258    	; 0x2f74 <KeyPad_Set_Username+0x218>
				{
					count++;
    2e72:	80 91 ce 01 	lds	r24, 0x01CE
    2e76:	8f 5f       	subi	r24, 0xFF	; 255
    2e78:	80 93 ce 01 	sts	0x01CE, r24
					if(count>3)
    2e7c:	80 91 ce 01 	lds	r24, 0x01CE
    2e80:	84 30       	cpi	r24, 0x04	; 4
    2e82:	08 f4       	brcc	.+2      	; 0x2e86 <KeyPad_Set_Username+0x12a>
    2e84:	56 c0       	rjmp	.+172    	; 0x2f32 <KeyPad_Set_Username+0x1d6>
					{
						while(1)
						{

							LCD_goto_col_row(0,0);
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	60 e0       	ldi	r22, 0x00	; 0
    2e8a:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
							LCD_send_string("Welcome Crimenal");
    2e8e:	80 e6       	ldi	r24, 0x60	; 96
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
							LCD_goto_col_row(0,1);
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	61 e0       	ldi	r22, 0x01	; 1
    2e9a:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
							LCD_send_string(":(");
    2e9e:	81 e7       	ldi	r24, 0x71	; 113
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
							DIO_set_pin(GROUPA,PIN_2,HIGH);
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	62 e0       	ldi	r22, 0x02	; 2
    2eaa:	41 e0       	ldi	r20, 0x01	; 1
    2eac:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
							DIO_set_pin(GROUPA,PIN_3,LOW);
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	63 e0       	ldi	r22, 0x03	; 3
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
							DIO_set_pin(GROUPB,PIN_4,HIGH);
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	64 e0       	ldi	r22, 0x04	; 4
    2ebe:	41 e0       	ldi	r20, 0x01	; 1
    2ec0:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
							DIO_set_pin(GROUPB,PIN_5,HIGH);
    2ec4:	82 e0       	ldi	r24, 0x02	; 2
    2ec6:	65 e0       	ldi	r22, 0x05	; 5
    2ec8:	41 e0       	ldi	r20, 0x01	; 1
    2eca:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
							DIO_set_pin(GROUPB,PIN_6,HIGH);
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	66 e0       	ldi	r22, 0x06	; 6
    2ed2:	41 e0       	ldi	r20, 0x01	; 1
    2ed4:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
							DIO_set_pin(GROUPB,PIN_7,HIGH);
    2ed8:	82 e0       	ldi	r24, 0x02	; 2
    2eda:	67 e0       	ldi	r22, 0x07	; 7
    2edc:	41 e0       	ldi	r20, 0x01	; 1
    2ede:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
							u8 key2 = KeyPad_get_pressed_key();
    2ee2:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    2ee6:	89 83       	std	Y+1, r24	; 0x01
							if(key2 =='5')
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	85 33       	cpi	r24, 0x35	; 53
    2eec:	61 f6       	brne	.-104    	; 0x2e86 <KeyPad_Set_Username+0x12a>
							{
								DIO_set_pin(GROUPB,PIN_4,LOW);
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	64 e0       	ldi	r22, 0x04	; 4
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPB,PIN_5,LOW);
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	65 e0       	ldi	r22, 0x05	; 5
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPB,PIN_6,LOW);
    2f02:	82 e0       	ldi	r24, 0x02	; 2
    2f04:	66 e0       	ldi	r22, 0x06	; 6
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPB,PIN_7,LOW);
    2f0c:	82 e0       	ldi	r24, 0x02	; 2
    2f0e:	67 e0       	ldi	r22, 0x07	; 7
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPA,PIN_2,LOW);
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	62 e0       	ldi	r22, 0x02	; 2
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPA,PIN_3,LOW);
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	63 e0       	ldi	r22, 0x03	; 3
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								LCD_Clear();
    2f2a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
								count =0;
    2f2e:	10 92 ce 01 	sts	0x01CE, r1
							}

						}

					}
					LCD_Clear();
    2f32:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
					LCD_goto_col_row(0,0);
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	60 e0       	ldi	r22, 0x00	; 0
    2f3a:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
					LCD_send_string("Wrong User Name");
    2f3e:	84 e7       	ldi	r24, 0x74	; 116
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
					LCD_goto_col_row(0,1);
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	61 e0       	ldi	r22, 0x01	; 1
    2f4a:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
					LCD_send_string("Click d");
    2f4e:	84 e8       	ldi	r24, 0x84	; 132
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
					while(KeyPad_get_pressed_key()!='d');
    2f56:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    2f5a:	84 36       	cpi	r24, 0x64	; 100
    2f5c:	e1 f7       	brne	.-8      	; 0x2f56 <KeyPad_Set_Username+0x1fa>
					LCD_Clear();
    2f5e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
					bool = 1;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	8c 83       	std	Y+4, r24	; 0x04
					keybad_col = 10;
    2f66:	8a e0       	ldi	r24, 0x0A	; 10
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	90 93 af 01 	sts	0x01AF, r25
    2f6e:	80 93 ae 01 	sts	0x01AE, r24
    2f72:	0b c0       	rjmp	.+22     	; 0x2f8a <KeyPad_Set_Username+0x22e>
			return 2;
		}
		else if(key == 'C')
		{
			u8 bool = 0;
			for(int i = 0;i<5;i++)
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	9b 81       	ldd	r25, Y+3	; 0x03
    2f78:	01 96       	adiw	r24, 0x01	; 1
    2f7a:	9b 83       	std	Y+3, r25	; 0x03
    2f7c:	8a 83       	std	Y+2, r24	; 0x02
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	9b 81       	ldd	r25, Y+3	; 0x03
    2f82:	85 30       	cpi	r24, 0x05	; 5
    2f84:	91 05       	cpc	r25, r1
    2f86:	0c f4       	brge	.+2      	; 0x2f8a <KeyPad_Set_Username+0x22e>
    2f88:	63 cf       	rjmp	.-314    	; 0x2e50 <KeyPad_Set_Username+0xf4>
					bool = 1;
					keybad_col = 10;
					break;
				}
			}
			if(bool == 0)
    2f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8c:	88 23       	and	r24, r24
    2f8e:	59 f4       	brne	.+22     	; 0x2fa6 <KeyPad_Set_Username+0x24a>
			{
				LCD_Clear();
    2f90:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
				keybad_col = 10;
    2f94:	8a e0       	ldi	r24, 0x0A	; 10
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	90 93 af 01 	sts	0x01AF, r25
    2f9c:	80 93 ae 01 	sts	0x01AE, r24
				return 1;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	8c 87       	std	Y+12, r24	; 0x0c
    2fa4:	31 c0       	rjmp	.+98     	; 0x3008 <KeyPad_Set_Username+0x2ac>
			}
			else
			{
				return 0;
    2fa6:	1c 86       	std	Y+12, r1	; 0x0c
    2fa8:	2f c0       	rjmp	.+94     	; 0x3008 <KeyPad_Set_Username+0x2ac>
			}

		}

		InputUserName[keybad_col-10] = key;
    2faa:	80 91 ae 01 	lds	r24, 0x01AE
    2fae:	90 91 af 01 	lds	r25, 0x01AF
    2fb2:	0a 97       	sbiw	r24, 0x0a	; 10
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	eb 52       	subi	r30, 0x2B	; 43
    2fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fba:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fbc:	80 83       	st	Z, r24
		LCD_goto_col_row(keybad_col,keybad_row);
    2fbe:	80 91 ae 01 	lds	r24, 0x01AE
    2fc2:	90 91 af 01 	lds	r25, 0x01AF
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	80 91 cc 01 	lds	r24, 0x01CC
    2fcc:	90 91 cd 01 	lds	r25, 0x01CD
    2fd0:	98 2f       	mov	r25, r24
    2fd2:	82 2f       	mov	r24, r18
    2fd4:	69 2f       	mov	r22, r25
    2fd6:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
		if(keybad_col<15 )
    2fda:	80 91 ae 01 	lds	r24, 0x01AE
    2fde:	90 91 af 01 	lds	r25, 0x01AF
    2fe2:	8f 30       	cpi	r24, 0x0F	; 15
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	4c f4       	brge	.+18     	; 0x2ffa <KeyPad_Set_Username+0x29e>
		{
			keybad_col++;
    2fe8:	80 91 ae 01 	lds	r24, 0x01AE
    2fec:	90 91 af 01 	lds	r25, 0x01AF
    2ff0:	01 96       	adiw	r24, 0x01	; 1
    2ff2:	90 93 af 01 	sts	0x01AF, r25
    2ff6:	80 93 ae 01 	sts	0x01AE, r24
		}
		LCD_send_data(key);
    2ffa:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ffc:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
		return 3;
    3000:	93 e0       	ldi	r25, 0x03	; 3
    3002:	9c 87       	std	Y+12, r25	; 0x0c
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <KeyPad_Set_Username+0x2ac>
    3006:	02 c0       	rjmp	.+4      	; 0x300c <KeyPad_Set_Username+0x2b0>

	}
}
    3008:	ec 85       	ldd	r30, Y+12	; 0x0c
    300a:	ed 87       	std	Y+13, r30	; 0x0d
    300c:	8d 85       	ldd	r24, Y+13	; 0x0d
    300e:	62 96       	adiw	r28, 0x12	; 18
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <KeyPad_Set_Password>:
u8 KeyPad_Set_Password(u8 key)
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	a0 97       	sbiw	r28, 0x20	; 32
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	89 8f       	std	Y+25, r24	; 0x19
	static u8 count =0;
	u8 Password[] = "2684A";
    3036:	ce 01       	movw	r24, r28
    3038:	43 96       	adiw	r24, 0x13	; 19
    303a:	9d 8f       	std	Y+29, r25	; 0x1d
    303c:	8c 8f       	std	Y+28, r24	; 0x1c
    303e:	e0 eb       	ldi	r30, 0xB0	; 176
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	ff 8f       	std	Y+31, r31	; 0x1f
    3044:	ee 8f       	std	Y+30, r30	; 0x1e
    3046:	f6 e0       	ldi	r31, 0x06	; 6
    3048:	f8 a3       	std	Y+32, r31	; 0x20
    304a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    304c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    304e:	00 80       	ld	r0, Z
    3050:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3052:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3054:	01 96       	adiw	r24, 0x01	; 1
    3056:	9f 8f       	std	Y+31, r25	; 0x1f
    3058:	8e 8f       	std	Y+30, r24	; 0x1e
    305a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    305c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    305e:	00 82       	st	Z, r0
    3060:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3062:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3064:	01 96       	adiw	r24, 0x01	; 1
    3066:	9d 8f       	std	Y+29, r25	; 0x1d
    3068:	8c 8f       	std	Y+28, r24	; 0x1c
    306a:	98 a1       	ldd	r25, Y+32	; 0x20
    306c:	91 50       	subi	r25, 0x01	; 1
    306e:	98 a3       	std	Y+32, r25	; 0x20
    3070:	e8 a1       	ldd	r30, Y+32	; 0x20
    3072:	ee 23       	and	r30, r30
    3074:	51 f7       	brne	.-44     	; 0x304a <KeyPad_Set_Password+0x2a>

		if(key != 0xff)
    3076:	89 8d       	ldd	r24, Y+25	; 0x19
    3078:	8f 3f       	cpi	r24, 0xFF	; 255
    307a:	09 f4       	brne	.+2      	; 0x307e <KeyPad_Set_Password+0x5e>
    307c:	9d c1       	rjmp	.+826    	; 0x33b8 <KeyPad_Set_Password+0x398>
		{
			if(key == 'd')
    307e:	89 8d       	ldd	r24, Y+25	; 0x19
    3080:	84 36       	cpi	r24, 0x64	; 100
    3082:	09 f0       	breq	.+2      	; 0x3086 <KeyPad_Set_Password+0x66>
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <KeyPad_Set_Password+0xe4>
			{
				InputPassword[keybad_col-10] = '\0';
    3086:	80 91 ae 01 	lds	r24, 0x01AE
    308a:	90 91 af 01 	lds	r25, 0x01AF
    308e:	0a 97       	sbiw	r24, 0x0a	; 10
    3090:	fc 01       	movw	r30, r24
    3092:	e0 53       	subi	r30, 0x30	; 48
    3094:	fe 4f       	sbci	r31, 0xFE	; 254
    3096:	10 82       	st	Z, r1

				if(keybad_col>=10)
    3098:	80 91 ae 01 	lds	r24, 0x01AE
    309c:	90 91 af 01 	lds	r25, 0x01AF
    30a0:	8a 30       	cpi	r24, 0x0A	; 10
    30a2:	91 05       	cpc	r25, r1
    30a4:	64 f1       	brlt	.+88     	; 0x30fe <KeyPad_Set_Password+0xde>
				{
					reset_LCD_position(keybad_col,keybad_row);
    30a6:	80 91 ae 01 	lds	r24, 0x01AE
    30aa:	90 91 af 01 	lds	r25, 0x01AF
    30ae:	28 2f       	mov	r18, r24
    30b0:	80 91 cc 01 	lds	r24, 0x01CC
    30b4:	90 91 cd 01 	lds	r25, 0x01CD
    30b8:	98 2f       	mov	r25, r24
    30ba:	82 2f       	mov	r24, r18
    30bc:	69 2f       	mov	r22, r25
    30be:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <reset_LCD_position>
					LCD_goto_col_row(keybad_col,keybad_row);
    30c2:	80 91 ae 01 	lds	r24, 0x01AE
    30c6:	90 91 af 01 	lds	r25, 0x01AF
    30ca:	28 2f       	mov	r18, r24
    30cc:	80 91 cc 01 	lds	r24, 0x01CC
    30d0:	90 91 cd 01 	lds	r25, 0x01CD
    30d4:	98 2f       	mov	r25, r24
    30d6:	82 2f       	mov	r24, r18
    30d8:	69 2f       	mov	r22, r25
    30da:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
					if(keybad_col>10)
    30de:	80 91 ae 01 	lds	r24, 0x01AE
    30e2:	90 91 af 01 	lds	r25, 0x01AF
    30e6:	8b 30       	cpi	r24, 0x0B	; 11
    30e8:	91 05       	cpc	r25, r1
    30ea:	4c f0       	brlt	.+18     	; 0x30fe <KeyPad_Set_Password+0xde>
					{
						keybad_col--;
    30ec:	80 91 ae 01 	lds	r24, 0x01AE
    30f0:	90 91 af 01 	lds	r25, 0x01AF
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	90 93 af 01 	sts	0x01AF, r25
    30fa:	80 93 ae 01 	sts	0x01AE, r24
					}

				}
				return 2;
    30fe:	f2 e0       	ldi	r31, 0x02	; 2
    3100:	fa 8f       	std	Y+26, r31	; 0x1a
    3102:	5b c1       	rjmp	.+694    	; 0x33ba <KeyPad_Set_Password+0x39a>
			}
			else if(key == 'C')
    3104:	89 8d       	ldd	r24, Y+25	; 0x19
    3106:	83 34       	cpi	r24, 0x43	; 67
    3108:	09 f0       	breq	.+2      	; 0x310c <KeyPad_Set_Password+0xec>
    310a:	28 c1       	rjmp	.+592    	; 0x335c <KeyPad_Set_Password+0x33c>
			{
				u8 bool = 0;
    310c:	1a 8a       	std	Y+18, r1	; 0x12
				for(int i = 0;i<5;i++)
    310e:	19 8a       	std	Y+17, r1	; 0x11
    3110:	18 8a       	std	Y+16, r1	; 0x10
    3112:	97 c0       	rjmp	.+302    	; 0x3242 <KeyPad_Set_Password+0x222>
				{
					if(Password[i] != InputPassword[i])
    3114:	28 89       	ldd	r18, Y+16	; 0x10
    3116:	39 89       	ldd	r19, Y+17	; 0x11
    3118:	ce 01       	movw	r24, r28
    311a:	43 96       	adiw	r24, 0x13	; 19
    311c:	fc 01       	movw	r30, r24
    311e:	e2 0f       	add	r30, r18
    3120:	f3 1f       	adc	r31, r19
    3122:	20 81       	ld	r18, Z
    3124:	88 89       	ldd	r24, Y+16	; 0x10
    3126:	99 89       	ldd	r25, Y+17	; 0x11
    3128:	fc 01       	movw	r30, r24
    312a:	e0 53       	subi	r30, 0x30	; 48
    312c:	fe 4f       	sbci	r31, 0xFE	; 254
    312e:	80 81       	ld	r24, Z
    3130:	28 17       	cp	r18, r24
    3132:	09 f4       	brne	.+2      	; 0x3136 <KeyPad_Set_Password+0x116>
    3134:	81 c0       	rjmp	.+258    	; 0x3238 <KeyPad_Set_Password+0x218>
					{
						count++;
    3136:	80 91 cf 01 	lds	r24, 0x01CF
    313a:	8f 5f       	subi	r24, 0xFF	; 255
    313c:	80 93 cf 01 	sts	0x01CF, r24
						if(count>3)
    3140:	80 91 cf 01 	lds	r24, 0x01CF
    3144:	84 30       	cpi	r24, 0x04	; 4
    3146:	08 f4       	brcc	.+2      	; 0x314a <KeyPad_Set_Password+0x12a>
    3148:	56 c0       	rjmp	.+172    	; 0x31f6 <KeyPad_Set_Password+0x1d6>
						{
							while(1)
							{

								LCD_goto_col_row(0,0);
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	60 e0       	ldi	r22, 0x00	; 0
    314e:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
								LCD_send_string("Welcome Crimenal");
    3152:	80 e6       	ldi	r24, 0x60	; 96
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
								LCD_goto_col_row(0,1);
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	61 e0       	ldi	r22, 0x01	; 1
    315e:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
								LCD_send_string(":(");
    3162:	81 e7       	ldi	r24, 0x71	; 113
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
								DIO_set_pin(GROUPA,PIN_2,HIGH);
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	62 e0       	ldi	r22, 0x02	; 2
    316e:	41 e0       	ldi	r20, 0x01	; 1
    3170:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPA,PIN_3,LOW);
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	63 e0       	ldi	r22, 0x03	; 3
    3178:	40 e0       	ldi	r20, 0x00	; 0
    317a:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPB,PIN_4,HIGH);
    317e:	82 e0       	ldi	r24, 0x02	; 2
    3180:	64 e0       	ldi	r22, 0x04	; 4
    3182:	41 e0       	ldi	r20, 0x01	; 1
    3184:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPB,PIN_5,HIGH);
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	65 e0       	ldi	r22, 0x05	; 5
    318c:	41 e0       	ldi	r20, 0x01	; 1
    318e:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPB,PIN_6,HIGH);
    3192:	82 e0       	ldi	r24, 0x02	; 2
    3194:	66 e0       	ldi	r22, 0x06	; 6
    3196:	41 e0       	ldi	r20, 0x01	; 1
    3198:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								DIO_set_pin(GROUPB,PIN_7,HIGH);
    319c:	82 e0       	ldi	r24, 0x02	; 2
    319e:	67 e0       	ldi	r22, 0x07	; 7
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
								u8 key2 = KeyPad_get_pressed_key();
    31a6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    31aa:	8f 87       	std	Y+15, r24	; 0x0f
								if(key2 =='5')
    31ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    31ae:	85 33       	cpi	r24, 0x35	; 53
    31b0:	61 f6       	brne	.-104    	; 0x314a <KeyPad_Set_Password+0x12a>
								{
									DIO_set_pin(GROUPB,PIN_4,LOW);
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	64 e0       	ldi	r22, 0x04	; 4
    31b6:	40 e0       	ldi	r20, 0x00	; 0
    31b8:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
									DIO_set_pin(GROUPB,PIN_5,LOW);
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	65 e0       	ldi	r22, 0x05	; 5
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
									DIO_set_pin(GROUPB,PIN_6,LOW);
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	66 e0       	ldi	r22, 0x06	; 6
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
									DIO_set_pin(GROUPB,PIN_7,LOW);
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	67 e0       	ldi	r22, 0x07	; 7
    31d4:	40 e0       	ldi	r20, 0x00	; 0
    31d6:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
									DIO_set_pin(GROUPA,PIN_2,LOW);
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	62 e0       	ldi	r22, 0x02	; 2
    31de:	40 e0       	ldi	r20, 0x00	; 0
    31e0:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
									DIO_set_pin(GROUPA,PIN_3,LOW);
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	63 e0       	ldi	r22, 0x03	; 3
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
									LCD_Clear();
    31ee:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
									count =0;
    31f2:	10 92 cf 01 	sts	0x01CF, r1
								}

							}

						}
						LCD_Clear();
    31f6:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
						LCD_goto_col_row(0,0);
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
						LCD_send_string("Wrong Password");
    3202:	82 e9       	ldi	r24, 0x92	; 146
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
						LCD_goto_col_row(0,1);
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	61 e0       	ldi	r22, 0x01	; 1
    320e:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
						LCD_send_string("Click d");
    3212:	84 e8       	ldi	r24, 0x84	; 132
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
						while(KeyPad_get_pressed_key()!='d');
    321a:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    321e:	84 36       	cpi	r24, 0x64	; 100
    3220:	e1 f7       	brne	.-8      	; 0x321a <KeyPad_Set_Password+0x1fa>
						LCD_Clear();
    3222:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
						bool = 1;
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	8a 8b       	std	Y+18, r24	; 0x12
						keybad_col = 10;
    322a:	8a e0       	ldi	r24, 0x0A	; 10
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	90 93 af 01 	sts	0x01AF, r25
    3232:	80 93 ae 01 	sts	0x01AE, r24
    3236:	0b c0       	rjmp	.+22     	; 0x324e <KeyPad_Set_Password+0x22e>
				return 2;
			}
			else if(key == 'C')
			{
				u8 bool = 0;
				for(int i = 0;i<5;i++)
    3238:	88 89       	ldd	r24, Y+16	; 0x10
    323a:	99 89       	ldd	r25, Y+17	; 0x11
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	99 8b       	std	Y+17, r25	; 0x11
    3240:	88 8b       	std	Y+16, r24	; 0x10
    3242:	88 89       	ldd	r24, Y+16	; 0x10
    3244:	99 89       	ldd	r25, Y+17	; 0x11
    3246:	85 30       	cpi	r24, 0x05	; 5
    3248:	91 05       	cpc	r25, r1
    324a:	0c f4       	brge	.+2      	; 0x324e <KeyPad_Set_Password+0x22e>
    324c:	63 cf       	rjmp	.-314    	; 0x3114 <KeyPad_Set_Password+0xf4>
						bool = 1;
						keybad_col = 10;
						break;
					}
				}
				if(bool == 0)
    324e:	8a 89       	ldd	r24, Y+18	; 0x12
    3250:	88 23       	and	r24, r24
    3252:	09 f0       	breq	.+2      	; 0x3256 <KeyPad_Set_Password+0x236>
    3254:	81 c0       	rjmp	.+258    	; 0x3358 <KeyPad_Set_Password+0x338>
				{
					LCD_Clear();
    3256:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
					LCD_goto_col_row(0,0);
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	60 e0       	ldi	r22, 0x00	; 0
    325e:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
					LCD_send_string("Welcom Youssef");
    3262:	81 ea       	ldi	r24, 0xA1	; 161
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	aa e7       	ldi	r26, 0x7A	; 122
    3270:	b4 e4       	ldi	r27, 0x44	; 68
    3272:	8b 87       	std	Y+11, r24	; 0x0b
    3274:	9c 87       	std	Y+12, r25	; 0x0c
    3276:	ad 87       	std	Y+13, r26	; 0x0d
    3278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327a:	6b 85       	ldd	r22, Y+11	; 0x0b
    327c:	7c 85       	ldd	r23, Y+12	; 0x0c
    327e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3280:	9e 85       	ldd	r25, Y+14	; 0x0e
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	4a ef       	ldi	r20, 0xFA	; 250
    3288:	54 e4       	ldi	r21, 0x44	; 68
    328a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	8f 83       	std	Y+7, r24	; 0x07
    3294:	98 87       	std	Y+8, r25	; 0x08
    3296:	a9 87       	std	Y+9, r26	; 0x09
    3298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    329a:	6f 81       	ldd	r22, Y+7	; 0x07
    329c:	78 85       	ldd	r23, Y+8	; 0x08
    329e:	89 85       	ldd	r24, Y+9	; 0x09
    32a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e8       	ldi	r20, 0x80	; 128
    32a8:	5f e3       	ldi	r21, 0x3F	; 63
    32aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ae:	88 23       	and	r24, r24
    32b0:	2c f4       	brge	.+10     	; 0x32bc <KeyPad_Set_Password+0x29c>
		__ticks = 1;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
    32ba:	3f c0       	rjmp	.+126    	; 0x333a <KeyPad_Set_Password+0x31a>
	else if (__tmp > 65535)
    32bc:	6f 81       	ldd	r22, Y+7	; 0x07
    32be:	78 85       	ldd	r23, Y+8	; 0x08
    32c0:	89 85       	ldd	r24, Y+9	; 0x09
    32c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	3f ef       	ldi	r19, 0xFF	; 255
    32c8:	4f e7       	ldi	r20, 0x7F	; 127
    32ca:	57 e4       	ldi	r21, 0x47	; 71
    32cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d0:	18 16       	cp	r1, r24
    32d2:	4c f5       	brge	.+82     	; 0x3326 <KeyPad_Set_Password+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32da:	9e 85       	ldd	r25, Y+14	; 0x0e
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e2       	ldi	r20, 0x20	; 32
    32e2:	51 e4       	ldi	r21, 0x41	; 65
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9e 83       	std	Y+6, r25	; 0x06
    32fa:	8d 83       	std	Y+5, r24	; 0x05
    32fc:	0f c0       	rjmp	.+30     	; 0x331c <KeyPad_Set_Password+0x2fc>
    32fe:	88 ec       	ldi	r24, 0xC8	; 200
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9c 83       	std	Y+4, r25	; 0x04
    3304:	8b 83       	std	Y+3, r24	; 0x03
    3306:	8b 81       	ldd	r24, Y+3	; 0x03
    3308:	9c 81       	ldd	r25, Y+4	; 0x04
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <KeyPad_Set_Password+0x2ea>
    330e:	9c 83       	std	Y+4, r25	; 0x04
    3310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3312:	8d 81       	ldd	r24, Y+5	; 0x05
    3314:	9e 81       	ldd	r25, Y+6	; 0x06
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	9e 81       	ldd	r25, Y+6	; 0x06
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	69 f7       	brne	.-38     	; 0x32fe <KeyPad_Set_Password+0x2de>
    3324:	14 c0       	rjmp	.+40     	; 0x334e <KeyPad_Set_Password+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3326:	6f 81       	ldd	r22, Y+7	; 0x07
    3328:	78 85       	ldd	r23, Y+8	; 0x08
    332a:	89 85       	ldd	r24, Y+9	; 0x09
    332c:	9a 85       	ldd	r25, Y+10	; 0x0a
    332e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	8d 81       	ldd	r24, Y+5	; 0x05
    333c:	9e 81       	ldd	r25, Y+6	; 0x06
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	89 83       	std	Y+1, r24	; 0x01
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	9a 81       	ldd	r25, Y+2	; 0x02
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <KeyPad_Set_Password+0x326>
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					LCD_Clear();
    334e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
					return 1;
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	8a 8f       	std	Y+26, r24	; 0x1a
    3356:	31 c0       	rjmp	.+98     	; 0x33ba <KeyPad_Set_Password+0x39a>
				}
				else
				{
					return 0;
    3358:	1a 8e       	std	Y+26, r1	; 0x1a
    335a:	2f c0       	rjmp	.+94     	; 0x33ba <KeyPad_Set_Password+0x39a>
				}

			}

			InputPassword[keybad_col-10] = key;
    335c:	80 91 ae 01 	lds	r24, 0x01AE
    3360:	90 91 af 01 	lds	r25, 0x01AF
    3364:	0a 97       	sbiw	r24, 0x0a	; 10
    3366:	fc 01       	movw	r30, r24
    3368:	e0 53       	subi	r30, 0x30	; 48
    336a:	fe 4f       	sbci	r31, 0xFE	; 254
    336c:	89 8d       	ldd	r24, Y+25	; 0x19
    336e:	80 83       	st	Z, r24
			LCD_goto_col_row(keybad_col,keybad_row);
    3370:	80 91 ae 01 	lds	r24, 0x01AE
    3374:	90 91 af 01 	lds	r25, 0x01AF
    3378:	28 2f       	mov	r18, r24
    337a:	80 91 cc 01 	lds	r24, 0x01CC
    337e:	90 91 cd 01 	lds	r25, 0x01CD
    3382:	98 2f       	mov	r25, r24
    3384:	82 2f       	mov	r24, r18
    3386:	69 2f       	mov	r22, r25
    3388:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
			if(keybad_col<15 )
    338c:	80 91 ae 01 	lds	r24, 0x01AE
    3390:	90 91 af 01 	lds	r25, 0x01AF
    3394:	8f 30       	cpi	r24, 0x0F	; 15
    3396:	91 05       	cpc	r25, r1
    3398:	4c f4       	brge	.+18     	; 0x33ac <KeyPad_Set_Password+0x38c>
			{
				keybad_col++;
    339a:	80 91 ae 01 	lds	r24, 0x01AE
    339e:	90 91 af 01 	lds	r25, 0x01AF
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	90 93 af 01 	sts	0x01AF, r25
    33a8:	80 93 ae 01 	sts	0x01AE, r24
			}
			LCD_send_data('*');
    33ac:	8a e2       	ldi	r24, 0x2A	; 42
    33ae:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <LCD_send_data>
			return 3;
    33b2:	93 e0       	ldi	r25, 0x03	; 3
    33b4:	9a 8f       	std	Y+26, r25	; 0x1a
    33b6:	01 c0       	rjmp	.+2      	; 0x33ba <KeyPad_Set_Password+0x39a>
    33b8:	02 c0       	rjmp	.+4      	; 0x33be <KeyPad_Set_Password+0x39e>

		}

}
    33ba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    33bc:	eb 8f       	std	Y+27, r30	; 0x1b
    33be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33c0:	a0 96       	adiw	r28, 0x20	; 32
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <KeyPad_display_7seg>:
void KeyPad_display_7seg(u8 key)
{
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	0f 92       	push	r0
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	89 83       	std	Y+1, r24	; 0x01
	if(key != 0xff)
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	8f 3f       	cpi	r24, 0xFF	; 255
    33e2:	41 f0       	breq	.+16     	; 0x33f4 <KeyPad_display_7seg+0x22>
	{
		key = key - '0';
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	80 53       	subi	r24, 0x30	; 48
    33e8:	89 83       	std	Y+1, r24	; 0x01
		SevenSeg_dispaly(key);
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	0e 94 76 1a 	call	0x34ec	; 0x34ec <SevenSeg_dispaly>

	}
}
    33f4:	0f 90       	pop	r0
    33f6:	cf 91       	pop	r28
    33f8:	df 91       	pop	r29
    33fa:	08 95       	ret

000033fc <GIE_voidEnable>:
#include "GIE_register.h"
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"

void GIE_voidEnable(void)
{
    33fc:	df 93       	push	r29
    33fe:	cf 93       	push	r28
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    3404:	af e5       	ldi	r26, 0x5F	; 95
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	ef e5       	ldi	r30, 0x5F	; 95
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	80 81       	ld	r24, Z
    340e:	80 68       	ori	r24, 0x80	; 128
    3410:	8c 93       	st	X, r24
}
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	08 95       	ret

00003418 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    3418:	df 93       	push	r29
    341a:	cf 93       	push	r28
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    3420:	af e5       	ldi	r26, 0x5F	; 95
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	ef e5       	ldi	r30, 0x5F	; 95
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	8f 77       	andi	r24, 0x7F	; 127
    342c:	8c 93       	st	X, r24
}
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <EXTI_voidint0Inti>:
#include "EXTI_config.h"
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"

void EXTI_voidint0Inti(void)
{
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
	/*Set sense control for INT0 to falling edge*/
#if INT0_SENSE == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC00);
    343c:	a5 e5       	ldi	r26, 0x55	; 85
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	e5 e5       	ldi	r30, 0x55	; 85
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	8e 7f       	andi	r24, 0xFE	; 254
    3448:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
    344a:	a5 e5       	ldi	r26, 0x55	; 85
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	e5 e5       	ldi	r30, 0x55	; 85
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	8d 7f       	andi	r24, 0xFD	; 253
    3456:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE configuration option"
#endif

	/*Specific interrupt enable for INT0*/
#if INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    3458:	ab e5       	ldi	r26, 0x5B	; 91
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	eb e5       	ldi	r30, 0x5B	; 91
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	80 64       	ori	r24, 0x40	; 64
    3464:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT0_INITIAL_STATE in option"
#endif
}
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	08 95       	ret

0000346c <EXTI_voidint1Inti>:

void EXTI_voidint1Inti(void)
{
    346c:	df 93       	push	r29
    346e:	cf 93       	push	r28
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
	/*Set sense control for INT0 to falling edge*/
#if INT1_SENSE == LOW_LEVEL
	CLR_BIT(MCUCR,MCUCR_ISC10);
    3474:	a5 e5       	ldi	r26, 0x55	; 85
    3476:	b0 e0       	ldi	r27, 0x00	; 0
    3478:	e5 e5       	ldi	r30, 0x55	; 85
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	80 81       	ld	r24, Z
    347e:	8b 7f       	andi	r24, 0xFB	; 251
    3480:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
    3482:	a5 e5       	ldi	r26, 0x55	; 85
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	e5 e5       	ldi	r30, 0x55	; 85
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	87 7f       	andi	r24, 0xF7	; 247
    348e:	8c 93       	st	X, r24
#error "Wrong INT1_SENSE configuration option"
#endif

	/*Specific interrupt enable for INT0*/
#if INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
    3490:	ab e5       	ldi	r26, 0x5B	; 91
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	eb e5       	ldi	r30, 0x5B	; 91
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	80 81       	ld	r24, Z
    349a:	80 68       	ori	r24, 0x80	; 128
    349c:	8c 93       	st	X, r24
#elif INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#else
#error "Wrong INT1_INITIAL_STATE in option"
#endif
}
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <EXTI_voidint2Inti>:
	CLR_BIT(MCUCR,MCUCR_ISC11);
	SET_BIT(GICR,GICR_INT1);
}
*/
void EXTI_voidint2Inti(void)
{
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
	/*Set sense control for INT2 to falling edge*/
	SET_BIT(MCUCSR,MCUCSR_INT2);
    34ac:	a4 e5       	ldi	r26, 0x54	; 84
    34ae:	b0 e0       	ldi	r27, 0x00	; 0
    34b0:	e4 e5       	ldi	r30, 0x54	; 84
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	80 81       	ld	r24, Z
    34b6:	80 64       	ori	r24, 0x40	; 64
    34b8:	8c 93       	st	X, r24
	/*Specific interrupt enable for INT2*/
	SET_BIT(GICR,GICR_INT2);
    34ba:	ab e5       	ldi	r26, 0x5B	; 91
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	eb e5       	ldi	r30, 0x5B	; 91
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	80 81       	ld	r24, Z
    34c4:	80 62       	ori	r24, 0x20	; 32
    34c6:	8c 93       	st	X, r24
}
    34c8:	cf 91       	pop	r28
    34ca:	df 91       	pop	r29
    34cc:	08 95       	ret

000034ce <SevenSeg_int>:
0x4f,0x66,0x6d,
0x7d,0x07,0x7f
,0x6f
};
void SevenSeg_int()
{
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
DIO_set_port_dir(SEVEN_SEGMENT_GROUP,0xff);
    34d6:	82 e0       	ldi	r24, 0x02	; 2
    34d8:	6f ef       	ldi	r22, 0xFF	; 255
    34da:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_set_port_dir>
#if SEVEN_SEGMENT_TYPE == CATHOD
DIO_set_port(SEVEN_SEGMENT_GROUP,seven_seg_arr[NUMBER0]);
#elif SEVEN_SEGMENT_TYPE == ANODE
DIO_set_port(SEVEN_SEGMENT_GROUP,0xff);
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	6f ef       	ldi	r22, 0xFF	; 255
    34e2:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_set_port>
#endif
}
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <SevenSeg_dispaly>:
void SevenSeg_dispaly(u8 number)
{
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	0f 92       	push	r0
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	89 83       	std	Y+1, r24	; 0x01
#if SEVEN_SEGMENT_TYPE == CATHOD
	DIO_set_port(SEVEN_SEGMENT_GROUP,seven_seg_arr[number]);
#elif SEVEN_SEGMENT_TYPE == ANODE
DIO_set_port(SEVEN_SEGMENT_GROUP,~seven_seg_arr[number]);
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	88 2f       	mov	r24, r24
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	fc 01       	movw	r30, r24
    3500:	e0 54       	subi	r30, 0x40	; 64
    3502:	fe 4f       	sbci	r31, 0xFE	; 254
    3504:	80 81       	ld	r24, Z
    3506:	98 2f       	mov	r25, r24
    3508:	90 95       	com	r25
    350a:	82 e0       	ldi	r24, 0x02	; 2
    350c:	69 2f       	mov	r22, r25
    350e:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_set_port>
#endif
}
    3512:	0f 90       	pop	r0
    3514:	cf 91       	pop	r28
    3516:	df 91       	pop	r29
    3518:	08 95       	ret

0000351a <main>:
u8 SetPassword();
u8 Options();
u8 result;
u8 arr[22];
int main()
{
    351a:	df 93       	push	r29
    351c:	cf 93       	push	r28
    351e:	00 d0       	rcall	.+0      	; 0x3520 <main+0x6>
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62

	DIO_set_pin_dir(GROUPB,PIN_4,OUTPUT);
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	64 e0       	ldi	r22, 0x04	; 4
    3528:	41 e0       	ldi	r20, 0x01	; 1
    352a:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
	DIO_set_pin_dir(GROUPB,PIN_5,OUTPUT);
    352e:	82 e0       	ldi	r24, 0x02	; 2
    3530:	65 e0       	ldi	r22, 0x05	; 5
    3532:	41 e0       	ldi	r20, 0x01	; 1
    3534:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
	DIO_set_pin_dir(GROUPB,PIN_6,OUTPUT);
    3538:	82 e0       	ldi	r24, 0x02	; 2
    353a:	66 e0       	ldi	r22, 0x06	; 6
    353c:	41 e0       	ldi	r20, 0x01	; 1
    353e:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
	DIO_set_pin_dir(GROUPB,PIN_7,OUTPUT);
    3542:	82 e0       	ldi	r24, 0x02	; 2
    3544:	67 e0       	ldi	r22, 0x07	; 7
    3546:	41 e0       	ldi	r20, 0x01	; 1
    3548:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
	DIO_set_pin_dir(GROUPA,PIN_0,INPUT);
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	40 e0       	ldi	r20, 0x00	; 0
    3552:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
	DIO_set_pin_dir(GROUPA,PIN_1,INPUT);
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	61 e0       	ldi	r22, 0x01	; 1
    355a:	40 e0       	ldi	r20, 0x00	; 0
    355c:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
	DIO_set_pin_dir(GROUPA,PIN_2,OUTPUT);
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	62 e0       	ldi	r22, 0x02	; 2
    3564:	41 e0       	ldi	r20, 0x01	; 1
    3566:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
	DIO_set_pin_dir(GROUPA,PIN_3,OUTPUT);
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	63 e0       	ldi	r22, 0x03	; 3
    356e:	41 e0       	ldi	r20, 0x01	; 1
    3570:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>



	ADC_init();
    3574:	0e 94 bb 0b 	call	0x1776	; 0x1776 <ADC_init>
	LCD_init();
    3578:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_init>
	keyPad_init();
    357c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <keyPad_init>
	u8 resultUserName = 0;
    3580:	1a 82       	std	Y+2, r1	; 0x02
	u8 resultPassword= 0;
    3582:	19 82       	std	Y+1, r1	; 0x01

	PWM_voidInit();
    3584:	0e 94 62 06 	call	0xcc4	; 0xcc4 <PWM_voidInit>
	DIO_set_pin_dir(GROUPB,PIN_3,OUTPUT);
    3588:	82 e0       	ldi	r24, 0x02	; 2
    358a:	63 e0       	ldi	r22, 0x03	; 3
    358c:	41 e0       	ldi	r20, 0x01	; 1
    358e:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_set_pin_dir>
	while(1)
	{


		if(resultUserName != 1)
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	81 30       	cpi	r24, 0x01	; 1
    3596:	19 f0       	breq	.+6      	; 0x359e <main+0x84>
		{
			resultUserName = SetUserName();
    3598:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <SetUserName>
    359c:	8a 83       	std	Y+2, r24	; 0x02
		}

		if(resultUserName == 1 && resultPassword != 1)
    359e:	8a 81       	ldd	r24, Y+2	; 0x02
    35a0:	81 30       	cpi	r24, 0x01	; 1
    35a2:	31 f4       	brne	.+12     	; 0x35b0 <main+0x96>
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	81 30       	cpi	r24, 0x01	; 1
    35a8:	19 f0       	breq	.+6      	; 0x35b0 <main+0x96>
		{
			resultPassword = SetPassword();
    35aa:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <SetPassword>
    35ae:	89 83       	std	Y+1, r24	; 0x01
		}
		if(resultPassword == 1)
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	81 30       	cpi	r24, 0x01	; 1
    35b4:	71 f7       	brne	.-36     	; 0x3592 <main+0x78>
		{
			Options();
    35b6:	0e 94 de 1a 	call	0x35bc	; 0x35bc <Options>
    35ba:	eb cf       	rjmp	.-42     	; 0x3592 <main+0x78>

000035bc <Options>:
	}

}

u8 Options()
{
    35bc:	df 93       	push	r29
    35be:	cf 93       	push	r28
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	60 97       	sbiw	r28, 0x10	; 16
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	f8 94       	cli
    35ca:	de bf       	out	0x3e, r29	; 62
    35cc:	0f be       	out	0x3f, r0	; 63
    35ce:	cd bf       	out	0x3d, r28	; 61

	LCD_goto_col_row(0,0);
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
	LCD_send_string("1-LedOn");
    35d8:	86 eb       	ldi	r24, 0xB6	; 182
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
	LCD_goto_col_row(0,1);
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	61 e0       	ldi	r22, 0x01	; 1
    35e4:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
	LCD_send_string("2-LedOff");
    35e8:	8e eb       	ldi	r24, 0xBE	; 190
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
	LCD_goto_col_row(7,0);
    35f0:	87 e0       	ldi	r24, 0x07	; 7
    35f2:	60 e0       	ldi	r22, 0x00	; 0
    35f4:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
	LCD_send_string("3-LDRLed");
    35f8:	87 ec       	ldi	r24, 0xC7	; 199
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
	LCD_goto_col_row(9,1);
    3600:	89 e0       	ldi	r24, 0x09	; 9
    3602:	61 e0       	ldi	r22, 0x01	; 1
    3604:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
	LCD_send_string("4-More");
    3608:	80 ed       	ldi	r24, 0xD0	; 208
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
	u8 key = KeyPad_get_pressed_key();
    3610:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    3614:	8f 87       	std	Y+15, r24	; 0x0f
	if(key=='1')
    3616:	8f 85       	ldd	r24, Y+15	; 0x0f
    3618:	81 33       	cpi	r24, 0x31	; 49
    361a:	a9 f4       	brne	.+42     	; 0x3646 <Options+0x8a>
	{
		DIO_set_pin(GROUPB,PIN_4,HIGH);
    361c:	82 e0       	ldi	r24, 0x02	; 2
    361e:	64 e0       	ldi	r22, 0x04	; 4
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		DIO_set_pin(GROUPB,PIN_5,HIGH);
    3626:	82 e0       	ldi	r24, 0x02	; 2
    3628:	65 e0       	ldi	r22, 0x05	; 5
    362a:	41 e0       	ldi	r20, 0x01	; 1
    362c:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		DIO_set_pin(GROUPB,PIN_6,HIGH);
    3630:	82 e0       	ldi	r24, 0x02	; 2
    3632:	66 e0       	ldi	r22, 0x06	; 6
    3634:	41 e0       	ldi	r20, 0x01	; 1
    3636:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		DIO_set_pin(GROUPB,PIN_7,HIGH);
    363a:	82 e0       	ldi	r24, 0x02	; 2
    363c:	67 e0       	ldi	r22, 0x07	; 7
    363e:	41 e0       	ldi	r20, 0x01	; 1
    3640:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    3644:	bf c1       	rjmp	.+894    	; 0x39c4 <Options+0x408>
	}
	else if(key == '2')
    3646:	8f 85       	ldd	r24, Y+15	; 0x0f
    3648:	82 33       	cpi	r24, 0x32	; 50
    364a:	a9 f4       	brne	.+42     	; 0x3676 <Options+0xba>
	{
		DIO_set_pin(GROUPB,PIN_4,LOW);
    364c:	82 e0       	ldi	r24, 0x02	; 2
    364e:	64 e0       	ldi	r22, 0x04	; 4
    3650:	40 e0       	ldi	r20, 0x00	; 0
    3652:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		DIO_set_pin(GROUPB,PIN_5,LOW);
    3656:	82 e0       	ldi	r24, 0x02	; 2
    3658:	65 e0       	ldi	r22, 0x05	; 5
    365a:	40 e0       	ldi	r20, 0x00	; 0
    365c:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		DIO_set_pin(GROUPB,PIN_6,LOW);
    3660:	82 e0       	ldi	r24, 0x02	; 2
    3662:	66 e0       	ldi	r22, 0x06	; 6
    3664:	40 e0       	ldi	r20, 0x00	; 0
    3666:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		DIO_set_pin(GROUPB,PIN_7,LOW);
    366a:	82 e0       	ldi	r24, 0x02	; 2
    366c:	67 e0       	ldi	r22, 0x07	; 7
    366e:	40 e0       	ldi	r20, 0x00	; 0
    3670:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    3674:	a7 c1       	rjmp	.+846    	; 0x39c4 <Options+0x408>
	}
	else if(key == '3')
    3676:	8f 85       	ldd	r24, Y+15	; 0x0f
    3678:	83 33       	cpi	r24, 0x33	; 51
    367a:	09 f0       	breq	.+2      	; 0x367e <Options+0xc2>
    367c:	a1 c0       	rjmp	.+322    	; 0x37c0 <Options+0x204>
	{
		LCD_Clear();
    367e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
		while(1)
		{
			result = ADC_Read_channal(0);
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <ADC_Read_channal>
    3688:	80 93 f0 01 	sts	0x01F0, r24
			sprintf(arr,"light = %d ",result);
    368c:	80 91 f0 01 	lds	r24, 0x01F0
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	00 d0       	rcall	.+0      	; 0x3696 <Options+0xda>
    3696:	00 d0       	rcall	.+0      	; 0x3698 <Options+0xdc>
    3698:	00 d0       	rcall	.+0      	; 0x369a <Options+0xde>
    369a:	ed b7       	in	r30, 0x3d	; 61
    369c:	fe b7       	in	r31, 0x3e	; 62
    369e:	31 96       	adiw	r30, 0x01	; 1
    36a0:	8a ed       	ldi	r24, 0xDA	; 218
    36a2:	91 e0       	ldi	r25, 0x01	; 1
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
    36a8:	87 ed       	ldi	r24, 0xD7	; 215
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	93 83       	std	Z+3, r25	; 0x03
    36ae:	82 83       	std	Z+2, r24	; 0x02
    36b0:	35 83       	std	Z+5, r19	; 0x05
    36b2:	24 83       	std	Z+4, r18	; 0x04
    36b4:	0e 94 67 1d 	call	0x3ace	; 0x3ace <sprintf>
    36b8:	8d b7       	in	r24, 0x3d	; 61
    36ba:	9e b7       	in	r25, 0x3e	; 62
    36bc:	06 96       	adiw	r24, 0x06	; 6
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	9e bf       	out	0x3e, r25	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	8d bf       	out	0x3d, r24	; 61
			LCD_goto_col_row(0,0);
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
			LCD_send_string(arr);
    36d0:	8a ed       	ldi	r24, 0xDA	; 218
    36d2:	91 e0       	ldi	r25, 0x01	; 1
    36d4:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
			key = KeyPad_get_pressed_key();
    36d8:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    36dc:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_goto_col_row(0,1);
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
			LCD_send_string("Press 1 to Exit");
    36e6:	83 ee       	ldi	r24, 0xE3	; 227
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
			if(result<100)
    36ee:	80 91 f0 01 	lds	r24, 0x01F0
    36f2:	84 36       	cpi	r24, 0x64	; 100
    36f4:	a8 f4       	brcc	.+42     	; 0x3720 <Options+0x164>
			{
				DIO_set_pin(GROUPB,PIN_4,HIGH);
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	64 e0       	ldi	r22, 0x04	; 4
    36fa:	41 e0       	ldi	r20, 0x01	; 1
    36fc:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
				DIO_set_pin(GROUPB,PIN_5,HIGH);
    3700:	82 e0       	ldi	r24, 0x02	; 2
    3702:	65 e0       	ldi	r22, 0x05	; 5
    3704:	41 e0       	ldi	r20, 0x01	; 1
    3706:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
				DIO_set_pin(GROUPB,PIN_6,HIGH);
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	66 e0       	ldi	r22, 0x06	; 6
    370e:	41 e0       	ldi	r20, 0x01	; 1
    3710:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
				DIO_set_pin(GROUPB,PIN_7,HIGH);
    3714:	82 e0       	ldi	r24, 0x02	; 2
    3716:	67 e0       	ldi	r22, 0x07	; 7
    3718:	41 e0       	ldi	r20, 0x01	; 1
    371a:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    371e:	35 c0       	rjmp	.+106    	; 0x378a <Options+0x1ce>
			}
			else if(result>=100 && result<200)
    3720:	80 91 f0 01 	lds	r24, 0x01F0
    3724:	84 36       	cpi	r24, 0x64	; 100
    3726:	c8 f0       	brcs	.+50     	; 0x375a <Options+0x19e>
    3728:	80 91 f0 01 	lds	r24, 0x01F0
    372c:	88 3c       	cpi	r24, 0xC8	; 200
    372e:	a8 f4       	brcc	.+42     	; 0x375a <Options+0x19e>
			{
				DIO_set_pin(GROUPB,PIN_4,HIGH);
    3730:	82 e0       	ldi	r24, 0x02	; 2
    3732:	64 e0       	ldi	r22, 0x04	; 4
    3734:	41 e0       	ldi	r20, 0x01	; 1
    3736:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
				DIO_set_pin(GROUPB,PIN_5,HIGH);
    373a:	82 e0       	ldi	r24, 0x02	; 2
    373c:	65 e0       	ldi	r22, 0x05	; 5
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
				DIO_set_pin(GROUPB,PIN_6,HIGH);
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	66 e0       	ldi	r22, 0x06	; 6
    3748:	41 e0       	ldi	r20, 0x01	; 1
    374a:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
				DIO_set_pin(GROUPB,PIN_7,LOW);
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	67 e0       	ldi	r22, 0x07	; 7
    3752:	40 e0       	ldi	r20, 0x00	; 0
    3754:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
    3758:	18 c0       	rjmp	.+48     	; 0x378a <Options+0x1ce>
			}
			else if(result>=200)
    375a:	80 91 f0 01 	lds	r24, 0x01F0
    375e:	88 3c       	cpi	r24, 0xC8	; 200
    3760:	a0 f0       	brcs	.+40     	; 0x378a <Options+0x1ce>
			{
				DIO_set_pin(GROUPB,PIN_4,LOW);
    3762:	82 e0       	ldi	r24, 0x02	; 2
    3764:	64 e0       	ldi	r22, 0x04	; 4
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
				DIO_set_pin(GROUPB,PIN_5,LOW);
    376c:	82 e0       	ldi	r24, 0x02	; 2
    376e:	65 e0       	ldi	r22, 0x05	; 5
    3770:	40 e0       	ldi	r20, 0x00	; 0
    3772:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
				DIO_set_pin(GROUPB,PIN_6,HIGH);
    3776:	82 e0       	ldi	r24, 0x02	; 2
    3778:	66 e0       	ldi	r22, 0x06	; 6
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
				DIO_set_pin(GROUPB,PIN_7,HIGH);
    3780:	82 e0       	ldi	r24, 0x02	; 2
    3782:	67 e0       	ldi	r22, 0x07	; 7
    3784:	41 e0       	ldi	r20, 0x01	; 1
    3786:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
			}
			if(key =='1')
    378a:	8f 85       	ldd	r24, Y+15	; 0x0f
    378c:	81 33       	cpi	r24, 0x31	; 49
    378e:	09 f0       	breq	.+2      	; 0x3792 <Options+0x1d6>
    3790:	78 cf       	rjmp	.-272    	; 0x3682 <Options+0xc6>
			{
				break;
			}
		}
		DIO_set_pin(GROUPB,PIN_4,LOW);
    3792:	82 e0       	ldi	r24, 0x02	; 2
    3794:	64 e0       	ldi	r22, 0x04	; 4
    3796:	40 e0       	ldi	r20, 0x00	; 0
    3798:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		DIO_set_pin(GROUPB,PIN_5,LOW);
    379c:	82 e0       	ldi	r24, 0x02	; 2
    379e:	65 e0       	ldi	r22, 0x05	; 5
    37a0:	40 e0       	ldi	r20, 0x00	; 0
    37a2:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		DIO_set_pin(GROUPB,PIN_6,LOW);
    37a6:	82 e0       	ldi	r24, 0x02	; 2
    37a8:	66 e0       	ldi	r22, 0x06	; 6
    37aa:	40 e0       	ldi	r20, 0x00	; 0
    37ac:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		DIO_set_pin(GROUPB,PIN_7,LOW);
    37b0:	82 e0       	ldi	r24, 0x02	; 2
    37b2:	67 e0       	ldi	r22, 0x07	; 7
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	0e 94 3f 0a 	call	0x147e	; 0x147e <DIO_set_pin>
		LCD_Clear();
    37ba:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
    37be:	02 c1       	rjmp	.+516    	; 0x39c4 <Options+0x408>

	}
	else if(key == '4')
    37c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c2:	84 33       	cpi	r24, 0x34	; 52
    37c4:	09 f0       	breq	.+2      	; 0x37c8 <Options+0x20c>
    37c6:	fe c0       	rjmp	.+508    	; 0x39c4 <Options+0x408>
	{
		LCD_Clear();
    37c8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
		while(1)
		{
			LCD_goto_col_row(0,0);
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
			LCD_send_string("5-DCON");
    37d4:	83 ef       	ldi	r24, 0xF3	; 243
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
			LCD_goto_col_row(0,1);
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	61 e0       	ldi	r22, 0x01	; 1
    37e0:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
			LCD_send_string("6-DC OFF");
    37e4:	8a ef       	ldi	r24, 0xFA	; 250
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
			LCD_goto_col_row(6,0);
    37ec:	86 e0       	ldi	r24, 0x06	; 6
    37ee:	60 e0       	ldi	r22, 0x00	; 0
    37f0:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
			LCD_send_string("7-AdjustDc");
    37f4:	83 e0       	ldi	r24, 0x03	; 3
    37f6:	91 e0       	ldi	r25, 0x01	; 1
    37f8:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
			LCD_goto_col_row(9,1);
    37fc:	89 e0       	ldi	r24, 0x09	; 9
    37fe:	61 e0       	ldi	r22, 0x01	; 1
    3800:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
			LCD_send_string("8-BACK");
    3804:	8e e0       	ldi	r24, 0x0E	; 14
    3806:	91 e0       	ldi	r25, 0x01	; 1
    3808:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>

			key = KeyPad_get_pressed_key();
    380c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    3810:	8f 87       	std	Y+15, r24	; 0x0f
			if(key == '5')
    3812:	8f 85       	ldd	r24, Y+15	; 0x0f
    3814:	85 33       	cpi	r24, 0x35	; 53
    3816:	29 f4       	brne	.+10     	; 0x3822 <Options+0x266>
			{
				PWM_voidSetCompMatchValue(150);
    3818:	86 e9       	ldi	r24, 0x96	; 150
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	0e 94 9a 06 	call	0xd34	; 0xd34 <PWM_voidSetCompMatchValue>
    3820:	d5 cf       	rjmp	.-86     	; 0x37cc <Options+0x210>
			}
			else if(key == '6')
    3822:	8f 85       	ldd	r24, Y+15	; 0x0f
    3824:	86 33       	cpi	r24, 0x36	; 54
    3826:	29 f4       	brne	.+10     	; 0x3832 <Options+0x276>
			{
				PWM_voidSetCompMatchValue(0);
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	0e 94 9a 06 	call	0xd34	; 0xd34 <PWM_voidSetCompMatchValue>
    3830:	cd cf       	rjmp	.-102    	; 0x37cc <Options+0x210>
			}
			else if(key == '7')
    3832:	8f 85       	ldd	r24, Y+15	; 0x0f
    3834:	87 33       	cpi	r24, 0x37	; 55
    3836:	09 f0       	breq	.+2      	; 0x383a <Options+0x27e>
    3838:	c1 c0       	rjmp	.+386    	; 0x39bc <Options+0x400>
			{
				LCD_Clear();
    383a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_Clear>
				while(1)
				{
					result = ADC_Read_channal(1);
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <ADC_Read_channal>
    3844:	80 93 f0 01 	sts	0x01F0, r24
					sprintf(arr,"HEAT = %d ",result);
    3848:	80 91 f0 01 	lds	r24, 0x01F0
    384c:	28 2f       	mov	r18, r24
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	00 d0       	rcall	.+0      	; 0x3852 <Options+0x296>
    3852:	00 d0       	rcall	.+0      	; 0x3854 <Options+0x298>
    3854:	00 d0       	rcall	.+0      	; 0x3856 <Options+0x29a>
    3856:	ed b7       	in	r30, 0x3d	; 61
    3858:	fe b7       	in	r31, 0x3e	; 62
    385a:	31 96       	adiw	r30, 0x01	; 1
    385c:	8a ed       	ldi	r24, 0xDA	; 218
    385e:	91 e0       	ldi	r25, 0x01	; 1
    3860:	91 83       	std	Z+1, r25	; 0x01
    3862:	80 83       	st	Z, r24
    3864:	85 e1       	ldi	r24, 0x15	; 21
    3866:	91 e0       	ldi	r25, 0x01	; 1
    3868:	93 83       	std	Z+3, r25	; 0x03
    386a:	82 83       	std	Z+2, r24	; 0x02
    386c:	35 83       	std	Z+5, r19	; 0x05
    386e:	24 83       	std	Z+4, r18	; 0x04
    3870:	0e 94 67 1d 	call	0x3ace	; 0x3ace <sprintf>
    3874:	8d b7       	in	r24, 0x3d	; 61
    3876:	9e b7       	in	r25, 0x3e	; 62
    3878:	06 96       	adiw	r24, 0x06	; 6
    387a:	0f b6       	in	r0, 0x3f	; 63
    387c:	f8 94       	cli
    387e:	9e bf       	out	0x3e, r25	; 62
    3880:	0f be       	out	0x3f, r0	; 63
    3882:	8d bf       	out	0x3d, r24	; 61
					LCD_goto_col_row(0,0);
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	60 e0       	ldi	r22, 0x00	; 0
    3888:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
					LCD_send_string(arr);
    388c:	8a ed       	ldi	r24, 0xDA	; 218
    388e:	91 e0       	ldi	r25, 0x01	; 1
    3890:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
					key = KeyPad_get_pressed_key();
    3894:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    3898:	8f 87       	std	Y+15, r24	; 0x0f
					LCD_goto_col_row(0,1);
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	61 e0       	ldi	r22, 0x01	; 1
    389e:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
					LCD_send_string("Press 1 to Exit");
    38a2:	83 ee       	ldi	r24, 0xE3	; 227
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
					if(result>=50)
    38aa:	80 91 f0 01 	lds	r24, 0x01F0
    38ae:	82 33       	cpi	r24, 0x32	; 50
    38b0:	08 f4       	brcc	.+2      	; 0x38b4 <Options+0x2f8>
    38b2:	77 c0       	rjmp	.+238    	; 0x39a2 <Options+0x3e6>
					{
						PWM_voidSetCompMatchValue(255);
    38b4:	8f ef       	ldi	r24, 0xFF	; 255
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	0e 94 9a 06 	call	0xd34	; 0xd34 <PWM_voidSetCompMatchValue>
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	aa e7       	ldi	r26, 0x7A	; 122
    38c2:	b4 e4       	ldi	r27, 0x44	; 68
    38c4:	8b 87       	std	Y+11, r24	; 0x0b
    38c6:	9c 87       	std	Y+12, r25	; 0x0c
    38c8:	ad 87       	std	Y+13, r26	; 0x0d
    38ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	4a ef       	ldi	r20, 0xFA	; 250
    38da:	54 e4       	ldi	r21, 0x44	; 68
    38dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e0:	dc 01       	movw	r26, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	8f 83       	std	Y+7, r24	; 0x07
    38e6:	98 87       	std	Y+8, r25	; 0x08
    38e8:	a9 87       	std	Y+9, r26	; 0x09
    38ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38ec:	6f 81       	ldd	r22, Y+7	; 0x07
    38ee:	78 85       	ldd	r23, Y+8	; 0x08
    38f0:	89 85       	ldd	r24, Y+9	; 0x09
    38f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e8       	ldi	r20, 0x80	; 128
    38fa:	5f e3       	ldi	r21, 0x3F	; 63
    38fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3900:	88 23       	and	r24, r24
    3902:	2c f4       	brge	.+10     	; 0x390e <Options+0x352>
		__ticks = 1;
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	9e 83       	std	Y+6, r25	; 0x06
    390a:	8d 83       	std	Y+5, r24	; 0x05
    390c:	3f c0       	rjmp	.+126    	; 0x398c <Options+0x3d0>
	else if (__tmp > 65535)
    390e:	6f 81       	ldd	r22, Y+7	; 0x07
    3910:	78 85       	ldd	r23, Y+8	; 0x08
    3912:	89 85       	ldd	r24, Y+9	; 0x09
    3914:	9a 85       	ldd	r25, Y+10	; 0x0a
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	3f ef       	ldi	r19, 0xFF	; 255
    391a:	4f e7       	ldi	r20, 0x7F	; 127
    391c:	57 e4       	ldi	r21, 0x47	; 71
    391e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3922:	18 16       	cp	r1, r24
    3924:	4c f5       	brge	.+82     	; 0x3978 <Options+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3926:	6b 85       	ldd	r22, Y+11	; 0x0b
    3928:	7c 85       	ldd	r23, Y+12	; 0x0c
    392a:	8d 85       	ldd	r24, Y+13	; 0x0d
    392c:	9e 85       	ldd	r25, Y+14	; 0x0e
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	40 e2       	ldi	r20, 0x20	; 32
    3934:	51 e4       	ldi	r21, 0x41	; 65
    3936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	bc 01       	movw	r22, r24
    3940:	cd 01       	movw	r24, r26
    3942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	9e 83       	std	Y+6, r25	; 0x06
    394c:	8d 83       	std	Y+5, r24	; 0x05
    394e:	0f c0       	rjmp	.+30     	; 0x396e <Options+0x3b2>
    3950:	88 ec       	ldi	r24, 0xC8	; 200
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	9c 83       	std	Y+4, r25	; 0x04
    3956:	8b 83       	std	Y+3, r24	; 0x03
    3958:	8b 81       	ldd	r24, Y+3	; 0x03
    395a:	9c 81       	ldd	r25, Y+4	; 0x04
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	f1 f7       	brne	.-4      	; 0x395c <Options+0x3a0>
    3960:	9c 83       	std	Y+4, r25	; 0x04
    3962:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3964:	8d 81       	ldd	r24, Y+5	; 0x05
    3966:	9e 81       	ldd	r25, Y+6	; 0x06
    3968:	01 97       	sbiw	r24, 0x01	; 1
    396a:	9e 83       	std	Y+6, r25	; 0x06
    396c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    396e:	8d 81       	ldd	r24, Y+5	; 0x05
    3970:	9e 81       	ldd	r25, Y+6	; 0x06
    3972:	00 97       	sbiw	r24, 0x00	; 0
    3974:	69 f7       	brne	.-38     	; 0x3950 <Options+0x394>
    3976:	19 c0       	rjmp	.+50     	; 0x39aa <Options+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3978:	6f 81       	ldd	r22, Y+7	; 0x07
    397a:	78 85       	ldd	r23, Y+8	; 0x08
    397c:	89 85       	ldd	r24, Y+9	; 0x09
    397e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	9e 83       	std	Y+6, r25	; 0x06
    398a:	8d 83       	std	Y+5, r24	; 0x05
    398c:	8d 81       	ldd	r24, Y+5	; 0x05
    398e:	9e 81       	ldd	r25, Y+6	; 0x06
    3990:	9a 83       	std	Y+2, r25	; 0x02
    3992:	89 83       	std	Y+1, r24	; 0x01
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	9a 81       	ldd	r25, Y+2	; 0x02
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	f1 f7       	brne	.-4      	; 0x3998 <Options+0x3dc>
    399c:	9a 83       	std	Y+2, r25	; 0x02
    399e:	89 83       	std	Y+1, r24	; 0x01
    39a0:	04 c0       	rjmp	.+8      	; 0x39aa <Options+0x3ee>
						_delay_ms(1000);
					}
					else
					{
						PWM_voidSetCompMatchValue(150);
    39a2:	86 e9       	ldi	r24, 0x96	; 150
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	0e 94 9a 06 	call	0xd34	; 0xd34 <PWM_voidSetCompMatchValue>
					}
					if(key =='1')
    39aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ac:	81 33       	cpi	r24, 0x31	; 49
    39ae:	09 f0       	breq	.+2      	; 0x39b2 <Options+0x3f6>
    39b0:	46 cf       	rjmp	.-372    	; 0x383e <Options+0x282>
					{
						PWM_voidSetCompMatchValue(0);
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 9a 06 	call	0xd34	; 0xd34 <PWM_voidSetCompMatchValue>
    39ba:	08 cf       	rjmp	.-496    	; 0x37cc <Options+0x210>
						break;
					}
				}
			}
			else if(key == '8')
    39bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    39be:	88 33       	cpi	r24, 0x38	; 56
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <Options+0x408>
    39c2:	04 cf       	rjmp	.-504    	; 0x37cc <Options+0x210>
			}
		}
	}


}
    39c4:	60 96       	adiw	r28, 0x10	; 16
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	08 95       	ret

000039d6 <SetUserName>:

u8 SetUserName()
{
    39d6:	df 93       	push	r29
    39d8:	cf 93       	push	r28
    39da:	00 d0       	rcall	.+0      	; 0x39dc <SetUserName+0x6>
    39dc:	0f 92       	push	r0
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62


		LCD_goto_col_row(0,0);
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	60 e0       	ldi	r22, 0x00	; 0
    39e6:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
		LCD_send_string("User Name:");
    39ea:	80 e2       	ldi	r24, 0x20	; 32
    39ec:	91 e0       	ldi	r25, 0x01	; 1
    39ee:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>

		u8 key = KeyPad_get_pressed_key();
    39f2:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    39f6:	8a 83       	std	Y+2, r24	; 0x02
		u8 result = KeyPad_Set_Username(key);
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <KeyPad_Set_Username>
    39fe:	89 83       	std	Y+1, r24	; 0x01
		if(result == 1)
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	81 30       	cpi	r24, 0x01	; 1
    3a04:	19 f4       	brne	.+6      	; 0x3a0c <SetUserName+0x36>
		{

			return 1;
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	8b 83       	std	Y+3, r24	; 0x03
    3a0a:	01 c0       	rjmp	.+2      	; 0x3a0e <SetUserName+0x38>
		}
		return 0;
    3a0c:	1b 82       	std	Y+3, r1	; 0x03
    3a0e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	08 95       	ret

00003a1c <SetPassword>:

u8 SetPassword()
{
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <SetPassword+0x6>
    3a22:	0f 92       	push	r0
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
	LCD_goto_col_row(0,0);
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_goto_col_row>
	LCD_send_string("Password :");
    3a30:	8b e2       	ldi	r24, 0x2B	; 43
    3a32:	91 e0       	ldi	r25, 0x01	; 1
    3a34:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCD_send_string>
	u8 key = KeyPad_get_pressed_key();
    3a38:	0e 94 d5 15 	call	0x2baa	; 0x2baa <KeyPad_get_pressed_key>
    3a3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 result = KeyPad_Set_Password(key);
    3a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a40:	0e 94 10 18 	call	0x3020	; 0x3020 <KeyPad_Set_Password>
    3a44:	89 83       	std	Y+1, r24	; 0x01
	if(result == 1)
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
    3a48:	81 30       	cpi	r24, 0x01	; 1
    3a4a:	21 f4       	brne	.+8      	; 0x3a54 <SetPassword+0x38>
	{

		return 1;
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	8b 83       	std	Y+3, r24	; 0x03
	}

}
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	00 c0       	rjmp	.+0      	; 0x3a54 <SetPassword+0x38>
    3a54:	0f 90       	pop	r0
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <__prologue_saves__>:
    3a60:	2f 92       	push	r2
    3a62:	3f 92       	push	r3
    3a64:	4f 92       	push	r4
    3a66:	5f 92       	push	r5
    3a68:	6f 92       	push	r6
    3a6a:	7f 92       	push	r7
    3a6c:	8f 92       	push	r8
    3a6e:	9f 92       	push	r9
    3a70:	af 92       	push	r10
    3a72:	bf 92       	push	r11
    3a74:	cf 92       	push	r12
    3a76:	df 92       	push	r13
    3a78:	ef 92       	push	r14
    3a7a:	ff 92       	push	r15
    3a7c:	0f 93       	push	r16
    3a7e:	1f 93       	push	r17
    3a80:	cf 93       	push	r28
    3a82:	df 93       	push	r29
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	ca 1b       	sub	r28, r26
    3a8a:	db 0b       	sbc	r29, r27
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	cd bf       	out	0x3d, r28	; 61
    3a96:	09 94       	ijmp

00003a98 <__epilogue_restores__>:
    3a98:	2a 88       	ldd	r2, Y+18	; 0x12
    3a9a:	39 88       	ldd	r3, Y+17	; 0x11
    3a9c:	48 88       	ldd	r4, Y+16	; 0x10
    3a9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3aa0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3aa2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3aa4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3aa6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3aa8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3aaa:	b9 84       	ldd	r11, Y+9	; 0x09
    3aac:	c8 84       	ldd	r12, Y+8	; 0x08
    3aae:	df 80       	ldd	r13, Y+7	; 0x07
    3ab0:	ee 80       	ldd	r14, Y+6	; 0x06
    3ab2:	fd 80       	ldd	r15, Y+5	; 0x05
    3ab4:	0c 81       	ldd	r16, Y+4	; 0x04
    3ab6:	1b 81       	ldd	r17, Y+3	; 0x03
    3ab8:	aa 81       	ldd	r26, Y+2	; 0x02
    3aba:	b9 81       	ldd	r27, Y+1	; 0x01
    3abc:	ce 0f       	add	r28, r30
    3abe:	d1 1d       	adc	r29, r1
    3ac0:	0f b6       	in	r0, 0x3f	; 63
    3ac2:	f8 94       	cli
    3ac4:	de bf       	out	0x3e, r29	; 62
    3ac6:	0f be       	out	0x3f, r0	; 63
    3ac8:	cd bf       	out	0x3d, r28	; 61
    3aca:	ed 01       	movw	r28, r26
    3acc:	08 95       	ret

00003ace <sprintf>:
    3ace:	ae e0       	ldi	r26, 0x0E	; 14
    3ad0:	b0 e0       	ldi	r27, 0x00	; 0
    3ad2:	ed e6       	ldi	r30, 0x6D	; 109
    3ad4:	fd e1       	ldi	r31, 0x1D	; 29
    3ad6:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__prologue_saves__+0x1c>
    3ada:	0d 89       	ldd	r16, Y+21	; 0x15
    3adc:	1e 89       	ldd	r17, Y+22	; 0x16
    3ade:	86 e0       	ldi	r24, 0x06	; 6
    3ae0:	8c 83       	std	Y+4, r24	; 0x04
    3ae2:	1a 83       	std	Y+2, r17	; 0x02
    3ae4:	09 83       	std	Y+1, r16	; 0x01
    3ae6:	8f ef       	ldi	r24, 0xFF	; 255
    3ae8:	9f e7       	ldi	r25, 0x7F	; 127
    3aea:	9e 83       	std	Y+6, r25	; 0x06
    3aec:	8d 83       	std	Y+5, r24	; 0x05
    3aee:	9e 01       	movw	r18, r28
    3af0:	27 5e       	subi	r18, 0xE7	; 231
    3af2:	3f 4f       	sbci	r19, 0xFF	; 255
    3af4:	ce 01       	movw	r24, r28
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	6f 89       	ldd	r22, Y+23	; 0x17
    3afa:	78 8d       	ldd	r23, Y+24	; 0x18
    3afc:	a9 01       	movw	r20, r18
    3afe:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <vfprintf>
    3b02:	2f 81       	ldd	r18, Y+7	; 0x07
    3b04:	38 85       	ldd	r19, Y+8	; 0x08
    3b06:	02 0f       	add	r16, r18
    3b08:	13 1f       	adc	r17, r19
    3b0a:	f8 01       	movw	r30, r16
    3b0c:	10 82       	st	Z, r1
    3b0e:	2e 96       	adiw	r28, 0x0e	; 14
    3b10:	e4 e0       	ldi	r30, 0x04	; 4
    3b12:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__epilogue_restores__+0x1c>

00003b16 <vfprintf>:
    3b16:	ab e0       	ldi	r26, 0x0B	; 11
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	e1 e9       	ldi	r30, 0x91	; 145
    3b1c:	fd e1       	ldi	r31, 0x1D	; 29
    3b1e:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__prologue_saves__>
    3b22:	3c 01       	movw	r6, r24
    3b24:	2b 01       	movw	r4, r22
    3b26:	5a 01       	movw	r10, r20
    3b28:	fc 01       	movw	r30, r24
    3b2a:	17 82       	std	Z+7, r1	; 0x07
    3b2c:	16 82       	std	Z+6, r1	; 0x06
    3b2e:	83 81       	ldd	r24, Z+3	; 0x03
    3b30:	81 fd       	sbrc	r24, 1
    3b32:	03 c0       	rjmp	.+6      	; 0x3b3a <vfprintf+0x24>
    3b34:	6f ef       	ldi	r22, 0xFF	; 255
    3b36:	7f ef       	ldi	r23, 0xFF	; 255
    3b38:	c6 c1       	rjmp	.+908    	; 0x3ec6 <vfprintf+0x3b0>
    3b3a:	9a e0       	ldi	r25, 0x0A	; 10
    3b3c:	89 2e       	mov	r8, r25
    3b3e:	1e 01       	movw	r2, r28
    3b40:	08 94       	sec
    3b42:	21 1c       	adc	r2, r1
    3b44:	31 1c       	adc	r3, r1
    3b46:	f3 01       	movw	r30, r6
    3b48:	23 81       	ldd	r18, Z+3	; 0x03
    3b4a:	f2 01       	movw	r30, r4
    3b4c:	23 fd       	sbrc	r18, 3
    3b4e:	85 91       	lpm	r24, Z+
    3b50:	23 ff       	sbrs	r18, 3
    3b52:	81 91       	ld	r24, Z+
    3b54:	2f 01       	movw	r4, r30
    3b56:	88 23       	and	r24, r24
    3b58:	09 f4       	brne	.+2      	; 0x3b5c <vfprintf+0x46>
    3b5a:	b2 c1       	rjmp	.+868    	; 0x3ec0 <vfprintf+0x3aa>
    3b5c:	85 32       	cpi	r24, 0x25	; 37
    3b5e:	39 f4       	brne	.+14     	; 0x3b6e <vfprintf+0x58>
    3b60:	23 fd       	sbrc	r18, 3
    3b62:	85 91       	lpm	r24, Z+
    3b64:	23 ff       	sbrs	r18, 3
    3b66:	81 91       	ld	r24, Z+
    3b68:	2f 01       	movw	r4, r30
    3b6a:	85 32       	cpi	r24, 0x25	; 37
    3b6c:	29 f4       	brne	.+10     	; 0x3b78 <vfprintf+0x62>
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	b3 01       	movw	r22, r6
    3b72:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <fputc>
    3b76:	e7 cf       	rjmp	.-50     	; 0x3b46 <vfprintf+0x30>
    3b78:	98 2f       	mov	r25, r24
    3b7a:	ff 24       	eor	r15, r15
    3b7c:	ee 24       	eor	r14, r14
    3b7e:	99 24       	eor	r9, r9
    3b80:	ff e1       	ldi	r31, 0x1F	; 31
    3b82:	ff 15       	cp	r31, r15
    3b84:	d0 f0       	brcs	.+52     	; 0x3bba <vfprintf+0xa4>
    3b86:	9b 32       	cpi	r25, 0x2B	; 43
    3b88:	69 f0       	breq	.+26     	; 0x3ba4 <vfprintf+0x8e>
    3b8a:	9c 32       	cpi	r25, 0x2C	; 44
    3b8c:	28 f4       	brcc	.+10     	; 0x3b98 <vfprintf+0x82>
    3b8e:	90 32       	cpi	r25, 0x20	; 32
    3b90:	59 f0       	breq	.+22     	; 0x3ba8 <vfprintf+0x92>
    3b92:	93 32       	cpi	r25, 0x23	; 35
    3b94:	91 f4       	brne	.+36     	; 0x3bba <vfprintf+0xa4>
    3b96:	0e c0       	rjmp	.+28     	; 0x3bb4 <vfprintf+0x9e>
    3b98:	9d 32       	cpi	r25, 0x2D	; 45
    3b9a:	49 f0       	breq	.+18     	; 0x3bae <vfprintf+0x98>
    3b9c:	90 33       	cpi	r25, 0x30	; 48
    3b9e:	69 f4       	brne	.+26     	; 0x3bba <vfprintf+0xa4>
    3ba0:	41 e0       	ldi	r20, 0x01	; 1
    3ba2:	24 c0       	rjmp	.+72     	; 0x3bec <vfprintf+0xd6>
    3ba4:	52 e0       	ldi	r21, 0x02	; 2
    3ba6:	f5 2a       	or	r15, r21
    3ba8:	84 e0       	ldi	r24, 0x04	; 4
    3baa:	f8 2a       	or	r15, r24
    3bac:	28 c0       	rjmp	.+80     	; 0x3bfe <vfprintf+0xe8>
    3bae:	98 e0       	ldi	r25, 0x08	; 8
    3bb0:	f9 2a       	or	r15, r25
    3bb2:	25 c0       	rjmp	.+74     	; 0x3bfe <vfprintf+0xe8>
    3bb4:	e0 e1       	ldi	r30, 0x10	; 16
    3bb6:	fe 2a       	or	r15, r30
    3bb8:	22 c0       	rjmp	.+68     	; 0x3bfe <vfprintf+0xe8>
    3bba:	f7 fc       	sbrc	r15, 7
    3bbc:	29 c0       	rjmp	.+82     	; 0x3c10 <vfprintf+0xfa>
    3bbe:	89 2f       	mov	r24, r25
    3bc0:	80 53       	subi	r24, 0x30	; 48
    3bc2:	8a 30       	cpi	r24, 0x0A	; 10
    3bc4:	70 f4       	brcc	.+28     	; 0x3be2 <vfprintf+0xcc>
    3bc6:	f6 fe       	sbrs	r15, 6
    3bc8:	05 c0       	rjmp	.+10     	; 0x3bd4 <vfprintf+0xbe>
    3bca:	98 9c       	mul	r9, r8
    3bcc:	90 2c       	mov	r9, r0
    3bce:	11 24       	eor	r1, r1
    3bd0:	98 0e       	add	r9, r24
    3bd2:	15 c0       	rjmp	.+42     	; 0x3bfe <vfprintf+0xe8>
    3bd4:	e8 9c       	mul	r14, r8
    3bd6:	e0 2c       	mov	r14, r0
    3bd8:	11 24       	eor	r1, r1
    3bda:	e8 0e       	add	r14, r24
    3bdc:	f0 e2       	ldi	r31, 0x20	; 32
    3bde:	ff 2a       	or	r15, r31
    3be0:	0e c0       	rjmp	.+28     	; 0x3bfe <vfprintf+0xe8>
    3be2:	9e 32       	cpi	r25, 0x2E	; 46
    3be4:	29 f4       	brne	.+10     	; 0x3bf0 <vfprintf+0xda>
    3be6:	f6 fc       	sbrc	r15, 6
    3be8:	6b c1       	rjmp	.+726    	; 0x3ec0 <vfprintf+0x3aa>
    3bea:	40 e4       	ldi	r20, 0x40	; 64
    3bec:	f4 2a       	or	r15, r20
    3bee:	07 c0       	rjmp	.+14     	; 0x3bfe <vfprintf+0xe8>
    3bf0:	9c 36       	cpi	r25, 0x6C	; 108
    3bf2:	19 f4       	brne	.+6      	; 0x3bfa <vfprintf+0xe4>
    3bf4:	50 e8       	ldi	r21, 0x80	; 128
    3bf6:	f5 2a       	or	r15, r21
    3bf8:	02 c0       	rjmp	.+4      	; 0x3bfe <vfprintf+0xe8>
    3bfa:	98 36       	cpi	r25, 0x68	; 104
    3bfc:	49 f4       	brne	.+18     	; 0x3c10 <vfprintf+0xfa>
    3bfe:	f2 01       	movw	r30, r4
    3c00:	23 fd       	sbrc	r18, 3
    3c02:	95 91       	lpm	r25, Z+
    3c04:	23 ff       	sbrs	r18, 3
    3c06:	91 91       	ld	r25, Z+
    3c08:	2f 01       	movw	r4, r30
    3c0a:	99 23       	and	r25, r25
    3c0c:	09 f0       	breq	.+2      	; 0x3c10 <vfprintf+0xfa>
    3c0e:	b8 cf       	rjmp	.-144    	; 0x3b80 <vfprintf+0x6a>
    3c10:	89 2f       	mov	r24, r25
    3c12:	85 54       	subi	r24, 0x45	; 69
    3c14:	83 30       	cpi	r24, 0x03	; 3
    3c16:	18 f0       	brcs	.+6      	; 0x3c1e <vfprintf+0x108>
    3c18:	80 52       	subi	r24, 0x20	; 32
    3c1a:	83 30       	cpi	r24, 0x03	; 3
    3c1c:	38 f4       	brcc	.+14     	; 0x3c2c <vfprintf+0x116>
    3c1e:	44 e0       	ldi	r20, 0x04	; 4
    3c20:	50 e0       	ldi	r21, 0x00	; 0
    3c22:	a4 0e       	add	r10, r20
    3c24:	b5 1e       	adc	r11, r21
    3c26:	5f e3       	ldi	r21, 0x3F	; 63
    3c28:	59 83       	std	Y+1, r21	; 0x01
    3c2a:	0f c0       	rjmp	.+30     	; 0x3c4a <vfprintf+0x134>
    3c2c:	93 36       	cpi	r25, 0x63	; 99
    3c2e:	31 f0       	breq	.+12     	; 0x3c3c <vfprintf+0x126>
    3c30:	93 37       	cpi	r25, 0x73	; 115
    3c32:	79 f0       	breq	.+30     	; 0x3c52 <vfprintf+0x13c>
    3c34:	93 35       	cpi	r25, 0x53	; 83
    3c36:	09 f0       	breq	.+2      	; 0x3c3a <vfprintf+0x124>
    3c38:	56 c0       	rjmp	.+172    	; 0x3ce6 <vfprintf+0x1d0>
    3c3a:	20 c0       	rjmp	.+64     	; 0x3c7c <vfprintf+0x166>
    3c3c:	f5 01       	movw	r30, r10
    3c3e:	80 81       	ld	r24, Z
    3c40:	89 83       	std	Y+1, r24	; 0x01
    3c42:	42 e0       	ldi	r20, 0x02	; 2
    3c44:	50 e0       	ldi	r21, 0x00	; 0
    3c46:	a4 0e       	add	r10, r20
    3c48:	b5 1e       	adc	r11, r21
    3c4a:	61 01       	movw	r12, r2
    3c4c:	01 e0       	ldi	r16, 0x01	; 1
    3c4e:	10 e0       	ldi	r17, 0x00	; 0
    3c50:	12 c0       	rjmp	.+36     	; 0x3c76 <vfprintf+0x160>
    3c52:	f5 01       	movw	r30, r10
    3c54:	c0 80       	ld	r12, Z
    3c56:	d1 80       	ldd	r13, Z+1	; 0x01
    3c58:	f6 fc       	sbrc	r15, 6
    3c5a:	03 c0       	rjmp	.+6      	; 0x3c62 <vfprintf+0x14c>
    3c5c:	6f ef       	ldi	r22, 0xFF	; 255
    3c5e:	7f ef       	ldi	r23, 0xFF	; 255
    3c60:	02 c0       	rjmp	.+4      	; 0x3c66 <vfprintf+0x150>
    3c62:	69 2d       	mov	r22, r9
    3c64:	70 e0       	ldi	r23, 0x00	; 0
    3c66:	42 e0       	ldi	r20, 0x02	; 2
    3c68:	50 e0       	ldi	r21, 0x00	; 0
    3c6a:	a4 0e       	add	r10, r20
    3c6c:	b5 1e       	adc	r11, r21
    3c6e:	c6 01       	movw	r24, r12
    3c70:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <strnlen>
    3c74:	8c 01       	movw	r16, r24
    3c76:	5f e7       	ldi	r21, 0x7F	; 127
    3c78:	f5 22       	and	r15, r21
    3c7a:	14 c0       	rjmp	.+40     	; 0x3ca4 <vfprintf+0x18e>
    3c7c:	f5 01       	movw	r30, r10
    3c7e:	c0 80       	ld	r12, Z
    3c80:	d1 80       	ldd	r13, Z+1	; 0x01
    3c82:	f6 fc       	sbrc	r15, 6
    3c84:	03 c0       	rjmp	.+6      	; 0x3c8c <vfprintf+0x176>
    3c86:	6f ef       	ldi	r22, 0xFF	; 255
    3c88:	7f ef       	ldi	r23, 0xFF	; 255
    3c8a:	02 c0       	rjmp	.+4      	; 0x3c90 <vfprintf+0x17a>
    3c8c:	69 2d       	mov	r22, r9
    3c8e:	70 e0       	ldi	r23, 0x00	; 0
    3c90:	42 e0       	ldi	r20, 0x02	; 2
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	a4 0e       	add	r10, r20
    3c96:	b5 1e       	adc	r11, r21
    3c98:	c6 01       	movw	r24, r12
    3c9a:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <strnlen_P>
    3c9e:	8c 01       	movw	r16, r24
    3ca0:	50 e8       	ldi	r21, 0x80	; 128
    3ca2:	f5 2a       	or	r15, r21
    3ca4:	f3 fe       	sbrs	r15, 3
    3ca6:	07 c0       	rjmp	.+14     	; 0x3cb6 <vfprintf+0x1a0>
    3ca8:	1a c0       	rjmp	.+52     	; 0x3cde <vfprintf+0x1c8>
    3caa:	80 e2       	ldi	r24, 0x20	; 32
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	b3 01       	movw	r22, r6
    3cb0:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <fputc>
    3cb4:	ea 94       	dec	r14
    3cb6:	8e 2d       	mov	r24, r14
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	08 17       	cp	r16, r24
    3cbc:	19 07       	cpc	r17, r25
    3cbe:	a8 f3       	brcs	.-22     	; 0x3caa <vfprintf+0x194>
    3cc0:	0e c0       	rjmp	.+28     	; 0x3cde <vfprintf+0x1c8>
    3cc2:	f6 01       	movw	r30, r12
    3cc4:	f7 fc       	sbrc	r15, 7
    3cc6:	85 91       	lpm	r24, Z+
    3cc8:	f7 fe       	sbrs	r15, 7
    3cca:	81 91       	ld	r24, Z+
    3ccc:	6f 01       	movw	r12, r30
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	b3 01       	movw	r22, r6
    3cd2:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <fputc>
    3cd6:	e1 10       	cpse	r14, r1
    3cd8:	ea 94       	dec	r14
    3cda:	01 50       	subi	r16, 0x01	; 1
    3cdc:	10 40       	sbci	r17, 0x00	; 0
    3cde:	01 15       	cp	r16, r1
    3ce0:	11 05       	cpc	r17, r1
    3ce2:	79 f7       	brne	.-34     	; 0x3cc2 <vfprintf+0x1ac>
    3ce4:	ea c0       	rjmp	.+468    	; 0x3eba <vfprintf+0x3a4>
    3ce6:	94 36       	cpi	r25, 0x64	; 100
    3ce8:	11 f0       	breq	.+4      	; 0x3cee <vfprintf+0x1d8>
    3cea:	99 36       	cpi	r25, 0x69	; 105
    3cec:	69 f5       	brne	.+90     	; 0x3d48 <vfprintf+0x232>
    3cee:	f7 fe       	sbrs	r15, 7
    3cf0:	08 c0       	rjmp	.+16     	; 0x3d02 <vfprintf+0x1ec>
    3cf2:	f5 01       	movw	r30, r10
    3cf4:	20 81       	ld	r18, Z
    3cf6:	31 81       	ldd	r19, Z+1	; 0x01
    3cf8:	42 81       	ldd	r20, Z+2	; 0x02
    3cfa:	53 81       	ldd	r21, Z+3	; 0x03
    3cfc:	84 e0       	ldi	r24, 0x04	; 4
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	0a c0       	rjmp	.+20     	; 0x3d16 <vfprintf+0x200>
    3d02:	f5 01       	movw	r30, r10
    3d04:	80 81       	ld	r24, Z
    3d06:	91 81       	ldd	r25, Z+1	; 0x01
    3d08:	9c 01       	movw	r18, r24
    3d0a:	44 27       	eor	r20, r20
    3d0c:	37 fd       	sbrc	r19, 7
    3d0e:	40 95       	com	r20
    3d10:	54 2f       	mov	r21, r20
    3d12:	82 e0       	ldi	r24, 0x02	; 2
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	a8 0e       	add	r10, r24
    3d18:	b9 1e       	adc	r11, r25
    3d1a:	9f e6       	ldi	r25, 0x6F	; 111
    3d1c:	f9 22       	and	r15, r25
    3d1e:	57 ff       	sbrs	r21, 7
    3d20:	09 c0       	rjmp	.+18     	; 0x3d34 <vfprintf+0x21e>
    3d22:	50 95       	com	r21
    3d24:	40 95       	com	r20
    3d26:	30 95       	com	r19
    3d28:	21 95       	neg	r18
    3d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d2c:	4f 4f       	sbci	r20, 0xFF	; 255
    3d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d30:	e0 e8       	ldi	r30, 0x80	; 128
    3d32:	fe 2a       	or	r15, r30
    3d34:	ca 01       	movw	r24, r20
    3d36:	b9 01       	movw	r22, r18
    3d38:	a1 01       	movw	r20, r2
    3d3a:	2a e0       	ldi	r18, 0x0A	; 10
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__ultoa_invert>
    3d42:	d8 2e       	mov	r13, r24
    3d44:	d2 18       	sub	r13, r2
    3d46:	40 c0       	rjmp	.+128    	; 0x3dc8 <vfprintf+0x2b2>
    3d48:	95 37       	cpi	r25, 0x75	; 117
    3d4a:	29 f4       	brne	.+10     	; 0x3d56 <vfprintf+0x240>
    3d4c:	1f 2d       	mov	r17, r15
    3d4e:	1f 7e       	andi	r17, 0xEF	; 239
    3d50:	2a e0       	ldi	r18, 0x0A	; 10
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	1d c0       	rjmp	.+58     	; 0x3d90 <vfprintf+0x27a>
    3d56:	1f 2d       	mov	r17, r15
    3d58:	19 7f       	andi	r17, 0xF9	; 249
    3d5a:	9f 36       	cpi	r25, 0x6F	; 111
    3d5c:	61 f0       	breq	.+24     	; 0x3d76 <vfprintf+0x260>
    3d5e:	90 37       	cpi	r25, 0x70	; 112
    3d60:	20 f4       	brcc	.+8      	; 0x3d6a <vfprintf+0x254>
    3d62:	98 35       	cpi	r25, 0x58	; 88
    3d64:	09 f0       	breq	.+2      	; 0x3d68 <vfprintf+0x252>
    3d66:	ac c0       	rjmp	.+344    	; 0x3ec0 <vfprintf+0x3aa>
    3d68:	0f c0       	rjmp	.+30     	; 0x3d88 <vfprintf+0x272>
    3d6a:	90 37       	cpi	r25, 0x70	; 112
    3d6c:	39 f0       	breq	.+14     	; 0x3d7c <vfprintf+0x266>
    3d6e:	98 37       	cpi	r25, 0x78	; 120
    3d70:	09 f0       	breq	.+2      	; 0x3d74 <vfprintf+0x25e>
    3d72:	a6 c0       	rjmp	.+332    	; 0x3ec0 <vfprintf+0x3aa>
    3d74:	04 c0       	rjmp	.+8      	; 0x3d7e <vfprintf+0x268>
    3d76:	28 e0       	ldi	r18, 0x08	; 8
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	0a c0       	rjmp	.+20     	; 0x3d90 <vfprintf+0x27a>
    3d7c:	10 61       	ori	r17, 0x10	; 16
    3d7e:	14 fd       	sbrc	r17, 4
    3d80:	14 60       	ori	r17, 0x04	; 4
    3d82:	20 e1       	ldi	r18, 0x10	; 16
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	04 c0       	rjmp	.+8      	; 0x3d90 <vfprintf+0x27a>
    3d88:	14 fd       	sbrc	r17, 4
    3d8a:	16 60       	ori	r17, 0x06	; 6
    3d8c:	20 e1       	ldi	r18, 0x10	; 16
    3d8e:	32 e0       	ldi	r19, 0x02	; 2
    3d90:	17 ff       	sbrs	r17, 7
    3d92:	08 c0       	rjmp	.+16     	; 0x3da4 <vfprintf+0x28e>
    3d94:	f5 01       	movw	r30, r10
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	44 e0       	ldi	r20, 0x04	; 4
    3da0:	50 e0       	ldi	r21, 0x00	; 0
    3da2:	08 c0       	rjmp	.+16     	; 0x3db4 <vfprintf+0x29e>
    3da4:	f5 01       	movw	r30, r10
    3da6:	80 81       	ld	r24, Z
    3da8:	91 81       	ldd	r25, Z+1	; 0x01
    3daa:	bc 01       	movw	r22, r24
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	42 e0       	ldi	r20, 0x02	; 2
    3db2:	50 e0       	ldi	r21, 0x00	; 0
    3db4:	a4 0e       	add	r10, r20
    3db6:	b5 1e       	adc	r11, r21
    3db8:	a1 01       	movw	r20, r2
    3dba:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__ultoa_invert>
    3dbe:	d8 2e       	mov	r13, r24
    3dc0:	d2 18       	sub	r13, r2
    3dc2:	8f e7       	ldi	r24, 0x7F	; 127
    3dc4:	f8 2e       	mov	r15, r24
    3dc6:	f1 22       	and	r15, r17
    3dc8:	f6 fe       	sbrs	r15, 6
    3dca:	0b c0       	rjmp	.+22     	; 0x3de2 <vfprintf+0x2cc>
    3dcc:	5e ef       	ldi	r21, 0xFE	; 254
    3dce:	f5 22       	and	r15, r21
    3dd0:	d9 14       	cp	r13, r9
    3dd2:	38 f4       	brcc	.+14     	; 0x3de2 <vfprintf+0x2cc>
    3dd4:	f4 fe       	sbrs	r15, 4
    3dd6:	07 c0       	rjmp	.+14     	; 0x3de6 <vfprintf+0x2d0>
    3dd8:	f2 fc       	sbrc	r15, 2
    3dda:	05 c0       	rjmp	.+10     	; 0x3de6 <vfprintf+0x2d0>
    3ddc:	8f ee       	ldi	r24, 0xEF	; 239
    3dde:	f8 22       	and	r15, r24
    3de0:	02 c0       	rjmp	.+4      	; 0x3de6 <vfprintf+0x2d0>
    3de2:	1d 2d       	mov	r17, r13
    3de4:	01 c0       	rjmp	.+2      	; 0x3de8 <vfprintf+0x2d2>
    3de6:	19 2d       	mov	r17, r9
    3de8:	f4 fe       	sbrs	r15, 4
    3dea:	0d c0       	rjmp	.+26     	; 0x3e06 <vfprintf+0x2f0>
    3dec:	fe 01       	movw	r30, r28
    3dee:	ed 0d       	add	r30, r13
    3df0:	f1 1d       	adc	r31, r1
    3df2:	80 81       	ld	r24, Z
    3df4:	80 33       	cpi	r24, 0x30	; 48
    3df6:	19 f4       	brne	.+6      	; 0x3dfe <vfprintf+0x2e8>
    3df8:	99 ee       	ldi	r25, 0xE9	; 233
    3dfa:	f9 22       	and	r15, r25
    3dfc:	08 c0       	rjmp	.+16     	; 0x3e0e <vfprintf+0x2f8>
    3dfe:	1f 5f       	subi	r17, 0xFF	; 255
    3e00:	f2 fe       	sbrs	r15, 2
    3e02:	05 c0       	rjmp	.+10     	; 0x3e0e <vfprintf+0x2f8>
    3e04:	03 c0       	rjmp	.+6      	; 0x3e0c <vfprintf+0x2f6>
    3e06:	8f 2d       	mov	r24, r15
    3e08:	86 78       	andi	r24, 0x86	; 134
    3e0a:	09 f0       	breq	.+2      	; 0x3e0e <vfprintf+0x2f8>
    3e0c:	1f 5f       	subi	r17, 0xFF	; 255
    3e0e:	0f 2d       	mov	r16, r15
    3e10:	f3 fc       	sbrc	r15, 3
    3e12:	14 c0       	rjmp	.+40     	; 0x3e3c <vfprintf+0x326>
    3e14:	f0 fe       	sbrs	r15, 0
    3e16:	0f c0       	rjmp	.+30     	; 0x3e36 <vfprintf+0x320>
    3e18:	1e 15       	cp	r17, r14
    3e1a:	10 f0       	brcs	.+4      	; 0x3e20 <vfprintf+0x30a>
    3e1c:	9d 2c       	mov	r9, r13
    3e1e:	0b c0       	rjmp	.+22     	; 0x3e36 <vfprintf+0x320>
    3e20:	9d 2c       	mov	r9, r13
    3e22:	9e 0c       	add	r9, r14
    3e24:	91 1a       	sub	r9, r17
    3e26:	1e 2d       	mov	r17, r14
    3e28:	06 c0       	rjmp	.+12     	; 0x3e36 <vfprintf+0x320>
    3e2a:	80 e2       	ldi	r24, 0x20	; 32
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	b3 01       	movw	r22, r6
    3e30:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <fputc>
    3e34:	1f 5f       	subi	r17, 0xFF	; 255
    3e36:	1e 15       	cp	r17, r14
    3e38:	c0 f3       	brcs	.-16     	; 0x3e2a <vfprintf+0x314>
    3e3a:	04 c0       	rjmp	.+8      	; 0x3e44 <vfprintf+0x32e>
    3e3c:	1e 15       	cp	r17, r14
    3e3e:	10 f4       	brcc	.+4      	; 0x3e44 <vfprintf+0x32e>
    3e40:	e1 1a       	sub	r14, r17
    3e42:	01 c0       	rjmp	.+2      	; 0x3e46 <vfprintf+0x330>
    3e44:	ee 24       	eor	r14, r14
    3e46:	04 ff       	sbrs	r16, 4
    3e48:	0f c0       	rjmp	.+30     	; 0x3e68 <vfprintf+0x352>
    3e4a:	80 e3       	ldi	r24, 0x30	; 48
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	b3 01       	movw	r22, r6
    3e50:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <fputc>
    3e54:	02 ff       	sbrs	r16, 2
    3e56:	1d c0       	rjmp	.+58     	; 0x3e92 <vfprintf+0x37c>
    3e58:	01 fd       	sbrc	r16, 1
    3e5a:	03 c0       	rjmp	.+6      	; 0x3e62 <vfprintf+0x34c>
    3e5c:	88 e7       	ldi	r24, 0x78	; 120
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	0e c0       	rjmp	.+28     	; 0x3e7e <vfprintf+0x368>
    3e62:	88 e5       	ldi	r24, 0x58	; 88
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	0b c0       	rjmp	.+22     	; 0x3e7e <vfprintf+0x368>
    3e68:	80 2f       	mov	r24, r16
    3e6a:	86 78       	andi	r24, 0x86	; 134
    3e6c:	91 f0       	breq	.+36     	; 0x3e92 <vfprintf+0x37c>
    3e6e:	01 ff       	sbrs	r16, 1
    3e70:	02 c0       	rjmp	.+4      	; 0x3e76 <vfprintf+0x360>
    3e72:	8b e2       	ldi	r24, 0x2B	; 43
    3e74:	01 c0       	rjmp	.+2      	; 0x3e78 <vfprintf+0x362>
    3e76:	80 e2       	ldi	r24, 0x20	; 32
    3e78:	f7 fc       	sbrc	r15, 7
    3e7a:	8d e2       	ldi	r24, 0x2D	; 45
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	b3 01       	movw	r22, r6
    3e80:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <fputc>
    3e84:	06 c0       	rjmp	.+12     	; 0x3e92 <vfprintf+0x37c>
    3e86:	80 e3       	ldi	r24, 0x30	; 48
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	b3 01       	movw	r22, r6
    3e8c:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <fputc>
    3e90:	9a 94       	dec	r9
    3e92:	d9 14       	cp	r13, r9
    3e94:	c0 f3       	brcs	.-16     	; 0x3e86 <vfprintf+0x370>
    3e96:	da 94       	dec	r13
    3e98:	f1 01       	movw	r30, r2
    3e9a:	ed 0d       	add	r30, r13
    3e9c:	f1 1d       	adc	r31, r1
    3e9e:	80 81       	ld	r24, Z
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	b3 01       	movw	r22, r6
    3ea4:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <fputc>
    3ea8:	dd 20       	and	r13, r13
    3eaa:	a9 f7       	brne	.-22     	; 0x3e96 <vfprintf+0x380>
    3eac:	06 c0       	rjmp	.+12     	; 0x3eba <vfprintf+0x3a4>
    3eae:	80 e2       	ldi	r24, 0x20	; 32
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	b3 01       	movw	r22, r6
    3eb4:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <fputc>
    3eb8:	ea 94       	dec	r14
    3eba:	ee 20       	and	r14, r14
    3ebc:	c1 f7       	brne	.-16     	; 0x3eae <vfprintf+0x398>
    3ebe:	43 ce       	rjmp	.-890    	; 0x3b46 <vfprintf+0x30>
    3ec0:	f3 01       	movw	r30, r6
    3ec2:	66 81       	ldd	r22, Z+6	; 0x06
    3ec4:	77 81       	ldd	r23, Z+7	; 0x07
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	2b 96       	adiw	r28, 0x0b	; 11
    3eca:	e2 e1       	ldi	r30, 0x12	; 18
    3ecc:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__epilogue_restores__>

00003ed0 <strnlen_P>:
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	05 90       	lpm	r0, Z+
    3ed4:	61 50       	subi	r22, 0x01	; 1
    3ed6:	70 40       	sbci	r23, 0x00	; 0
    3ed8:	01 10       	cpse	r0, r1
    3eda:	d8 f7       	brcc	.-10     	; 0x3ed2 <strnlen_P+0x2>
    3edc:	80 95       	com	r24
    3ede:	90 95       	com	r25
    3ee0:	8e 0f       	add	r24, r30
    3ee2:	9f 1f       	adc	r25, r31
    3ee4:	08 95       	ret

00003ee6 <strnlen>:
    3ee6:	fc 01       	movw	r30, r24
    3ee8:	61 50       	subi	r22, 0x01	; 1
    3eea:	70 40       	sbci	r23, 0x00	; 0
    3eec:	01 90       	ld	r0, Z+
    3eee:	01 10       	cpse	r0, r1
    3ef0:	d8 f7       	brcc	.-10     	; 0x3ee8 <strnlen+0x2>
    3ef2:	80 95       	com	r24
    3ef4:	90 95       	com	r25
    3ef6:	8e 0f       	add	r24, r30
    3ef8:	9f 1f       	adc	r25, r31
    3efa:	08 95       	ret

00003efc <fputc>:
    3efc:	0f 93       	push	r16
    3efe:	1f 93       	push	r17
    3f00:	cf 93       	push	r28
    3f02:	df 93       	push	r29
    3f04:	8c 01       	movw	r16, r24
    3f06:	eb 01       	movw	r28, r22
    3f08:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0a:	81 ff       	sbrs	r24, 1
    3f0c:	1b c0       	rjmp	.+54     	; 0x3f44 <fputc+0x48>
    3f0e:	82 ff       	sbrs	r24, 2
    3f10:	0d c0       	rjmp	.+26     	; 0x3f2c <fputc+0x30>
    3f12:	2e 81       	ldd	r18, Y+6	; 0x06
    3f14:	3f 81       	ldd	r19, Y+7	; 0x07
    3f16:	8c 81       	ldd	r24, Y+4	; 0x04
    3f18:	9d 81       	ldd	r25, Y+5	; 0x05
    3f1a:	28 17       	cp	r18, r24
    3f1c:	39 07       	cpc	r19, r25
    3f1e:	64 f4       	brge	.+24     	; 0x3f38 <fputc+0x3c>
    3f20:	e8 81       	ld	r30, Y
    3f22:	f9 81       	ldd	r31, Y+1	; 0x01
    3f24:	01 93       	st	Z+, r16
    3f26:	f9 83       	std	Y+1, r31	; 0x01
    3f28:	e8 83       	st	Y, r30
    3f2a:	06 c0       	rjmp	.+12     	; 0x3f38 <fputc+0x3c>
    3f2c:	e8 85       	ldd	r30, Y+8	; 0x08
    3f2e:	f9 85       	ldd	r31, Y+9	; 0x09
    3f30:	80 2f       	mov	r24, r16
    3f32:	09 95       	icall
    3f34:	89 2b       	or	r24, r25
    3f36:	31 f4       	brne	.+12     	; 0x3f44 <fputc+0x48>
    3f38:	8e 81       	ldd	r24, Y+6	; 0x06
    3f3a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f3c:	01 96       	adiw	r24, 0x01	; 1
    3f3e:	9f 83       	std	Y+7, r25	; 0x07
    3f40:	8e 83       	std	Y+6, r24	; 0x06
    3f42:	02 c0       	rjmp	.+4      	; 0x3f48 <fputc+0x4c>
    3f44:	0f ef       	ldi	r16, 0xFF	; 255
    3f46:	1f ef       	ldi	r17, 0xFF	; 255
    3f48:	c8 01       	movw	r24, r16
    3f4a:	df 91       	pop	r29
    3f4c:	cf 91       	pop	r28
    3f4e:	1f 91       	pop	r17
    3f50:	0f 91       	pop	r16
    3f52:	08 95       	ret

00003f54 <__ultoa_invert>:
    3f54:	fa 01       	movw	r30, r20
    3f56:	aa 27       	eor	r26, r26
    3f58:	28 30       	cpi	r18, 0x08	; 8
    3f5a:	51 f1       	breq	.+84     	; 0x3fb0 <__ultoa_invert+0x5c>
    3f5c:	20 31       	cpi	r18, 0x10	; 16
    3f5e:	81 f1       	breq	.+96     	; 0x3fc0 <__ultoa_invert+0x6c>
    3f60:	e8 94       	clt
    3f62:	6f 93       	push	r22
    3f64:	6e 7f       	andi	r22, 0xFE	; 254
    3f66:	6e 5f       	subi	r22, 0xFE	; 254
    3f68:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6e:	af 4f       	sbci	r26, 0xFF	; 255
    3f70:	b1 e0       	ldi	r27, 0x01	; 1
    3f72:	3e d0       	rcall	.+124    	; 0x3ff0 <__ultoa_invert+0x9c>
    3f74:	b4 e0       	ldi	r27, 0x04	; 4
    3f76:	3c d0       	rcall	.+120    	; 0x3ff0 <__ultoa_invert+0x9c>
    3f78:	67 0f       	add	r22, r23
    3f7a:	78 1f       	adc	r23, r24
    3f7c:	89 1f       	adc	r24, r25
    3f7e:	9a 1f       	adc	r25, r26
    3f80:	a1 1d       	adc	r26, r1
    3f82:	68 0f       	add	r22, r24
    3f84:	79 1f       	adc	r23, r25
    3f86:	8a 1f       	adc	r24, r26
    3f88:	91 1d       	adc	r25, r1
    3f8a:	a1 1d       	adc	r26, r1
    3f8c:	6a 0f       	add	r22, r26
    3f8e:	71 1d       	adc	r23, r1
    3f90:	81 1d       	adc	r24, r1
    3f92:	91 1d       	adc	r25, r1
    3f94:	a1 1d       	adc	r26, r1
    3f96:	20 d0       	rcall	.+64     	; 0x3fd8 <__ultoa_invert+0x84>
    3f98:	09 f4       	brne	.+2      	; 0x3f9c <__ultoa_invert+0x48>
    3f9a:	68 94       	set
    3f9c:	3f 91       	pop	r19
    3f9e:	2a e0       	ldi	r18, 0x0A	; 10
    3fa0:	26 9f       	mul	r18, r22
    3fa2:	11 24       	eor	r1, r1
    3fa4:	30 19       	sub	r19, r0
    3fa6:	30 5d       	subi	r19, 0xD0	; 208
    3fa8:	31 93       	st	Z+, r19
    3faa:	de f6       	brtc	.-74     	; 0x3f62 <__ultoa_invert+0xe>
    3fac:	cf 01       	movw	r24, r30
    3fae:	08 95       	ret
    3fb0:	46 2f       	mov	r20, r22
    3fb2:	47 70       	andi	r20, 0x07	; 7
    3fb4:	40 5d       	subi	r20, 0xD0	; 208
    3fb6:	41 93       	st	Z+, r20
    3fb8:	b3 e0       	ldi	r27, 0x03	; 3
    3fba:	0f d0       	rcall	.+30     	; 0x3fda <__ultoa_invert+0x86>
    3fbc:	c9 f7       	brne	.-14     	; 0x3fb0 <__ultoa_invert+0x5c>
    3fbe:	f6 cf       	rjmp	.-20     	; 0x3fac <__ultoa_invert+0x58>
    3fc0:	46 2f       	mov	r20, r22
    3fc2:	4f 70       	andi	r20, 0x0F	; 15
    3fc4:	40 5d       	subi	r20, 0xD0	; 208
    3fc6:	4a 33       	cpi	r20, 0x3A	; 58
    3fc8:	18 f0       	brcs	.+6      	; 0x3fd0 <__ultoa_invert+0x7c>
    3fca:	49 5d       	subi	r20, 0xD9	; 217
    3fcc:	31 fd       	sbrc	r19, 1
    3fce:	40 52       	subi	r20, 0x20	; 32
    3fd0:	41 93       	st	Z+, r20
    3fd2:	02 d0       	rcall	.+4      	; 0x3fd8 <__ultoa_invert+0x84>
    3fd4:	a9 f7       	brne	.-22     	; 0x3fc0 <__ultoa_invert+0x6c>
    3fd6:	ea cf       	rjmp	.-44     	; 0x3fac <__ultoa_invert+0x58>
    3fd8:	b4 e0       	ldi	r27, 0x04	; 4
    3fda:	a6 95       	lsr	r26
    3fdc:	97 95       	ror	r25
    3fde:	87 95       	ror	r24
    3fe0:	77 95       	ror	r23
    3fe2:	67 95       	ror	r22
    3fe4:	ba 95       	dec	r27
    3fe6:	c9 f7       	brne	.-14     	; 0x3fda <__ultoa_invert+0x86>
    3fe8:	00 97       	sbiw	r24, 0x00	; 0
    3fea:	61 05       	cpc	r22, r1
    3fec:	71 05       	cpc	r23, r1
    3fee:	08 95       	ret
    3ff0:	9b 01       	movw	r18, r22
    3ff2:	ac 01       	movw	r20, r24
    3ff4:	0a 2e       	mov	r0, r26
    3ff6:	06 94       	lsr	r0
    3ff8:	57 95       	ror	r21
    3ffa:	47 95       	ror	r20
    3ffc:	37 95       	ror	r19
    3ffe:	27 95       	ror	r18
    4000:	ba 95       	dec	r27
    4002:	c9 f7       	brne	.-14     	; 0x3ff6 <__ultoa_invert+0xa2>
    4004:	62 0f       	add	r22, r18
    4006:	73 1f       	adc	r23, r19
    4008:	84 1f       	adc	r24, r20
    400a:	95 1f       	adc	r25, r21
    400c:	a0 1d       	adc	r26, r0
    400e:	08 95       	ret

00004010 <_exit>:
    4010:	f8 94       	cli

00004012 <__stop_program>:
    4012:	ff cf       	rjmp	.-2      	; 0x4012 <__stop_program>
